@prefix olive: <http://data.oliveai.com/ontology/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix gist: <https://ontologies.semanticarts.com/gist/> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix wd: <http://www.wikidata.org/entity/> .
@prefix wdt: <http://www.wikidata.org/prop/direct/> .

<http://data.oliveai.com/ontology/> rdf:type owl:Ontology ;
                                      rdfs:comment "This is the upper ontology designed particularly for and by Olive. It utilizes gist (thank you to Semantic Arts!) and skos (thank you to Alistair Miles, Sean Bechofer, and the W3C's SWDWG!). While even those ontologies are sometimes heavily edited for our purposes, we preserve the prefix here and have tried to minimize name or conceptual changes that would inhibit cross-compatibility." ;
                                      rdfs:label "Olive's upper ontology" .
    
# THIS FILE IS ORGANIZED AS FOLLOWS (each section alphabetized):
# - Classes
# - Properties
# - Datatypes
# - Individuals

#################################################################
#    Classes
#################################################################

olive:Abstract a owl:Class ;
        rdfs:subClassOf olive:Content, olive:NonphysicalArtifact;
        rdfs:label "abstract"^^xsd:string;
        skos:prefLabel "abstract for some content"^^xsd:string ;
        rdfs:comment """Every instance of olive:Abstract is a summary of some (other) content, usually the content communicated by some formal content bearing thing such as a research paper or book. Note that, as the word itself indicates, an instance of olive:Abstract is an abstraction from the thing for which it is an abstract. Thus, if :Abstract01 is an abstract for :Content01, it will be true that (:Content01 olive:abstractsTo :Abstract01).
		
		Note that you should use olive:transcript if you want to relate an instance of olive:Abstract to a string that expresses the content of the abstract. If you want to skip reification of the abstract itself, you should use olive:abstract to relate a piece of content to a string expressing the content of the abstract."""^^xsd:string ;
.

olive:Accident a owl:Class ;
	rdfs:label "accident"^^xsd:string ;
        skos:prefLabel "accident"@en ;
	rdfs:subClassOf olive:Event ;
	rdfs:comment """olive:Accident is the class of all events that have negative unintended consequences."""^^xsd:string ;
        olive:exampleSubclass olive:Accident-Medical;
        olive:exampleInstance "ex:CarAccidentOn22ndStreet"^^xsd:string ;
.

olive:Accident-Medical a owl:Class ;
	rdfs:label "medical accident"^^xsd:string ;
        skos:prefLabel "medical accident"@en ;
	rdfs:subClassOf olive:Accident ;
	rdfs:comment """olive:Accident-Medical is the class of all medical accidents."""^^xsd:string ;
.

olive:Account a owl:Class ;
        rdfs:subClassOf olive:Contract;
        rdfs:label "account"^^xsd:string;
        skos:prefLabel "account"@en ;
        rdfs:comment """This is the subclass of olive:Contract all instances of which are contractual business agreements between one agent (olive:accountSeller) and another (olive:accountCustomer).

One should be careful to distinguish between instances of this class and the relationships that they govern: the latter are instances of olive:BusinessRelationship, each of which will be such that the following holds: (:Account1 olive:governsBehavior :BusinessRelationship1) .

In practice, most instances of this class are instances of olive:Account-Olive, which is the subclass of accounts in which Olive is the olive:accountSeller."""^^xsd:string ;
.

olive:Account-Olive a owl:Class ;
        rdfs:subClassOf olive:Account;
        rdfs:label "Olive account"^^xsd:string;
        skos:prefLabel "Olive account"@en ;
        rdfs:comment """This is the subclass of olive:Account, wherein all instances have a olive:accountSeller of Olive."""^^xsd:string ;
	owl:equivalentClass [a owl:Class ;
			     owl:intersectionOf (olive:Account
			     			 [a owl:Restriction ;
						  owl:onProperty olive:accountSeller ;
						  owl:hasValue olive:Olive ;])] ;
.

olive:AccountStatus a owl:Class ;
        rdfs:subClassOf olive:Status ;
        rdfs:label "account status"^^xsd:string;
        skos:prefLabel "account status"@en ;
        rdfs:comment """This is the class of 'tags' for account statuses. For example, we can identify an account as having its delivery completed."""^^xsd:string ;
.

olive:Action-WS a owl:Class ;
        rdfs:subClassOf olive:Function ;
        rdfs:label "web service action"^^xsd:string;
        skos:prefLabel "action"@en ;
	skos:altLabel "web service action"@en ;
        rdfs:comment """Instances of olive:Action-WS are functions (see olive:Function) that (partly) compose a given web service (see olive:WebService)."""^^xsd:string ;
.

olive:Address a owl:Class ;
	rdfs:subClassOf olive:Place, olive:Artifact ;
	rdfs:label "address"^^xsd:string ;
	skos:prefLabel "address"@en ;
	rdfs:comment """A reference to a place (real or virtual) that can be located by some routing algorithm, and where messages or things can be sent to or retrieved from. E.g. PO Box or URL to a PDF file.

Note that the address is the location, and not simply the string that refers to that that location. So, one's email address is distinct from the string for the addresss, and one's home address is distinct from the letters and numbers that one would put on an envelope to be shipped there."""^^xsd:string ;
	owl:equivalentClass [ a owl:Restriction ;
			      owl:onProperty olive:address ;
			      owl:someValuesFrom xsd:string ; ] ;
	olive:formerName "gist:Address"^^xsd:string;
        olive:uriTemplate [
                olive:uniqueText "olive:Address/ribbonUuid=" ;
                olive:uriUsesProperty olive:ribbonUuid ;
                olive:note "Applicable when importing data from the RibbonHealth API"^^xsd:string ;
                ] ;
.

olive:Admission a owl:Class ;
        rdfs:subClassOf olive:MedicalCareEvent ;
        rdfs:label "admission"^^xsd:string;
        skos:prefLabel "hospital admission"@en ;
        rdfs:comment """Each instance of olive:Admission is when an instance of olive:MedicalCareEvent in which a patient is admitted to the hospital or other care facility for treatment."""^^xsd:string ;
        olive:exampleSubclass olive:Admission-Emergency ;
.


olive:Admission-Emergency a owl:Class ;
        rdfs:subClassOf olive:Admission ;
        rdfs:label "emergency admission"^^xsd:string;
        skos:prefLabel "emergency admission"@en ;
        rdfs:comment """All admission type medical care events in which the patient requires immediate medical intervention as a result of sever, life threatening, o9r potentially disabling conditions."""^^xsd:string ;
	owl:equivalentClass [a owl:Restriction ;
			     owl:onProperty olive:admissionType ;
			     owl:hasValue "1"^^xsd:integer ;] ;
.

olive:Admission-Elective a owl:Class ;
        rdfs:subClassOf olive:Admission ;
        rdfs:label "elective admission"^^xsd:string;
        skos:prefLabel "elective admission"@en ;
        rdfs:comment """All admission type medical care events in which the patient's condition permits adequate time to schedule the admission based on the availability of a suitable accommodation."""^^xsd:string ;
	owl:equivalentClass [a owl:Restriction ;
			     owl:onProperty olive:admissionType ;
			     owl:hasValue "3"^^xsd:integer ;] ;
.

olive:Admission-Newborn a owl:Class ;
        rdfs:subClassOf olive:Admission ;
        rdfs:label "newborn admission"^^xsd:string;
        skos:prefLabel "newborn admission"@en ;
        rdfs:comment """All admission type medical care events in which the patient is a newborn. This requires use of special codes (see olive:admissionSource)."""^^xsd:string ;
	owl:equivalentClass [a owl:Restriction ;
			     owl:onProperty olive:admissionType ;
			     owl:hasValue "4"^^xsd:integer ;] ;
.

olive:Admission-Trauma a owl:Class ;
        rdfs:subClassOf olive:Admission ;
        rdfs:label "trauma admission"^^xsd:string;
        skos:prefLabel "trauma admission"@en ;
        rdfs:comment """All admission type medical care events in which the patient the patient visits a trama center/hospital as licensed or designated by thte state or local government authority, usually requires surgery."""^^xsd:string ;
	owl:equivalentClass [a owl:Restriction ;
			     owl:onProperty olive:admissionType ;
			     owl:hasValue "3"^^xsd:integer ;] ;
.

olive:Admission-Urgent a owl:Class ;
        rdfs:subClassOf olive:Admission ;
        rdfs:label "urgent admission"^^xsd:string;
        skos:prefLabel "urgent admission"@en ;
        rdfs:comment """All admission type medical care events in which the patient requires immediate attention for the care and treaatment of a physical or mental disorder. Generally the patient is admitted to the first available and suitable accommodation."""^^xsd:string ;
	owl:equivalentClass [a owl:Restriction ;
			     owl:onProperty olive:admissionType ;
			     owl:hasValue "2"^^xsd:integer ;] ;
.

olive:Agent a owl:Class ;
        rdfs:subClassOf owl:Thing ;
        rdfs:label "agent"^^xsd:string;
        skos:prefLabel "agent"^^xsd:string ;
        rdfs:comment """olive:Agent is a very general class. Every instance is capable of action (see some hedges below). Important subclasses include olive:Person and olive:Organization. Agents are capable of entering into contracts (legal agents), affecting the world around them (causal agents), and/or being subjects of moral evaluation (moral agents). These three capacities are sufficient, but not necessary for agency. It is possible to treat an AI robot as an agent, even if we reject the claim that this robot can be morally evaluated for their actions.

In some sense, this is a very contentious class. Some may bristle at organizations being considered agents (the same folks who object to corporations being considered persons in the US). Others may worry about whether a human being ceases to be an agent when they fall asleep, or enter a coma. And the already mentioned case of AI agents is sure to evoke strong response. As interesting as those disputes are, we can sidestep them here because of the primacy of contractual agreements and causal claims. Organizations can clearly enter into them, and human persons do not cease to be members of their ongoing contracts by merely falling asleep. Moreover, it is perfectly natural to say that the Exxon caused an oil spill or that the BLM movement has been incredibly influential in politics in 2020. It is an open question whether there are any circumstances where a living person may cease to be an agent. However, at this point, it seems unlikely that such a case will be fruitful to explore for the use of this ontology."""^^xsd:string ;
        olive:exampleSubclass olive:Organization , olive:Person ;
.

olive:Agreement	a owl:Class ;
	rdfs:label "agreement"^^xsd:string ;
	skos:prefLabel "agreement"@en ;
	skos:altLabel "deal"@en ;
	rdfs:comment "Each instance of this class is a commitment (content) mutally made by two or more agents. Agreements are normatively bindings for the agents involved. Notable subclasses include olive:Contract."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:subClassOf olive:Commitment ;
	rdfs:subClassOf [a owl:Restriction ;
			  owl:onProperty olive:creationTime ;
			  owl:someValuesFrom olive:TimeInstant ;];
	owl:equivalentClass  [ a owl:Class ;
			       owl:intersectionOf 
			       			  (olive:Commitment
								[a owl:Restriction ;
								owl:onProperty olive:bindingForAgent ;
								owl:minCardinality "2"^^xsd:integer ;]);];
	olive:formerName "gist:Agreement"^^xsd:string;
.

olive:AliveThing a owl:Class ;
	rdfs:label "alive thing"^^xsd:string ;
        skos:prefLabel "alive"@en ;
	rdfs:subClassOf olive:LivingThing ;
	rdfs:comment """olive:AliveThing is the class of all things that are alive, as long as they are members of this class. In contrast to olive:LivingThing, olive:AliveThing has members who need not timelessly be members. When Beethoven dies, he ceases to be an instance of olive:AliveThing and becomes an instance of olive:DeceasedThing."""^^xsd:string ;
        olive:exampleInstance "ex:CaseyHart (for now!)"^^xsd:string ;
	owl:disjointWith olive:DeceasedThing ;
.

olive:Allergy a owl:Class ;
	rdfs:label "allergy"^^xsd:string ;
        skos:prefLabel "allergy"@en ;
	rdfs:subClassOf olive:HealthCondition ;
	rdfs:comment """olive:Allergy is the class of all allergies. Instances will be allergies that particular persons have. So, :BillsPeanutAllergy is an instance of olive:Allergy, but :PeanutAllergy would not be (that would be the subclass of olive:Allergy that :BillsPeanutAllergy would be an instance of)."""^^xsd:string ;
        olive:exampleSubclass "ex:PeanutAllergy"^^xsd:string ;
        olive:exampleInstance "ex:FredsLatexAllergy"^^xsd:string ;
.

olive:AlzheimersDisease a owl:Class ;
 	rdfs:subClassOf olive:Disease ;
	rdfs:label "alzheimers disease"^^xsd:string ;
        skos:prefLabel "Alzheimer's Disease"@en ;
	rdfs:comment """olive:AlzheimersDisease is the class of all states in which someone has Alzheimer's disease."""^^xsd:string ;
.

olive:Attribute a owl:Class ;
	rdfs:label "attribute"^^xsd:string ;
	skos:prefLabel "attribute"@en ;
	skos:altLabel "property"@en, "characteristic"@en ;
	rdfs:comment """olive:Attribute is the class of all attributes, whether \"universal\"/\"repeatable\"/\"multiply-instantiable\" (e.g. redness, considered as a quality shared by all red things) or \"individual\"/\"particular\"/\"non-repeatable\" (e.g. the redness of my t-shirt, considered as an individual quality possessed - and, perhaps, possessable - only by my t-shirt, and which is exactly similar to yet distinct from, e.g., the redness of your t-shirt). An attribute can be thought of as an entity the existence of which depends on its being attributed to or instantiated in something (whether or not it is in fact so attributed or instantiated); \"quality\" is another way of characterizing such things, and one might further conceive of attributes/qualities as essentially being \"qualifiers\" of other things. For example, suppose my head has a mass of 8 lbs. The specific mass of my head - an instance of olive:Mass - is an attribute of my head: it is a characteristic of my head, and this mass doesn't exist outside of things that possess it (there are no \"free-floating\" masses).
	
	Attributes are most obviously contrasted with the things of which they are attributes: i.e. it is natural to contrast, e.g., my head's mass with my head, the former being an attribute and the latter being a non-attribute. It should be noted, though, that it is at least conceptually possible for attributes themselves to have attributes, so the fundamental contrast should be between things that can be attributed to other things (i.e. instances of olive:Attribute) and things that cannot be attributed to anything else in this way (i.e. non-attributes). Paradigmatic examples of the latter are physical objects.
	
	It is often simply a modeling choice whether to represent a feature of the world as an attribute or a non-attribute. For example, consider my blue shirt. How should we represent that this shirt is blue? One might simply make it an instance of the class olive:Blue, which would mean that olive:Blue is the class of blue things and consequently not an attribute.
	
	One could, alternatively, introduce a property - olive:hasColor, say - that relates an object to a color instance - i.e. its particular color - and make olive:Blue the class of all blue color instances. In this case, my shirt's blueness would be an instance of olive:Blue, but my shirt wouldn't be; we'd then relate my shirt to my shirt's blueness via olive:hasColor. This would be tantamount to making olive:Blue a subclass of olive:Attribute, and it might afford us the ability to represent certain facts (perhaps its color density) about my shirt's blueness as opposed to, say, the blueness of the pen I'm holding in way that we might be unable to if we were to simply model olive:Blue as the class of all blue things (of which my shirt is one).
	
	As a third alternative, we could make olive:Blue itself an instance of olive:Attribute (or one of its subclasses) and relate my shirt to olive:Blue directly via olive:hasColor - this would be tantamount to representing blueness itself as a \"universal\" attribute.
	
	In general, if a class is a class of things like my shirt, then it isn't a subclass of olive:Attribute. If, instead, it is a class of things more like the-blueness-of-my-shirt (and not \"blueness\" as it appears in my shirt, this pen, etc.), then it is a subclass of olive:Attribute. If, as a third alternative, something is represented as a \"universal\" quality (as when olive:Blue is treated as an individual instead of a class), it should be an instance of olive:Attribute rather than a subclass of it. In cases like this, it is often appropriate to ensure that such an attribute is an instance of olive:Category or one of its subclasses, since instances of olive:Category play the same basic ontological role of traditional \"universals\"."""^^xsd:string ;
		olive:exampleSubclass "olive:Magnitude"^^xsd:string ;
		olive:exampleInstance "ex:TheMassOfNicksHead"^^xsd:string ;
.

olive:API a owl:Class ;
        rdfs:subClassOf olive:SoftwareInterface ;
        rdfs:label "API"^^xsd:string;
        skos:prefLabel "API"@en ;
	skos:altLabel "application programming interface"@en ;
        rdfs:comment """An API is a computing interface that defines interactions betwen multiple software intermediaries."""^^xsd:string ;
.

olive:Appointment a owl:Class ;
	rdfs:label "appointment"^^xsd:string ;
        skos:prefLabel "appointment"@en ;
	rdfs:subClassOf olive:Agreement ;
	rdfs:comment """olive:Appointment is the class of agreements to meet, and thus the parties attending are committed to attend. Instances of this class are distinct from the actual events that fulfill (or fail to fullfill) the agreement - the appointment itself is the agreement that binds the interested parties, not the event that fulfills the agreement."""^^xsd:string ;
        olive:exampleInstance "ex:MyDoctorsAppointment";
.

olive:Area a owl:Class ;
	rdfs:label "area"^^xsd:string ;
	skos:prefLabel "area"@en ;
	skos:altLabel "planar region"@en ;
	rdfs:comment "A measurement of two-dimensional space."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:Magnitude
			[
				a owl:Restriction ;
				owl:onProperty olive:hasUoM ;
				owl:someValuesFrom olive:AreaUnit ;
			]
		) ;
	] ;
	olive:formerName "gist:Area"^^xsd:string;
.

olive:AreaUnit a owl:Class ;
	rdfs:label "area unit"^^xsd:string ;
	skos:prefLabel "area unit"@en ;
	rdfs:comment "A unit of two-dimensional area, such as square inches or hectares."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:ProductUnit
			[
				a owl:Restriction ;
				owl:onProperty olive:multiplicand ;
				owl:onClass olive:DistanceUnit ;
				owl:qualifiedCardinality "2"^^xsd:nonNegativeInteger ;
			]
		) ;
	] ;
	olive:formerName "gist:AreaUnit"^^xsd:string;
.

olive:Artifact a owl:Class ;
	rdfs:subClassOf owl:Thing ;
	rdfs:label "artifact"^^xsd:string ;
	skos:prefLabel "artifact"@en ;
	skos:altLabel "technology"@en ;
	rdfs:comment """olive:Artifact is the general class of person-made things, including both physical and intellectual artifacts. This includes simple tools and daily items like hammers, pots and pans, and pencils. It also includes large constructions like bridges and buildings. Intellectual artifacts include things like works of fiction, arguments (e.g. JJ Thomson's 'violinist argument'). See olive:Content for more discussion.

Some tempting non-examples include things like national parks. While such parks are dilineated by humans, and may include some artifacts (roads to the park, benches and buildings in it, etc.), almost all the terrain was not created by humans. Parts of mathematics might end up being in a grey area; some folks think that math is discovered, while others think it is created. In principle from this ontology's perspective, calling non-Euclidean geometry an artifact is acceptable. One should just be aware that making these claims is controversial in some circles.

Also, other humans are not artifacts, even though one can pretty convincingly argue that humans are intentionally created by other persons. It is unclear whether this distinction is really theoretically tenable, but it probably relies on some sort of widely held distinction between 'naturally occurring' and 'unnatural' things. A hammer is unnatural in some sense. But humans reproducing is natural. Or at least it seems this is the intution that underlies keeping humans out of the class of artifacts.

A slightly more careful explication of 'person-made' is required. If one is a theist, you might think that everything is made by a person, God, and as such it's perhaps better to think of artifacts as non-divine-person-made things. Morever, we may want to include more things than persons: corporate inventions or creations certainly seem like artifacts. They might also be thought of as made by individual persons, but perhaps better would be to fully expand the definition to include non-divine-agent-made things to include organizations and other actors."""^^xsd:string ;
        olive:exampleSubclass olive:Equipment, olive:Building, olive:Content ;
	olive:formerName "gist:Artifact"^^xsd:string;
.

olive:AssessingSomething a owl:Class ;
	rdfs:label "assessing something"^^xsd:string ;
        skos:prefLabel "assessing something"@en ;
	rdfs:subClassOf olive:Event ;
	rdfs:comment """olive:AssessingSomething is the class of all events in which something is assessed. A paradigm example might be assessing someone's risk of having a heart attack in the next 10 years. You should specify (if possible) the date of the assessment (see olive:creationTime), the assessor (see olive:authorOf), the thing assessed, and the result of the assessment."""^^xsd:string ;
        olive:exampleSubclass "ex:RiskAssessment"^^xsd:string;
.

olive:AssertibilityStatus a owl:Class ;
	rdfs:label "assertibility status"^^xsd:string ;
	skos:prefLabel "assertibility status"@en ;
	rdfs:subClassOf olive:Status ;
	rdfs:comment """olive:AssertibilityStatus is the class of all statuses concerning the conditions of assertibility associated with a given term. The paradigmatic instance of this class is olive:NotAssertible, which is used to indicate that a given term should not be used for making assertions. See olive:assertibility for the annotation property the range of which covers this class."""^^xsd:string ;
.

olive:AuditoryContentSource a owl:Class ;
	rdfs:label "auditory content source"^^xsd:string ;
        skos:prefLabel "auditory medium"@en ;
	skos:altLabel "audio"@en, "audio content"@en ;
	rdfs:subClassOf olive:ContentBearingThing ;
	rdfs:comment """olive:AuditoryContentSource is the class of all content bearing things that are accessed (at least partially) auditorially. This includes music albums, recorded speeches, podcasts, and such."""^^xsd:string ;
.

olive:Bank a owl:Class ;
        rdfs:subClassOf olive:Organization;
        rdfs:label "bank"^^xsd:string;
        skos:prefLabel "bank"@en ;
        rdfs:comment """This is the subclass of olive:Organization, instances of which are financial institutions that have accounts (see olive:BankAccount) for clients. Clients can place deposits at the bank, and the bank will hold the money and return interest to its customers, as well as provide loans and other financial services."""^^xsd:string ;
.

olive:BankAccount a owl:Class ;
        rdfs:subClassOf olive:Account ;
        rdfs:label "bank account"^^xsd:string;
        skos:prefLabel "bank account"@en ;
	owl:equivalentClass [owl:intersectionOf (
			    			 olive:Account
						 [a owl:Restriction ;
						  owl:onProperty olive:accountSeller ;
						  owl:someValuesFrom olive:Bank ; ])];
	rdfs:comment """An account where the olive:accountSeller is a bank (olive:Bank). Accounts have balances, account numbers, and so on."""^^xsd:string ;
.

olive:BaseUnit a owl:Class ;
	rdfs:subClassOf olive:SimpleUnit , olive:CoherentUnit ;
	rdfs:label "base unit"^^xsd:string ;
	skos:prefLabel "base unit"@en ;
	rdfs:comment """Base units are primitive unit that cannot be decomposed into other units. Moreover, these units are used as the 'standard' for their respective types of magnitudes (e.g. meter is the base unit for length). The previous statements are cashed out in making olive:BaseUnit a subclass of olive:CoherentUnit and olive:SimpleUnit.
It can be converted from one measurement system to another.  The base units in olive (following gist's example) are the seven primitive units from the System Internationale (SI): (meter, second, kilogram, ampere, kelvin, mole, candela)."""^^xsd:string ;
	olive:formerName "gist:BaseUnit"^^xsd:string;
.

olive:Book-Content a owl:Class ;
        rdfs:subClassOf olive:Content, olive:NonphysicalArtifact ;
        rdfs:label "book content"^^xsd:string;
        skos:prefLabel "book"^^xsd:string ;
        rdfs:comment """The class of all books considered as content: that is, each instance of this class is the content instantiated in or communicated by a \"concrete\" book (see olive:Book-Copy), whether a physical book or a virtual book. Thus, :MobyDick (considered as content) would be an instance of this class, whereas :MyCopyOfMobyDick would be an instance of olive:Book-Copy that instantiates :MobyDick."""^^xsd:string ;
.

olive:Book-Copy a owl:Class ;
        rdfs:subClassOf olive:ContentBearingThing ;
        rdfs:label "book content bearer"^^xsd:string;
        skos:prefLabel "book"^^xsd:string ;
        rdfs:comment """The class of all books, considered as things that communicate content. This includes both traditional physical books and e-books. Note that this is distinct from the class of all books considered as content (see olive:Book-Content), each instance of which is the content communicated by or instantiated in an instance of olive:Book-Copy."""^^xsd:string ;
.

olive:BotConfiguration a owl:Class ;
        rdfs:subClassOf olive:Content, olive:NonphysicalArtifact ;
        rdfs:label "bot configuration"^^xsd:string;
        skos:prefLabel "bot configuration"^^xsd:string ;
	skos:altLabel "bot file"^^xsd:string ;
        rdfs:comment """Bot configurations are instances of olive:Content that specify commands executable by a robot, particularly by an Olive bot (olive:OliveBot)."""^^xsd:string ;
.

olive:BotFileBlock a owl:Class ;
        rdfs:subClassOf olive:BotConfiguration ;
        rdfs:label "bot file block"^^xsd:string;
        skos:prefLabel "block"^^xsd:string ;
        rdfs:comment """Every bot file expresses content that can be subdivided into one or more blocks, each of which is an instance of this class, olive:BotFileBlock."""^^xsd:string ;
.

olive:BotRunningEvent a owl:Class ;
        rdfs:subClassOf olive:Invocation ;
        rdfs:label "bot running event"^^xsd:string;
        skos:prefLabel "bot running event"^^xsd:string ;
        rdfs:comment """Every instance of olive:BotRunningEvent consists of a bot (e.g. an olive:OliveBot) executing one or more program (e.g. an instance of olive:BotConfiguration)."""^^xsd:string ;
.

olive:Building a owl:Class ;
	rdfs:subClassOf	olive:PhysicalArtifact, olive:Place ;
	rdfs:label "building"^^xsd:string ;
	skos:prefLabel "building"@en ;
	rdfs:comment """A man-made structure for dwelling or working. This includes office buildings, houses, barns, sheds, and so on. Edge cases would be things like treehouses, which may or may not qualify depending on permanence and nature of construction."""^^xsd:string ;
	olive:formerName "gist:Building"^^xsd:string;
.

olive:BuildingAddress
	a owl:Class ;
	rdfs:subClassOf	olive:PhysicalAddress ;
	rdfs:label "building address"^^xsd:string ;
	skos:prefLabel "address"@en ;
	rdfs:comment "An address to which you can send mail, or that you could find in the physical world."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:BuildingAddress"^^xsd:string;
	.

olive:BusinessPartnership a owl:Class ;
    rdfs:subClassOf olive:Relationship-Contractual, olive:Partnership, olive:BusinessRelationship ;
    rdfs:label "business partnership"^^xsd:string;
    skos:prefLabel "business partnership"^^xsd:string ;
    rdfs:comment """This is the class of business partnerships, which are contractual partnerships between agents for the purpose of carrying on business."""^^xsd:string ;
    owl:equivalentClass [a owl:Class ;
        owl:intersectionOf (olive:BusinessRelationship olive:Partnership olive:Relationship-Contractual)] ;
.

olive:BusinessRelationship a owl:Class ;
    rdfs:subClassOf olive:Relationship ;
    rdfs:label "business relationship"^^xsd:string;
    skos:prefLabel "business relationship"^^xsd:string ;
    rdfs:comment """This is the class of business relationships, which are relationships between agents for the purpose of carrying on business. Such relationships need not be, but often are, contractual in nature (see olive:Relationship-Contractual)."""^^xsd:string ;
.

olive:BuyingAndSelling a owl:Class ;
	rdfs:subClassOf olive:Transaction ;
	rdfs:label "buying and selling" ;
	skos:prefLabel "buying and selling"@en ;
	skos:altLabel "buying"@en , "selling"@en , "trading"@en ;
	rdfs:comment """This is the class of of simple buying-and-selling transactions. Instances of this are events in which (1) there are two exchanges of ownership (one from buyer to seller - usually ownership of money - and one from seller to buyer), and (2) the objects of ownership are actually transferred between the agents making the exchange. Thus, in every instance of this class, the buyer transfers to the seller both whatever it is that they have used to make the purchase as well as the right of ownership of that thing, and mutatis mutandis for the seller.

	Note that instances of this class may have a temporal extent that spans more than just an instantaneous (or semi-instantaneous) exchange (as when someone purchases an item in a store and pays cash). For example, an online purchase that involves a physical transfer of the focal item that takes a period of days can still be an instance of this class, but it may require a more complicated representation (particularly as regards its subevents) than a simpler transaction would. Likewise, for instances of this class that involve subevents that occur over an extended period of time (as with the aforementioned online purchase or a purchase that involves multiple payments), there should usually be associated contractual relationships (see, e.g., olive:Contract and olive:Account, on the one hand, and olive:BusinessRelationship and olive:Relationship-Contractual, on the other) that provide norms for how those subevents should occur.

	Note also that there may be complex cases, such as buying a house, in which subevents and subsequent events (e.g. making mortgage payments to a lender) may be required in order to fully represent what is happening. However, one can still use an instance of BuyingAndSelling in such a case to represent the \"top-level\" exchange between the buyer and the seller.

	The notion of \"ownership\" used above may be conceived of as including rights to a one-off performance of an service (as when one purchases a car wash) but not arrangements of ongoing use (e.g. leasing an apartment, signing up for a content-streaming service) or for recurring services (e.g. making arrangements for quarterly pest control service). For these latter sorts of arrangements, one should prefer to model the governing agreement and the situation(s) it governs (e.g. the use of the relevant thing - see olive:UsingSomething - or the type of service to be performed, and the (type of) payment for it - see olive:PayingForSomething - including frequency), perhaps along with the initial event in which the agreement was generated. Borderline cases are signing up for a \"X-of-the-month-club\", where, say, a product is sent to you every month in exchange for a monthly (or even one-time payment). These sorts of cases are probably best modeled along the lines of recurring services, although there may be cases in which it is more desirable to model them as instances of olive:BuyingAndSelling (with an associated contract and most likely a complex network of subevents).""" ;
	rdfs:seeAlso olive:situationHasAssociatedMonetaryValue, olive:TransferEvent, olive:PayingForSomething ;
.

olive:CARC a owl:Class ;
        rdfs:subClassOf olive:InsuranceClaimType ;
        rdfs:label "CARC"^^xsd:string;
        skos:prefLabel "CARC"@en ;
        skos:altLabel "claim adjustment reason code"@en ;
        rdfs:comment """These codes describe why a claim or service line was paid differently than it was billed. 

Each instance should be named olive:CARC-##. So the CARC code 15 is olive:CARC-15."""^^xsd:string ;
.

olive:Category a owl:Class ;
	rdfs:subClassOf olive:Attribute ;
	rdfs:label "category"^^xsd:string ;
	skos:prefLabel "category"@en ;
	skos:altLabel "universal"@en ;
	rdfs:comment """olive:Category may be the single most-confusing class in the upper ontology for ontology laypersons. It is incredibly useful, but is necessary in part due to limitations on contingent facts about how triple-store ontologies work.

Instances of olive:Category are ontological features that are class-like insofar as they can apply to multiple things, but they are represented in the ontology as individuals; one might usefully think of instances of olive:Category as labels. Suppose we are looking at a bunch of contracts somewhere in the sales pipeline. We might want to categorize some of these contracts as 'prospective', some as 'unlikely', and some as 'imminent'. In that case, we should create a specific subclass of olive:Category, say, ex:ContractStatus. Then we can create an individual status ex:ProspectiveContract, and we can then associate it with our particular contract, e.g. (:Contract_1 olive:categorizedBy ex:ProspectiveContract). For the philosophically inclined, instance of olive:Category play essentially the same ontological role as traditional philosophical \"universals\" do. (See also the comment on olive:Attribute for some related discussion.)

(note: the following is more technical and only of interest to ontologists)

You might be puzzled as to why we'd create categories for contracts when there's already a class: olive:Contract. Why not just create subclasses of olive:Contract? In this case, there might be no substantive reason. But in general, the need for categories stems from the limitation of owl that precludes a class from being the object of a triple (with a few exceptions).

Suppose I want to say that some robot is used for security authentication. This relates our robot to a capability of performing some type of action, not performing some particular action. But we're not saying that this robot is an instance of a class, but rather capable of performing instances of some class. One way to accomplish this is via 'punning', whereby we create both the class, ex:SecurityAuthentication, and an individual, ex:SecurityAuthentication. They have the same name (thus, 'punning'), but they are two separate resources. This turns out to be a very unsatisfactory solution. Categories present an alternative: create an individual ex:SecurityAuthentication, which is a olive:Category. This is also not a perfect solution, but sometimes you're left to do unsatisfactory things to work around system limitations.

The other reason that olive:Category has been used historically is to shove complexity into the 'C-Box'. In short, Semantic Arts (the creators of gist) prioritize simplicity in the upper ontology. To them, simplicity means having a small total number of terms in the upper ontology, certainly not more than 150 or so if you add up all the classes, properties, and individuals. But they know that users will have some expansive taxonomies, such as all of the prescription drugs being insured, or ICD-10 codes, etc. Rather than adding these things to the ontology at large, which would greatly increase the number of terms, Semantic Arts favor putting these structures under olive:Category--in the C-Box.

For what it's worth, I find this second justification very unconvincing. If the world that we are modeling is complex, then so be it. It doesn't make the subject matter any less complex or more understandable to sweep it under the C-Box rug. Instead, we should be careful to create detailed comments, properly next our ontology, and write documentation or lexical information that will make the ontology as intuitive as possible for users."""^^xsd:string ;
        olive:exampleSubclass olive:ProductCategory , olive:Status ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:Category"^^xsd:string;
.

olive:Cell-Data a owl:Class ;
        rdfs:subClassOf olive:Section ;
        rdfs:label "data cell"^^xsd:string;
        skos:prefLabel "cell"^^xsd:string ;
        rdfs:comment """Each instance of olive:Cell-Data is the content expressed by an element in a table (see olive:Table-Data). These cells will be members of exactly one row (see olive:Row-Data) and one column (see olive:Field-Data), so the intersection of any row and column of a table to produce a unique cell.

Not to be confused with biological cells, or with cellphone data (though you could store such data in a relational database, and thus in data cells)."""^^xsd:string ;
.

olive:Certification a owl:Class ;
        rdfs:subClassOf olive:Content, olive:NonphysicalArtifact ;
        rdfs:label "certification"^^xsd:string;
        skos:prefLabel "certification"@en ;
	skos:altLabel "accreditation"@en ;
        rdfs:comment """This the is the class of all certifications, considered as content (rather than as objects that communicate the certification). Certifications attest to someone or something satisfying requirements. Certifications may be instantiated by (see olive:instantiates) things such as a physical diploma, e-certificate, etc. This includes academic degrees, CPR certifications, or EHR's meaningful use stages."""^^xsd:string ;
        olive:exampleSubclass olive:Degree, olive:MeaningfulUseCertification ;
.

olive:ChangeEvent a owl:Class ;
	rdfs:label "change event"^^xsd:string ;
        skos:prefLabel "change event"@en ;
	rdfs:subClassOf olive:Event ;
	rdfs:comment """olive:ChangeEvent is the class of all events in which some primary object (see olive:changedThing) is altered. This includes haircuts, refinancing, painting a wall, or cooking an egg.

It can be difficult to pick out the subject of change. Take a haircut, for example. Clearly something is changed here, but is it my hair, or is it me? This is really a question of granularity. Even among my hairs, it's not *all* of them that are changed, but rather some subset, and only parts of those hairs are changed (the roots may be entirely unchange, for instance).

The key point here is that it is very easy to get lost in the details of whether something is a change event, and in particular what thing is changed during that event. If one is quibbling over these details, the battle is already lost. Use this class in an simple way, and create subclasses if you want to split hairs about the nature of the subject and such.

Note: just like every other event, one should specify when it happened using olive:timeOfEvent or its subproperties. It's worth noting that the most recent change event will give us the olive:lastModifiedOn time for the subject of the change event."""^^xsd:string ;
        olive:exampleSubclass "ex:Haircut"^^xsd:string ;
        olive:exampleInstance "ex:RoastingLastNightsBrisket"^^xsd:string ;
.

olive:ChargeCaptureCoding a owl:Class ;
        rdfs:subClassOf olive:Event ;
        rdfs:label "charge capture coding"^^xsd:string;
        skos:prefLabel "charge capture coding"^^xsd:string ;
        rdfs:comment """This is the fourth subevent of the revenue cycle. Once it has been verified that the appropriate treatment has been given, the process of charge capture takes place. A claim is sent to the insurance company for provider payment."""^^xsd:string ;
	rdfs:subClassOf [ rdf:type owl:Restriction ;
			  owl:onProperty olive:precedes ;
			  owl:someValuesFrom olive:ClaimSubmission
			] ;
.

olive:Check a owl:Class ;
        rdfs:subClassOf olive:ContentBearingThing ;
        rdfs:label "check"^^xsd:string;
        skos:prefLabel "check"@en ;
        rdfs:comment """Checks are written, dated, and signed instruments that instruct a bank to pay a specific sum of money to the recipient of the check. Checks express (see olive:instantiates) instructions and obligations (see olive:Obligation).

This class includes both physical and electronic checks, once those checks are filled out. Prior to being filled out, the papers in a checkbook are merely templates on which a check may be made manifest."""^^xsd:string ;
.

olive:Citation a owl:Class ;
        rdfs:subClassOf olive:Content, olive:NonphysicalArtifact ;
        rdfs:label "citation"^^xsd:string;
        skos:prefLabel "citation"@en ;
	skos:altLabel "reference"@en ;
        rdfs:comment """A citation is a piece of content that references another piece of content. Each citation should be related to the content that contains it as well as the content that is being referenced. When applicable, the format of the citation may need to be specified (e.g. MLA versus APA references)."""^^xsd:string ;
.

olive:City a owl:Class ;
        rdfs:subClassOf olive:Region;
        rdfs:label "city"^^xsd:string;
        skos:prefLabel "city"^^xsd:string ;
        rdfs:comment """olive:City is the class of all geographical regions that are part of some city. Note that this is different from the city government or the population of the city.

Here we use the term 'city' to refer loosely to apply to all settlement land areas. So, towns and other 'small' cities also count as cities. If classes are needed to highlight size disparities, other vocabulary should be used."""^^xsd:string ;
.

olive:ClaimProcessing a owl:Class ;
        rdfs:subClassOf olive:Event ;
        rdfs:label "claim processing"^^xsd:string;
        skos:prefLabel "remittance processing and rejection"^^xsd:string ;
        rdfs:comment """This is the sixth subevent of the revenue cycle. During claim processing, the filed insurance claim can be paid in full, partially, or rejected."""^^xsd:string ;
	rdfs:subClassOf [ rdf:type owl:Restriction ;
			  owl:onProperty olive:precedes ;
			  owl:someValuesFrom olive:PaymentPostingAppealsAndCollections
			] ;
.

olive:ClaimStatus a owl:Class ;
	rdfs:label "claim status"^^xsd:string ;
        skos:prefLabel "insurance claim status"@en ;
	rdfs:subClassOf olive:Status ;
	rdfs:comment """olive:ClaimStatus is the class of all statuses that apply to insurance claims (see olive:InsuranceClaim)."""^^xsd:string ;
        olive:exampleInstance "olive:PaidClaim"^^xsd:string ;
	rdfs:seeAlso "https://web.archive.org/web/20200111083618/http://ecomgx17.ecomtoday.com/edi/EDI_4010/el1029.htm"^^xsd:string ;
.

olive:ClaimSubmission a owl:Class ;
        rdfs:subClassOf olive:CommunicationEvent ;
        rdfs:label "claim submission"^^xsd:string;
        skos:prefLabel "insurance claim submission"^^xsd:string ;
        rdfs:comment """This is the fifth subevent of the revenue cycle. This is simply the handoff of the insurance claim from the provider to the payer."""^^xsd:string ;
	owl:equivalentClass [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
	                                             owl:onProperty olive:conveysTo ;
						     owl:someValuesFrom olive:InsuranceCompany
						   ]
						   [ rdf:type owl:Restriction ;
	                                             owl:onProperty olive:conveysFrom ;
						     owl:someValuesFrom olive:MedicalCareProvider
						   ]
						   [ rdf:type owl:Restriction ;
	                                             owl:onProperty olive:communicatedContent ;
						     owl:someValuesFrom olive:InsuranceClaim
						   ]
						   )] ;
	rdfs:subClassOf [ rdf:type owl:Restriction ;
			  owl:onProperty olive:precedes ;
			  owl:someValuesFrom olive:ClaimProcessing
			] ;
.

olive:Class-HigherOrder a owl:Class ;
	rdfs:label "higher order class"^^xsd:string ;
	skos:prefLabel "higher-order class"@en ;
	rdfs:comment """The class of all classes that (can) have classes as instances. This includes mixed classes (which could have individuals and classes as instances), if such there be. The primary motivation for introducing this class into the ontology is to allow for integration with other ontologies that make use of higher-order classes. In general, if you are trying to represent something using the Olive ontology alone, you should do so using first-order classes only. You should also try to use subclasses of this class where appropriate (e.g. olive:Class-SecondOrder for classes that can have only first-order classes as instances). An instance of a higher order class should be related to it via olive:instanceOf and not rdfs:type (which can only relate an individual to a class)."""^^xsd:string ;
.

olive:Class-SecondOrder a owl:Class ;
	rdfs:subClassOf olive:Class-HigherOrder ;
	owl:disjointWith olive:Class-ThirdOrder ;
	rdfs:label "second order class"^^xsd:string ;
	skos:prefLabel "second-order class"@en ;
	rdfs:comment """The class of all classes that can have only first-order classes as instances. For example, suppose that each type of occupation is represented as a class of individuals (i.e. a first-order class), such that, e.g., olive:Doctor is the class of all individual doctors. One might then conceive of the class of all occupation types as a second-order class containing all of these first-order classes as instances."""^^xsd:string ;
.

olive:Class-ThirdOrder a owl:Class ;
	rdfs:subClassOf olive:Class-HigherOrder ;
	rdfs:label "third order class"^^xsd:string ;
	skos:prefLabel "third-order class"@en ;
	rdfs:comment """The class of all classes that can have only second-order classes as instances. For example, suppose that each type of occupation is represented as a class of individuals (i.e. a first-order class), such that, e.g., olive:Doctor is the class of all individual doctors. Suppose further that olive:PersonTypeByOccupation is the (second-order) class of all of the aforementioned classes. One could then conceive of a class of all of the second-order classes that facet the class of olive:Person in topical ways: instances of olive:PersonTypeByOccupation facet olive:Person into subclasses based on occupation, whereas something like olive:PersonTypeByExpressedGender might facet olive:Person into subclasses based on expressed gender. Such a class of all these second-order classes - for the sake of the example, call it olive:TypeOfPersonType - would be a third-order class."""^^xsd:string ;
.

olive:ClientStatus a owl:Class ;
        rdfs:subClassOf olive:Status ;
        rdfs:label "client status"^^xsd:string;
        skos:prefLabel "client status"@en ;
        rdfs:comment """This subclass of olive:Category has instances that tag (potential) clients by their relationship to whoever has (or aspires to have) them as clients. For example, you might classify an organization/person as a customer, in negotiations, or signed with a competitor. We can use this information to assign levels of priority to associated accounts."""^^xsd:string ;
.

olive:CodeOfConduct a owl:Class ;
	rdfs:label "code of conduct"^^xsd:string ;
        skos:prefLabel "code of conduct"@en ;
	rdfs:subClassOf olive:Commitment ;
	rdfs:comment """olive:CodeOfConduct is the class of all commitments that provide a template or specification for action. Paradigm examples include sets of rules for games, constitutions for governments, and diet plans. For each of these codes, one can somehow opt in or commit to the code, which would make it normatively binding. So, for example, I could commit to adhering to a vegan diet, in which case I would be committing to refraining from eating steak (among other things)."""^^xsd:string ;
.

olive:CoherentProductUnit
	a owl:Class ;
	rdfs:subClassOf olive:ProductUnit, olive:CoherentUnit ;
	rdfs:label "coherent product unit"^^xsd:string ;
	skos:prefLabel "coherent product unit"@en ;
	rdfs:comment "A ratio unit whose numerator and denominator reduce to 1"^^xsd:string ;
	olive:formerName "gist:CoherentProductUnit"^^xsd:string;
	.

olive:CoherentRatioUnit
	a owl:Class ;
	rdfs:label "coherent ratio unit"^^xsd:string ;
	skos:prefLabel "coherent ratio unit"@en ;
	rdfs:comment "A ratio unit whose numerator and denominator reduce to 1"^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:RatioUnit
			[
				a owl:Restriction ;
				owl:onProperty olive:denominator ;
				owl:allValuesFrom [
					a owl:Class ;
					owl:unionOf (
						olive:BaseUnit
						olive:CoherentProductUnit
						olive:CoherentRatioUnit
					) ;
				] ;
			]
			[
				a owl:Restriction ;
				owl:onProperty olive:numerator ;
				owl:allValuesFrom [
					a owl:Class ;
					owl:unionOf (
						olive:BaseUnit
						olive:CoherentProductUnit
						olive:CoherentRatioUnit
					) ;
				] ;
			]
		) ;
	] ;
	olive:formerName "gist:CoherentRatioUnit"^^xsd:string;
.

olive:CoherentUnit a owl:Class ;
	rdfs:label "coherent unit"^^xsd:string ;
	skos:prefLabel "coherent unit"@en ;
	rdfs:subClassOf olive:UnitOfMeasure ;
	rdfs:comment """A coherent unit is essentially a ‘default unit’ for a given subclass of olive:Magnitude. So for mass, we use kg--every other mass unit must have a conversion to kilograms. For velocity, we use m/s. The choice of which unit is the coherent unit is purely a convention, though we try to base that convention on common use outside of ontology so that it will feel natural. There’s no real problem if we made mass be built around the lb, or the g, rather than kg. But once it’s fixed, you enter all other units for a given type of magnitude (e.g. mass, brightness, area) as needing to be converted to that unit.

Base units are coherent units that are also simple units."""^^xsd:string ;
        olive:exampleSubclass olive:BaseUnit ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:unionOf (
			olive:BaseUnit
			olive:CoherentProductUnit
			olive:CoherentRatioUnit
		) ;
	] ;
	olive:formerName "gist:CoherentUnit"^^xsd:string;
.

olive:Cohort a owl:Class ;
	rdfs:label "cohort"^^xsd:string ;
        skos:prefLabel "cohort"@en ;
	olive:instanceOf olive:Class-SecondOrder ;
	rdfs:subClassOf olive:Facet ;
	rdfs:comment """olive:Cohort is the class of all cohorts, which are classes of individuals that share some common set of traits. Cohorts are useful for using in studies or clinical trials. A cohort holds fixed the common traits so that you can test the effect that some other intervention has (or had) on some outcome.

Subclasses of olive:Cohort will be distinguished by the type of instances their instances have (e.g. olive:PatientCohort is such that every instance cohort is a subclass of olive:Patient)."""^^xsd:string ;
        olive:exampleSubclass olive:PatientCohort, olive:MedicalCareEventCohort ;
.

olive:Collection a owl:Class ;
	rdfs:subClassOf [a owl:Restriction ;
			owl:onProperty olive:hasMember ;
			owl:someValuesFrom owl:Thing ; ] ;
	rdfs:label "collection"^^xsd:string ;
	skos:prefLabel "collection"@en ;
	rdfs:comment """This is the class of all collections of individual things. All of the pets that I own form a collection, as does my stamp collection, or all of the prime numbers less than 1200. Collections are very analogous to sets: they are defined by their members.

Classes and collections are very similar. An individual may be an instance of a class (rdfs:type) or a member of a group (olive:memberOf). Some ontologies, such as the one developed at Cycorp, use collections instead of classes. At bottom, there is not a huge difference. However, it is best to think of classes as intensional, whereas collections are extensional. That is, a class is defined by the rules and/or characteristics for determining membership. A collection, on the other hand, is defined purely by which members are in it. For this reason, you might distinguish the class of renates (things with a kidney) from the class of cardiates (things with a heart), even if it turned out that every renate was a cardiate and vice-versa. If the collection of things with hearts turned out to have exactly the same members as the collection of things with kidneys, there would be only one collection.

Collections should be typically used for relatively small and contingent smatterings of individuals. For example, a jury or other group of people is a good candidate. Or, the collection of hospitals that are 'in network' for a given insurance provider would also be a good candidate. But when in doubt, a class is probably a safer route than a collection."""^^xsd:string ;
        olive:exampleSubclass olive:Group ;
	olive:formerName "gist:Collection"^^xsd:string ;
	olive:exampleInstance "ex:SomeJury"^^xsd:string ;
.

olive:Commitment
	a owl:Class ;
	rdfs:label "commitment"^^xsd:string ;
	skos:prefLabel "commitment"@en ;
	rdfs:subClassOf olive:Requirement ;
	rdfs:comment """olive:Commitment is the class of all content that is (potentially) normatively binding. Examples include laws, contracts, codes of conduct, and moral principles. Notice that these only need to be potentially binding; the fact that some law exists in Brazil does not automatically mean that the I am subject to the law. Commands like 'Open the door.' are still instances of gist:Commmitment, even if no person is responsible for satisfying that command. The important part is that instances of olive:Commitment are the sorts of things that can be satisfied, violated, or avoided.

Commitments are not identical to the documents that make clear the commitment. That is, when I participate in a contract, the piece of paper on which the contract is written is not the thing that I'm bound to. My signing that piece of paper may have triggerd the commitment, but the paper is not itself the commitment.

While I've stressed that even 'potentially' normatively binding things are commitments, in practice we tend to care about the ones that are *actually* binding. We care about the laws that someone is subject to, or the contracts they have signed, or morality (which is not the sort of thing that one can opt out of). So, any time a particular commitment is represented, one should also make clear who this commitment applies to."""^^xsd:string ;
        olive:exampleSubclass olive:Agreement, olive:Obligation ;
	olive:formerName "gist:Commitment"^^xsd:string;
.

olive:CommitmentCategory a owl:Class ;
	rdfs:label "commitment category"^^xsd:string ;
        skos:prefLabel "commitment category"@en ;
	rdfs:subClassOf olive:Category ;
	rdfs:comment """olive:CommitmentCategory is the class of all statuses that a commitment might have. There are three standards from the imperative logic literature: satisfied, violated, and avoided. However, additional categories also make sense, such as being in progress.

Colloquially you can think of the instances here as answers you could give to a manager/spouse/yourself in regards to some task or obligation you have. You might have completed it (satisfied), failed at it (violated), or rendered it irrelevant (avoided). You should be able to construct a similar response for every instance of this category."""^^xsd:string ;
        olive:exampleSubclass "";
        olive:exampleInstance "";
.

olive:CommunicationEvent a owl:Class ;
	rdfs:label "communication event"^^xsd:string ;
        skos:prefLabel "communication event"@en ;
	rdfs:subClassOf olive:Event ;
	rdfs:comment """CommunicationEvent is the class of all events in which communication takes place. This includes placing a request, having a conversation, interacting with sales representatives, and so on."""^^xsd:string ;
	olive:exampleSubclass olive:RequestingSomething ;
	owl:equivalentClass [a owl:Restriction ;
			     owl:onProperty olive:communicatedContent ;
			     owl:someValuesFrom olive:Content ;] ;
.

olive:Comparison a owl:Class ;
        rdfs:subClassOf olive:Content, olive:NonphysicalArtifact ;
        rdfs:label "comparison"^^xsd:string;
        skos:prefLabel "comparison"@en ;
        rdfs:comment """Every instance of olive:Comparison is a piece of content in which at least two things are compared (see olive:comparedThing). This comparison may be used as the basis for making decisions, such as recommending a movie based on its being similar to another movie a coworker enjoys.

Every comparison must specify the things compared, but we should usually also specify the degree of similarity using olive:hasAmount or some subproperty (or olive:quantitativeStrength). Absent an assertion of the strength of the simlarity, we assume at least weak similarity.

Despite this default assumption, a comparison can also state that two or more things are very different. For example, a comparison with a olive:quantitativeStrength of 0 might mean that they have nothing in common.

You might create or use a subclass of olive:Comparison to hold fixed something about the comparison, such as the types of objects being compared, or the number of objects being compared."""^^xsd:string ;
.

olive:Competition a owl:Class ;
	rdfs:label "competition"^^xsd:string ;
        skos:prefLabel "competition"@en ;
	rdfs:subClassOf olive:Event ;
	olive:instanceOf olive:HumanActivityType ;
	rdfs:comment """olive:Competition is the class of all human activities where an agent tries to best another agent or some benchmark. Examples include instances of olive:Game, like cribbage, or instances of olive:Sport, like football. While competitions typically involve multiple agents, this class also includes events in which an agent is competing against themselves or some benchmark. For example, trying to free solo a particular mountain peak can still be classified as a competitive feat. Other more recreational activities like hiking would qualify as physical activities, but not competitions."""^^xsd:string ;
        olive:exampleInstance "Cribbage", "Football" ;
.

olive:ConfusedState a owl:Class ;
	rdfs:label "confused state"^^xsd:string ;
        skos:prefLabel "confused state"@en ;
	rdfs:subClassOf olive:MentalState ;
	rdfs:comment """olive:ConfusedState is the class of all states of confusion. Persons in such a state will have trouble focusing and forming veridical judgments."""^^xsd:string ;
.

olive:ConsignmentUseOfSomething a owl:Class ;
	rdfs:subClassOf olive:UsingSomething ;
	rdfs:label "consignment use of something" ;
	skos:prefLabel "consignment use of something"@en ;
	skos:altLabel "using something on consignment"@en ;
	rdfs:comment """olive:ConsignmentUseOfSomething is the class of all events in which an agent allows for the use of something by another agent with the understanding that the former will be reimbursed by the latter based on the fact of use. A common example of this is an agent creating goods that are then sold on consigment by another agent, so that the latter reimburses the former after the fact of the sale. (In this sort of example, one could model the focal event as an instance of both olive:ConsignmentUseOfSomething and olive:BuyingAndSelling).

	Another sort of example is the consignment use of medical supplies, such that the vendor of a given medical supply is only reimbursed for the use of that supply after it is used.

	One important use of this class is in modeling instances of olive:Agreement (or olive:Contract) in which one party allows another party to use something on consignment.""" ;
.

olive:ContactAddressType a owl:Class ;
	rdfs:label "contact address type"^^xsd:string ;
        skos:prefLabel "type of contact information"@en ;
	rdfs:subClassOf olive:Category ;
	rdfs:comment """olive:ContactAddressType is the class of all tags that identify what kind of address a thing is. For example, I may give you (253)432-0295 as my contact information; we know by the format that this is a phone number. I might also give you a @CoolOntologist83, which is more likely a Twitter handle.

This category was created with the intention of making it easier to map to fhir contact types. However, this will also be suseful for connecting to other source systems in the future.

That said, remember that categories are often very thin. If possible, and if it becomes robust enough, make sure to connect instances here with subclass of olive:Address or other classes."""^^xsd:string ;
        olive:exampleInstance ""^^xsd:string ;
.

olive:Container a owl:Class ;
	rdfs:subClassOf olive:PhysicalObject ;
	rdfs:label "container"^^xsd:string ;
	skos:prefLabel "container"@en ;
	skos:altLabel "bounded space"@en , "bounded spatial object"@en ;
	rdfs:comment """Instances of olive:Container are three-dimensional physical objects that are primarily composed of bounded space, so that they are natural thought as being focally constituted by spatial regions. Holes and rooms are a paradigmatic examples: these are physical objects (since they are countable and spatially located) that are focally constituted by a bounded spatial region. Non-examples include atoms: even though, technically, most of an atom is empty space, it is not focally constituted by that space. This class should be conceived of loosely enough that the (typically material) border regions of such an object (e.g. the region of dirt surrounding a hole in the ground) can be considered to be part of the object itself, depending on one's modeling purposes."""^^xsd:string ;
	olive:exampleSubclass "olive:Room" ;
.

olive:Content a owl:Class ;
		rdfs:subClassOf olive:NonphysicalThing ;
        rdfs:label "content"^^xsd:string;
        skos:prefLabel "content"@en ;
	skos:altLabel "information"@en ;
        rdfs:comment """This is the class of all content/information. Content, on the current conception, is (1) nonphysical (see olive:NonphysicalThing), and (2) possibly but not necessarily artifactual (see olive:Artifact for the relevant, orthogonal class). Content is to be distinguished, fundamentally, from that which bears it (see olive:ContentBearingThing). The classic distinction is between a book's physical copies and the book considered as content. The book considered as content is an instance of olive:Content, whereas a physical copy of the book (or a stone-etched copy, or an audiobook, etc.) would be an instance of olive:ContentBearingThing, since it bears the content.

Instances of olive:ContentBearingThing stand in the relation olive:instantiates to the instance of olive:Content that they bear. For example, (:MyCopyOfMobyDick olive:instantiates :MobyDick) .

Virtual things that contain content - e.g. databases, websites - are likewise instances of olive:ContentBearingThing, but they are also instances of olive:VirtualThing (and are thus nonphysical content bearers)."""^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
       olive:exampleSubclass olive:Book-Content ;
.

olive:ContentBearingThing a owl:Class ;
        rdfs:subClassOf olive:Artifact ;
        rdfs:label "content bearing thing"^^xsd:string;
	skos:altLabel "materialized content"@en, "realized content"@en, "physical content"@en, "concrete content"@en ;
        skos:prefLabel "content bearing thing"@en ;
        rdfs:comment """A content bearing thing is a concrete thing that bears, instantiates, or otherwise communicates content (see olive:Content). The classic example is a physical copy of a book making manifest the nonphysical story. For example, (:CatcherInTheRye a olive:Content), whereas (:MyCopyOfCatcherInTheRye a olive:ContentBearingThing).

Notice that this class includes virtual content bearing things. This is because websites and databases, while not (obviously) physical, are indeed realized somewhere. I can distinguish the content of a website for matching lizard owners with the best terrarium for them from the (virtually!) concretized website that commmunicates that content."""^^xsd:string ;
        olive:exampleTriple ":MyCopyOfCatcherInTheRye a olive:ContentBearingThing"^^xsd:string ;
        olive:exampleSubclass olive:Book-Concrete, olive:Database ;
.

olive:ContentUseType a owl:Class ;
	rdfs:label "content use type"^^xsd:string ;
        skos:prefLabel "content use type"@en ;
	rdfs:subClassOf olive:UseType ;
	rdfs:comment """olive:ContentUseType is the class of all """^^xsd:string ;
        olive:exampleSubclass "";
        olive:exampleInstance "";
.

olive:Continent a owl:Class ;
        rdfs:subClassOf olive:Region;
        rdfs:label "continent"^^xsd:string;
        skos:prefLabel "continent"^^xsd:string ;
        rdfs:comment """A main continuous landmass on a planet. There are seven on Earth: Africa, Antarctica, Asia, Australia, Europe, North America, and South America."""^^xsd:string ;
.

olive:Contract
	a owl:Class ;
	rdfs:label "contract"^^xsd:string ;
	skos:prefLabel "contract"@en ;
	skos:altLabel "deal"@en ;
	rdfs:comment "Every instance of olive:Contract is a legally binding agreement - that is, instances of olive:Contract are the contents of agreements the binding power of which issues at least in part from their enforceability by a legal or government organization."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:Agreement
			[
				a owl:Restriction ;
				owl:onProperty [owl:inverseOf olive:governs] ;
				owl:someValuesFrom olive:GovernmentOrganization ;
			]
		) ;
	] ;
	olive:formerName "gist:Contract"^^xsd:string;
.

olive:Constraint a owl:Class ;
	rdfs:subClassOf olive:Content ;
	rdfs:label "constraint"^^xsd:string ;
	skos:prefLabel "constraint"@en ;
	skos:altLabel "restriction"@en, "specification"@en, "standard"@en ;
	rdfs:comment "This is the subclass of olive:Content each instance of which is a constraining standard applicable to other pieces of content, actions, etc. Instances of this class specify constraints on the things to which they apply by specifying how things can or ought to be. Thus, standards may constitute descriptive/logical or normative constraints: clear examples of the former are data models (see olive:DataModel), which constrain how things can be represented, as a matter of fact, and other \"structural\" specifications; clear examples of the latter are codes of conduct."^^xsd:string ;
	olive:formerName "gist:Restriction"^^xsd:string;
.

olive:ControlledVocabulary a owl:Class ;
	rdfs:label "controlled vocabulary"^^xsd:string ;
	skos:prefLabel "vocabulary"@en ;
	rdfs:comment "A collection of terms approved and managed by some organization or person."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:Collection
			[
				a owl:Restriction ;
				owl:onProperty [owl:inverseOf olive:governs] ;
				owl:someValuesFrom olive:Agent ;
			]
			[
				a owl:Restriction ;
				owl:onProperty olive:hasMember ;
				owl:someValuesFrom olive:Category ;
			]
		) ;
	] ;
	olive:formerName "gist:ControlledVocabulary"^^xsd:string;
	.

olive:CostSpecification a owl:Class ;
	rdfs:subClassOf olive:Commitment ;
	rdfs:label "cost specification" ;
	skos:prefLabel "cost specification"@en ;
	rdfs:comment """Instances of olive:CostSpecification are commitments (see olive:Commitment) on behalf of a seller to sell some product. As with other commitments, use olive:bindingForAgent to relate instances to the relevant seller and olive:requires to relate instances to a representation of the type of activity specified.

	Note that this class is orthogonal to olive:Agreement: there may be instances of olive:CostSpecification that are also instances of olive:Agreement (and so are binding for all parties to the agreement), but instances of olive:CostSpecification may also be binding for one party only (as when a seller commits to selling a product at a given price but makes no explicit agreement with any buyer to do so).""" ;
.

olive:Count a owl:Class ;
	rdfs:label "count"^^xsd:string ;
	skos:prefLabel "count"@en ;
	rdfs:comment "A measure that involves countable amounts."^^xsd:string ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:Magnitude
			[
				a owl:Restriction ;
				owl:onProperty olive:hasUoM ;
				owl:someValuesFrom olive:CountingUnit ;
			]
		) ;
	] ;
	olive:formerName "gist:Count"^^xsd:string;
.

olive:CountingUnit a owl:Class ;
	rdfs:label "counting unit"^^xsd:string ;
	skos:prefLabel "counting unit"@en ;
	rdfs:comment "A unit of counting, especially olive:_each, but also units such as dozens."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:SimpleUnit
			[
				a owl:Restriction ;
				owl:onProperty olive:hasBaseUnit ;
				owl:hasValue olive:_each ;
			]
		) ;
	] ;
	olive:formerName "gist:CountingUnit"^^xsd:string;
.

olive:Country a owl:Class ;
        rdfs:subClassOf olive:Region;
        rdfs:label "country"@en ;
        skos:prefLabel "country"^^xsd:string ;
        rdfs:comment """olive:Country is the class of all geographical regions that are part of some country. Note that this is different from the country government or population."""^^xsd:string ;
.

olive:County a owl:Class ;
        rdfs:subClassOf olive:Region;
        rdfs:label "county"^^xsd:string;
        skos:prefLabel "county"^^xsd:string ;
        rdfs:comment """olive:County is the class of all geographical regions that are part of some county. Note that this is different from the county government or the population of the county."""^^xsd:string ;
.

olive:CPTCode a owl:Class ;
	rdfs:label "CPT code"^^xsd:string ;
        skos:prefLabel "CPT code"@en ;
	skos:altLabel "current procedural terminology code"@en ;
	rdfs:subClassOf olive:ServiceCodeCategory ;
	rdfs:comment """olive:CPTCode is the class of all CPT codes. Each code should be connected with the class of events that it signifies, as well as the descriptions associated with said code."""^^xsd:string ;
.

olive:CreationEvent a owl:Class ;
	rdfs:label "creation"^^xsd:string ;
    skos:prefLabel "creation"@en ;
	owl:disjointWith olive:DestructionEvent ;
	rdfs:subClassOf olive:ChangeEvent ;
	rdfs:comment """olive:CreationEvent is the class of all events in which some primary object (see olive:eventCreates) is created. Note that this class is disjoint with olive:DestructionEvent - this is not to say that creations and destructions cannot happen simultaneously or in the same vicinity, but that each creation and destruction should be modeled as a distinct event (two common sorts of cases are (1) an overarching creation that involves specific destructions as subevents, and (2) a creation and a destruction that occur simultaneously as subevents of some larger event).

Note: just like every other event, one should specify when it happened using olive:timeOfEvent or its subproperties."""^^xsd:string ;
.

olive:Currency a owl:Class ;
	rdfs:subClassOf olive:PhysicalArtifact ;
	rdfs:label "currency" ;
	skos:prefLabel "currency"@en ;
	skos:altLabel "hard currency"@en , "cash"@en , "money"@en ;
	rdfs:comment """olive:Currency is the class of all physical objects created with the purpose of being used as currency (paradigm examples include coins and paper notes). This class thus excludes de facto media of exchange, such as nuggets of gold, which may be used to facilitate an exchange but are not created with this explicit purpose. See also olive:boughtFor.""" ;
	rdfs:seeAlso olive:boughtFor ;
.

olive:CurrencyUnit a owl:Class ;
	rdfs:label "currency unit"^^xsd:string ;
	skos:prefLabel "currency unit"@en ;
	rdfs:comment "A unit of money. Note: this is the only unit whose conversion factors include time (i.e., the conversion rates change on a daily basis)."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:disjointWith
		olive:DataSizeUnit ,
		olive:DistanceUnit ,
		olive:DurationUnit ,
		olive:ElectricalCurrentUnit ,
		olive:LuminousIntensityUnit ,
		olive:MassUnit ,
		olive:MoleUnit ,
		olive:TemperatureUnit ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:SimpleUnit
			[
				a owl:Restriction ;
				owl:onProperty olive:hasBaseUnit ;
				owl:hasValue olive:_USDollar ;
			]
		) ;
	] ;
	olive:formerName "gist:CurrencyUnit"^^xsd:string;
.

olive:CustomFunctionCall a owl:Class ;
        rdfs:subClassOf olive:FunctionCall ;
        rdfs:label "custom function call" ;
        skos:prefLabel "custom function call" ;
        rdfs:comment """A call to a custom function within some SPARQL query."""^^xsd:string ;
        .

olive:Database a owl:Class ;
	rdfs:subClassOf olive:DataStore ;
	rdfs:label "database"^^xsd:string ;
	skos:prefLabel "database"@en ;
	rdfs:comment """This is the class of all (deployed) databases. Databases are virtual things (see olive:VirtualThing) that are used to store and organize data and are supported by / accessed via a server. One must be careful to distinguish the database itself from the content that it stores (see olive:Database-Content) - the database is a medium which may store/bear/communicate that content (a file is an example of an alternative medium). This is the pattern for expressing the relationship between a deployed database and the content that it \"contains\": (:Database1 olive:instantiates :Database-Content1). See also olive:DataModel for a related notion of content."""^^xsd:string ;
.

olive:DataClassificationType a owl:Class ;
	rdfs:subClassOf olive:Category ;
	rdfs:label "data classification type"^^xsd:string ;
	skos:prefLabel "data classification type"@en ;
	skos:altLabel "data type"@en ;
	rdfs:comment """This is the class of all categories used to classify data. Notable instances include :SensitiveInfo-OliveIP and :SensitiveInfo-PHI. Organizations may need to create their own instances of this class tailored to their own classification structure."""^^xsd:string ;
.

olive:DataLoad a owl:Class ;
        rdfs:subClassOf olive:Invocation ;
        rdfs:label "load"^^xsd:string;
        skos:prefLabel "data load"@en ;
        skos:altLabel "data ingestion"@en ;
        rdfs:comment """Data Loads are invocations that move or copy data as their primary concern."""^^xsd:string ;
.

olive:DataModel a owl:Class ;
	rdfs:subClassOf olive:Constraint ;
	rdfs:label "data model"^^xsd:string ;
	skos:prefLabel "data model"@en ;
	skos:altLabel "database schema"@en ;
	rdfs:comment """This is the class of all data models, considered as abstract things. For a given relational database, its specific schema, table, and column definitions coupled with keys, restrictions, etc. jointly constitute its data model. For an RDF graph, the data model might be conceived of as the properties (and, perhaps, classes) used in expressing the graph. There is some flexibility here with regard to just what gets counted as part of the data model for a given database. The important thing is that this class affords us a way of representing cases in which two distinct databases (see olive:Database) contain different data (see olive:Database-Content) but nevertheless have the same specific structure (as when, say, a single DDL is loaded into two distinct relational databases, but they are then populated with different records)."""^^xsd:string ;
.

olive:DataSensitivityLevel a owl:Class ;
	rdfs:subClassOf olive:Category ;
	rdfs:label "data sensitivity level"^^xsd:string ;
	skos:prefLabel "data sensitivity level"@en ;
	skos:altLabel "data confidentiality level"@en ;
	rdfs:comment """This is the class of data sensitivity levels, each of which can be used to attribute a level of sensitivity (e.g. public use, internal use, confidential, etc.) to data or categories of data (see olive:DataClassificationType and its instances) using olive:categorizedBy. Organizations may need to create their own instances of this class tailored to their own classification structure."""^^xsd:string ;
.

olive:Dataset a owl:Class ;
	rdfs:subClassOf olive:Content, olive:NonphysicalArtifact ;
	rdfs:label "dataset content"^^xsd:string ;
	skos:prefLabel "dataset"@en ;
	skos:altLabel "structured data"@en ;
	rdfs:comment """This is the class of all datasets. A dataset is a data artifact, considered as content. Datasets are typically conceived of as structured, but we also allow for unstructured datasets; it is also conceivable that a dataset itself is unstructured while having structured datasets as parts or members (if it is represented as an instance of olive:Collection). The ontology is also agnostic as to whether the structure, format, language, etc. of a given dataset is essential to it: there may be various levels of abstraction involved in representing \"a dataset\". Note, though, that if a given dataset is represented as abstracting to a particular instances of olive:DataModel such a representation makes that data model (and its associated structure) essential to that dataset.
	
	Instances of this class can be instantiated by instances of olive:DataStore (see olive:instantiates). Instances of this class can, in turn, be abstracted to (see olive:abstractsTo) instances of olive:DataModel and/or more general instances of olive:Content.
	
	For example, suppose I have a relational database and a triplestore that I use to represent the content of some CSV file. In such a case, there are presumably three different instances of olive:DataStore (a triplestore and a relational database, each of which is accessed via a server, and a CSV file, which is, say, stored electronically on a hard drive). Each of these data stores may be represented as instantiating a unique instance of olive:Dataset, since the explicit content expressed by each data store differs from that expressed by the others. Each of these unique instances of olive:Dataset may, in turn, be represented as abstracting to a unique instance of olive:DataModel. However, it may also be the case that all three of these unique instances of olive:Dataset abstracts to a single, common instance of olive:Dataset, which is the \"common\" data present in each of the three unique datasets. And, as a consequence of the transitivity of olive:abstractsTo, this representation allows us to capture the sense in which each of the three unique data stores abstract to the same dataset, while also allowing for the representation of the fact that their formats and explicit content differ."""^^xsd:string ;
.

olive:DataSizeUnit a owl:Class ;
	rdfs:label "data size unit"^^xsd:string ;
	skos:prefLabel "data size unit"@en ;
	rdfs:comment "A unit to measure amounts of digital information."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:disjointWith
		olive:DistanceUnit ,
		olive:DurationUnit ,
		olive:ElectricalCurrentUnit ,
		olive:LuminousIntensityUnit ,
		olive:MassUnit ,
		olive:MoleUnit ,
		olive:TemperatureUnit
		;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:SimpleUnit
			[
				a owl:Restriction ;
				owl:onProperty olive:hasBaseUnit ;
				owl:hasValue olive:_bit ;
			]
		) ;
	] ;
	olive:formerName "gist:DataSizeUnit"^^xsd:string;
.

olive:DataStore a owl:Class ;
	rdfs:subClassOf olive:ContentBearingThing, olive:VirtualThing ;
	owl:equivalentClass [owl:intersectionOf (olive:ContentBearingThing olive:VirtualThing)] ;
	rdfs:label "data store"^^xsd:string ;
	skos:prefLabel "data store"@en ;
	rdfs:comment """This is the intersection of olive:ContentBearingThing and olive:VirtualThing. Instances of this class are virtual things that store information/data. Notable subclasses include olive:Database and the intersection of olive:File and olive:VirtualThing. See olive:Dataset for a class that is importantly related to this one."""^^xsd:string ;
.

olive:DateInstant a owl:Class ;
	rdfs:label "date instant"^^xsd:string ;
	skos:prefLabel "date instant"@en ;
	rdfs:comment "A point in time known only to the accuracy of one day.  Say the signing of the declaration of independence on 7/4/1776"^^xsd:string ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:TimeInstant
			[a owl:Restriction ;
			 owl:onProperty olive:hasMagnitude ;
			 owl:someValuesFrom [a owl:Class; owl:intersectionOf (
			   
			[
				a owl:Restriction ;
				owl:onProperty olive:hasPrecision ;
				owl:hasValue "1"^^xsd:double ;
			]
			[
				a owl:Restriction ;
				owl:onProperty olive:hasUoM ;
				owl:hasValue olive:_day ;
			]
		)]])] ;
	olive:formerName "gist:DateInstant"^^xsd:string;
	olive:uriTemplate     [olive:uniqueText "http://data.oliveai.com/ontology/DateInstant/universalDate="^^xsd:string ;
	                       olive:note  "This template is only for points of time with the granularity of a day (each of which should be uniquely identified by a date string of the form YYYY-MM-DD)."^^xsd:string;
			       olive:uriTemplateUsesProperty olive:universalDate;]
.

olive:Deactivation a owl:Class ;
	rdfs:label "deactivation"^^xsd:string ;
	owl:disjointWith olive:Reactivation ;
    skos:prefLabel "deactivation"@en ;
	rdfs:subClassOf olive:ChangeEvent ;
	rdfs:comment """olive:Deactivation is the class of all events in which some primary object (see olive:changedThing) is deactivated.

Note: just like every other event, one should specify when it happened using olive:timeOfEvent or its subproperties. It's worth noting that the most recent change event will give us the olive:lastModifiedOn time for the subject of the change event."""^^xsd:string ;
.

olive:DeathEvent a owl:Class ;
	rdfs:label "death"^^xsd:string ;
    skos:prefLabel "death"@en ;
	rdfs:subClassOf olive:ChangeEvent ;
	rdfs:comment """olive:Death is the class of all events in which some instance of olive:LivingThing (see olive:changedThing) becomes deceased. Note that this is a subclass of olive:ChangeEvent rather than olive:DestructionEvent - this allows the ontology to remain neutral with regard to questions of personal identity and to allow for death to be modeled differently in different contexts.

Note: just like every other event, one should specify when it happened using olive:timeOfEvent or its subproperties."""^^xsd:string ;
.

olive:DeceasedThing a owl:Class ;
	rdfs:label "deceased thing"^^xsd:string ;
    skos:prefLabel "deceased"@en ;
	rdfs:subClassOf olive:LivingThing ;
	owl:equivalentClass [a owl:Class ;
						owl:intersectionOf (olive:LivingThing
						[a owl:Restriction ;
						owl:onProperty [owl:inverseOf olive:changedThing] ;
						owl:someValuesFrom olive:DeathEvent] ) ] ;
	rdfs:comment """olive:DeceasedThing is the class of all things that are deceased, are no longer alive. Perhaps counterintuitively, this is a subclass of olive:LivingThing. This is because olive:LivingThing is not the class of *currently* living things, but rather the class of things that were alive at one time or another. As such, all deceased things must be (formerly) living things."""^^xsd:string ;
    olive:exampleInstance "ex:AbrahamLincoln"^^xsd:string ;
.

olive:Deception a owl:Class ;
	rdfs:label "deception"^^xsd:string ;
    skos:prefLabel "deception"@en ;
	rdfs:subClassOf olive:Event ;
	rdfs:comment """olive:Deception is the class of all events in which some instance of olive:Agent (see olive:does) deceives one or more other agents (see olive:affectedObject-Direct).

Note: just like every other event, one should specify when it happened using olive:timeOfEvent or its subproperties."""^^xsd:string ;
.

olive:Degree a owl:Class ;
        rdfs:subClassOf olive:Certification;
        rdfs:label "degree"^^xsd:string;
        skos:prefLabel "education degree"@en ;
        rdfs:comment """Instances are certifications from academic institutions, such as high school degrees, BA, BS, PhD, and so on. This does not include certifications for things such as CPR proficiency.

Note that 'degree' involving low/medium/high amount is a different notion altogether. See olive:QualitativeAssessment."""^^xsd:string ;
.

olive:Degree-Academic a owl:Class ;
	rdfs:subClassOf olive:Degree ;
    rdfs:label "academic degree"^^xsd:string;
    skos:prefLabel "academic degree"@en ;
    rdfs:comment """The subclass of olive:Degree all instances of which are awarded to a person upon completion of a course of study in higher education. Academic degrees are typically contrasted with professional degrees (see olive:Degree-Professional)."""^^xsd:string ;
.

olive:Degree-Associate a owl:Class ;
    rdfs:subClassOf olive:Degree-Undergraduate, olive:Degree-Academic ;
	owl:disjointWith olive:Degree-Bachelors ;
    rdfs:label "associate degree"^^xsd:string;
    skos:prefLabel "associate's degree"@en ;
	skos:altLabel "associate degree"@en ;
    rdfs:comment """The subclass of olive:Degree all instances of which are associate degrees (typically awarded after a course of study of 2-3 years)."""^^xsd:string ;
.

olive:Degree-BachelorOfArts a owl:Class ;
    rdfs:subClassOf olive:Degree-Bachelors ;
	owl:disjointWith olive:Degree-BachelorOfScience ;
    rdfs:label "bachelor of arts degree"^^xsd:string;
    skos:prefLabel "BA"@en ;
	skos:altLabel "AB"@en , "Bachelor of Arts"@en ;
    rdfs:comment """The subclass of olive:Degree-Bachelors all instances of which are Bachelor of Arts degrees."""^^xsd:string ;
.

olive:Degree-BachelorOfScience a owl:Class ;
    rdfs:subClassOf olive:Degree-Bachelors ;
	owl:disjointWith olive:Degree-BachelorOfArts ;
    rdfs:label "bachelor of science degree"^^xsd:string;
    skos:prefLabel "BS"@en ;
	skos:altLabel "Bachelor of Science"@en ;
    rdfs:comment """The subclass of olive:Degree-Bachelors all instances of which are Bachelor of Science degrees."""^^xsd:string ;
.

olive:Degree-Bachelors a owl:Class ;
    rdfs:subClassOf olive:Degree-Undergraduate,  olive:Degree-Academic ;
	owl:disjointWith olive:Degree-Associate ;
    rdfs:label "bachelor's degree"^^xsd:string;
    skos:prefLabel "bachelor's degree"@en ;
	skos:altLabel "bachelor degree"@en ;
    rdfs:comment """The subclass of olive:Degree wherein a bachelor's degree is awarded."""^^xsd:string ;
.

olive:Degree-Doctorate a owl:Class ;
	rdfs:subClassOf olive:Degree-Postgraduate ;
	owl:disjointWith olive:Degree-Masters ;
    rdfs:label "doctorate"^^xsd:string;
    skos:prefLabel "doctoral degree"@en ;
    rdfs:comment """The subclass of olive:Degree-Postgraduate all instances of which are doctoral degrees."""^^xsd:string ;
.

olive:Degree-HS a owl:Class ;
    rdfs:subClassOf olive:Degree ;
	owl:disjointWith olive:Degree-Undergraduate, olive:Degree-Postgraduate ;
    rdfs:label "hs degree"^^xsd:string;
    skos:prefLabel "high school diploma"@en ;
	skos:altLabel "diploma"@en ;
    rdfs:comment """The subclass of olive:Degree wherein a high school diploma is awarded."""^^xsd:string ;
.

olive:Degree-Masters a owl:Class ;
	rdfs:subClassOf olive:Degree-Postgraduate, olive:Degree-Academic  ;
	owl:disjointWith olive:Degree-Doctorate ;
    rdfs:label "master's degree"^^xsd:string;
    skos:prefLabel "master's degree"@en ;
    rdfs:comment """The subclass of olive:Degree-Postgraduate all instances of which are master's degrees."""^^xsd:string ;
.

olive:Degree-MA a owl:Class ;
    rdfs:subClassOf olive:Degree-Masters ;
    rdfs:label "MA degree"^^xsd:string;
    skos:prefLabel "MA"@en ;
	skos:altLabel "master of arts"@en ;
    rdfs:comment """The subclass of olive:Degree-Masters all instances of which are Master of Arts degrees."""^^xsd:string ;
    olive:mapsTo "MA" ;
.

olive:Degree-MD a owl:Class ;
    rdfs:subClassOf olive:Degree-Doctorate , olive:Degree-Professional ;
    rdfs:label "MD degree"^^xsd:string;
    skos:prefLabel "MD"@en ;
	skos:altLabel "Doctor of Medicine"@en ;
    rdfs:comment """The subclass of olive:Degree-Doctorate all instances of which are MD (Doctor of Medicine) degrees."""^^xsd:string ;
    olive:mapsTo "MD" ;
.

olive:Degree-MS a owl:Class ;
    rdfs:subClassOf olive:Degree-Masters ;
    rdfs:label "MS degree"^^xsd:string;
    skos:prefLabel "MS"@en ;
	skos:altLabel "master of science"@en ;
    rdfs:comment """The subclass of olive:Degree-Masters all instances of which are Master of Science degrees."""^^xsd:string ;
.

olive:Degree-PhD a owl:Class ;
        rdfs:subClassOf olive:Degree-Doctorate , olive:Degree-Academic ;
        rdfs:label "PhD degree"^^xsd:string;
        skos:prefLabel "PhD"@en ;
	skos:altLabel "doctorate"@en, "Doctor of Philosophy"@en ;
        rdfs:comment """The subclass of olive:Degree-Postgraduate wherein a PhD (Doctor of Philosophy) is awarded."""^^xsd:string ;
	olive:mapsTo "PHD" ;
.

olive:Degree-Postgraduate a owl:Class ;
	rdfs:subClassOf olive:Degree ;
	owl:disjointWith olive:Degree-Undergraduate ;
    rdfs:label "postgraduate degree"^^xsd:string;
    skos:prefLabel "graduate degree"@en ;
	skos:altLabel "postgraduate degree"@en ;
    rdfs:comment """The subclass of olive:Degree all instances of which are degrees pursued following graduation from undergraduate study (see olive:Degree-Undergraduate)."""^^xsd:string ;
.

olive:Degree-Professional a owl:Class ;
	rdfs:subClassOf olive:Degree ;
    rdfs:label "professional degree"^^xsd:string;
    skos:prefLabel "professional degree"@en ;
    rdfs:comment """The subclass of olive:Degree all instances of which are designed to prepare a person for work in a particular profession. Professional degrees typically serve as a contrast to academic degree (see olive:Degree-Academic)."""^^xsd:string ;
.

olive:Degree-Undergraduate a owl:Class ;
	rdfs:subClassOf olive:Degree ;
	owl:disjointWith olive:Degree-Postgraduate ;
    rdfs:label "undergraduate degree"^^xsd:string;
    skos:prefLabel "undergraduate degree"@en ;
    rdfs:comment """The subclass of olive:Degree all instances of which are degrees pursued during undergraduate study at a college or university."""^^xsd:string ;
.

olive:Delivery a owl:Class ;
	rdfs:label "delivery"^^xsd:string ;
        skos:prefLabel "delivery"@en ;
	rdfs:subClassOf olive:MovingSomething, olive:TransferEvent ;
	rdfs:comment """olive:Delivery is the class of all events in which something is delivered. This requires both the movement of the thing and the handoff of control of that thing. Examples include delivering flowers, or bringing food to a patient's room."""^^xsd:string ;
        olive:exampleInstance "ex:AmazonPackageDelivery1032";
.

olive:DeonticStatus a owl:Class ;
        rdfs:subClassOf olive:Category ;
        rdfs:label "deontic status"^^xsd:string;
        skos:prefLabel "deontic status"@en ;
        rdfs:comment """Deontic statuses have to do with whether something is optional, required, supererogatory, and so on. These are normative classifications. 

Note that there is also the class of olive:Obligation, which is clearly closely related to the instance olive:Required."""^^xsd:string ;
        olive:exampleInstance olive:Required, olive:Optional ;
.

olive:DestructionEvent a owl:Class ;
	rdfs:label "destruction"^^xsd:string ;
    skos:prefLabel "destruction"@en ;
	rdfs:subClassOf olive:ChangeEvent ;
	rdfs:comment """olive:DestructionEvent is the class of all events in which some primary object (see olive:changedThing) is destroyed. Note that this class is disjoint with olive:CreationEvent - this is not to say that creations and destructions cannot happen simultaneously or in the same vicinity, but that each creation and destruction should be modeled as distinct events.

Note: just like every other event, one should specify when it happened using olive:timeOfEvent or its subproperties."""^^xsd:string ;
.

olive:Disbandment a owl:Class ;
	rdfs:label "disbandment"^^xsd:string ;
    skos:prefLabel "disbandment"@en ;
	rdfs:subClassOf olive:DestructionEvent ;
	rdfs:comment """olive:Disbandment is the class of all events in which an instance of olive:Organization (see olive:changedThing) becomes disbanded. In such events, the organizing principle of the organization is disrupted in such a way that the organization ceases to exist; consequently, this is a subclass of olive:DestructionEvent. Some examples are when a band breaks up or a company is dissolved. Note, though, that disbanded organizations can reform (as when a band gets back together).

Note: just like every other event, one should specify when it happened using olive:timeOfEvent or its subproperties."""^^xsd:string ;
.

olive:Disease a owl:Class ;
	rdfs:label "disease"^^xsd:string ;
        skos:prefLabel "disease"@en ;
	rdfs:subClassOf olive:HealthCondition ;
	rdfs:comment """olive:Disease is the class of all diseases. Diseases are distinguished from illnesses in that diseases are to be cured, whereas illnesses are to be managed."""^^xsd:string ;
.

olive:Distance a owl:Class ;
	rdfs:label "distance"^^xsd:string ;
	skos:prefLabel "distance"@en ;
	skos:altLabel "extent"@en, "length"@en ;
	rdfs:comment "A measure of distance, which could be distances over the Earth, and could also be height, width, length, depth, girth, etc."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:Magnitude
			[
				a owl:Restriction ;
				owl:onProperty olive:hasUoM ;
				owl:someValuesFrom olive:DistanceUnit ;
			]
		) ;
	] ;
	olive:formerName "gist:Extent"^^xsd:string;
.

olive:DistanceUnit a owl:Class ;
	rdfs:label "distance unit"^^xsd:string ;
	skos:prefLabel "distance unit"@en ;
	rdfs:comment "A unit to measure linear distance, such as feet or kilometers."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:disjointWith
		olive:DurationUnit ,
		olive:ElectricalCurrentUnit ,
		olive:LuminousIntensityUnit ,
		olive:MassUnit ,
		olive:MoleUnit ,
		olive:TemperatureUnit
		;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:SimpleUnit
			[
				a owl:Restriction ;
				owl:onProperty olive:hasBaseUnit ;
				owl:hasValue olive:_meter ;
			]
		) ;
	] ;
	olive:formerName "gist:DistanceUnit"^^xsd:string;
.

olive:Doctor a owl:Class ;
        rdfs:subClassOf olive:MedicalProfessional ;																	
        rdfs:label "doctor"^^xsd:string;
        skos:prefLabel "doctor"^^xsd:string ;
		skos:altLabel "physician"^^xsd:string ;
        rdfs:comment """olive:Doctor is the subclass of olive:MedicalProfessionals who are medical doctors.

Note that this class does not include dentists. It also does not include all Phd holders in general."""^^xsd:string ;
        olive:mapsTo-providerType "Doctor" ;
.

olive:Duration a owl:Class ;
	rdfs:label "duration"^^xsd:string ;
	skos:prefLabel "duration"@en ;
	rdfs:comment
		"EXAMPLE: One week (or seven days), but not Jan 1, 2008 to Jan 7, 2008 (which is an interval). Intervals have durations, but are not themselves durations."^^xsd:string ,
		"Time, but not on a timeline."^^xsd:string
		;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:Magnitude
			[
				a owl:Restriction ;
				owl:onProperty olive:hasUoM ;
				owl:someValuesFrom olive:DurationUnit ;
			]
		) ;
	] ;
	olive:formerName "gist:Duration"^^xsd:string;
.

olive:DurationUnit a owl:Class ;
	rdfs:label "duration unit"^^xsd:string ;
	skos:prefLabel "duration unit"@en ;
	rdfs:comment "A unit to measure passage of time: hours, days, years."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:disjointWith
		olive:ElectricalCurrentUnit ,
		olive:LuminousIntensityUnit ,
		olive:MassUnit ,
		olive:MoleUnit ,
		olive:TemperatureUnit
		;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:SimpleUnit
			[
				a owl:Restriction ;
				owl:onProperty olive:hasBaseUnit ;
				owl:hasValue olive:_second ;
			]
		) ;
	] ;
	olive:formerName "gist:DurationUnit"^^xsd:string;
.

olive:Drug a owl:Class ;
        rdfs:subClassOf olive:PhysicalArtifact ;
        rdfs:label "drug"^^xsd:string ;
        skos:prefLabel "drug"@en ;
	skos:altLabel "medication"@en ;
        rdfs:comment """olive:Drug is the class of all individual drugs.

This class is orthogonal to olive:PhysicalSubstance and olive:PhysicalObject. That is, olive:Drug contains both countable objects and uncountable substances. A sample of Morphine is a drug, as well as a tablet of Motrin."""^^xsd:string ;
.

olive:DrugDispensation a owl:Class ;
        rdfs:subClassOf olive:TransferEvent ;
        rdfs:label "drug dispensation"^^xsd:string;
        skos:prefLabel "dispensing a drug"@en ;
	skos:altLabel "receiving a drug"@en , "acquiring a drug"@en ;
        rdfs:comment """Drug dispensations are when a drug has been given to the possession of some recipient.

This is importantly different from olive:ReceivingADrug, wherein the drug is administered."""^^xsd:string ;
        owl:disjointWith olive:ReceivingADrug ;
.

olive:Education a owl:Class ;
	rdfs:label "education"^^xsd:string ;
        skos:prefLabel "education"@en ;
	rdfs:subClassOf olive:Event ;
	rdfs:comment """olive:Education is the class of all events in which someone is educated. This includes traditional schooling, such as olive:PrimaryEducation and olive:PostGraduateEducation, as well as training sessions where one is certified in, say, CPR. Often an education event culminates in the organization doing the educating furnishing the student (see olive:studentIn) with a certificate (see olive:Certification)."""^^xsd:string ;
        olive:exampleSubclass olive:PrimaryEducation, olive:PostGraduateEducation ;
        olive:exampleInstance "my undergraduate education at PLU" ;
        olive:uriTemplate [
                olive:uniqueText "olive:Education/ribbonUuid=" ;
                olive:uriUsesProperty olive:ribbonUuid ;
                olive:note "Applicable when importing data from the RibbonHealth API"^^xsd:string ;
        ];

.

olive:Education-College a owl:Class ;
	rdfs:label "college education"^^xsd:string ;
        skos:prefLabel "college"@en ;
	skos:altLabel "undergraduate education"@en, "undergrad"@en ;
	rdfs:subClassOf olive:Education ;
	rdfs:comment """olive:Education-College is a subclass of olive:Education. This is reserved for undergraduate education, even though graduate school also takes place in a college/university setting."""^^xsd:string ;
.

olive:Education-GraduateSchool a owl:Class ;
	rdfs:label "graduate schoool education"^^xsd:string ;
        skos:prefLabel "graduate school"@en ;
	skos:altLabel "grad school"@en, "graduate education"@en ;
	rdfs:subClassOf olive:PostGraduateEducation ;
	rdfs:comment """olive:Education-GraduateSchool is a subclass of olive:Education."""^^xsd:string ;
	owl:disjointWith olive:Education-College ;
.

olive:Education-MedicalSchool a owl:Class ;
	rdfs:label "medical school education"^^xsd:string ;
        skos:prefLabel "medical school"@en ;
	skos:altLabel "med school"@en ;
	rdfs:subClassOf olive:Education-GraduateSchool ;
	rdfs:comment """olive:Education-MedicalSchool is a subclass of olive:Education."""^^xsd:string ;
	olive:mapsTo "Medical School";
.

olive:ElectricalCurrent a owl:Class ;
	rdfs:label "electrical current"^^xsd:string ;
	skos:prefLabel "electrical current"@en ;
	skos:altLabel "electric current"@en ;
	rdfs:comment "A flow of electric charge."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:Magnitude
			[
				a owl:Restriction ;
				owl:onProperty olive:hasUoM ;
				owl:someValuesFrom olive:ElectricalCurrentUnit ;
			]
		) ;
	] ;
	olive:formerName "gist:ElectricCurrent"^^xsd:string;
.

olive:ElectricalCurrentUnit a owl:Class ;
	rdfs:label "electrical current unit"^^xsd:string ;
	skos:prefLabel "electrical current unit"@en ;
	rdfs:comment "Unit of electrical current, which is charge per unit time.  The SI unit is the ampere.  (Note that electrical current is a composed unit.)"^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:disjointWith
		olive:LuminousIntensityUnit ,
		olive:MassUnit ,
		olive:MoleUnit ,
		olive:TemperatureUnit
		;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:SimpleUnit
			[
				a owl:Restriction ;
				owl:onProperty olive:hasBaseUnit ;
				owl:hasValue olive:_ampere ;
			]
		) ;
	] ;
	olive:formerName "gist:ElectricalCurrentUnit"^^xsd:string;
.

olive:EmailAddress a owl:Class ;
	rdfs:subClassOf olive:VirtualAddress ;
	skos:prefLabel "email"@en ;
	skos:altLabel "email account"@en ;
	rdfs:label "email address"^^xsd:string ;
	olive:formerName "gist:EmailAddress"^^xsd:string;
	rdfs:comment """An email address is a unique identifier for an email account. It is used to both send and receive email messages over the Internet. Each account should be associated with at least one agent (see olive:hasEmailAddress).

Note that an email address in this sense is distinct from the string. One can use 'address' synonymously with 'account'. So, if you would send an email to 'ontologist@awesome.com', that string would be related to the email address"""^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	.

olive:EmotionalState a owl:Class ;
	rdfs:label "emotional state"^^xsd:string ;
        skos:prefLabel "emotion"@en ;
	rdfs:subClassOf olive:MentalState ;
	rdfs:comment """olive:EmotionalState is the class of all situations in which the focal state is an emotion. Paradigm examples are being in love, being angry, being disgusted, and being in awe. Of course, the psychology of emotions is complicated, at best, which means that many attempts to get more fine-grained on what exactly emotions are will be controversial. Be wary!

As with the other states, you might want to track something related and more dynamic, which would be a corresponding event. So, if I want to talk about how my love of my wife has grown and deepened over the years, it might be better to talk about the event of our relationship. Just be mindful of whether you are focusing on the state or the event when modeling.

Also note that many emotions appear to have direct objects. So, I might distinguish my anger as being anger at a customer service representative. This is fine, but it is not required for all emotions. We might just represent my unqualified angry state, or my unqualified joyful state. Worth noting that often emotional states with objects can also be represented as being caused by those things: the interaction with the customer service representative caused my anger. That said, we often experience emotions towards things that didn't cause them; humans aren't the most logically consistent creatures."""^^xsd:string ;
        olive:exampleSubclass olive:AngryState, olive:JoyfulState ;
.

olive:Employment a owl:Class ;
	rdfs:label "employment"^^xsd:string ;
        skos:prefLabel "employment"@en ;
	rdfs:subClassOf olive:Event ;
	rdfs:comment """olive:Employment is the class of all employment events. These events should specify, like all events, the start and end of the event when known. They should also specify the employer and the employee."""^^xsd:string ;
.

olive:Endpoint a owl:Class ;
        rdfs:subClassOf olive:VirtualThing ;
        rdfs:label "endpoint"^^xsd:string;
        skos:prefLabel "api endpoint"@en ;
        rdfs:comment """An interface for a remote (web-based) function call; it consists of both the location and the protocol by which someone interacts with the relevant API."""^^xsd:string ;
.

olive:EpisodeOfCare a owl:Class ;
	rdfs:label "episode of care"^^xsd:string ;
        skos:prefLabel "episode of care"@en ;
	rdfs:subClassOf olive:MedicalCareEvent ;
	rdfs:subClassOf [a owl:Restriction ;
			 owl:onProperty olive:hasSubevent ;
			 owl:someValuesFrom olive:MedicalEncounter ;] ;
	rdfs:comment """olive:EpisodeOfCare is the class of all medical care 'episodes', which encompass everything used to care for some illness, condition, or medical event for a given patient. So, if Anne receives surgery on her wrist, the episode of care will include the pre-op, surgery, post-op, and perhaps the physical therapy that follows. Episodes are useful conceptually for gathering related procedures, and they are also becoming more popular as a way to bill--we might end up with more efficient care if we are maxxing out the cost-benefit of the episode of care, rather than the individual subevents. For example, certain surgical procedures may lower costs of surgeries, but may bear higher costs later in terms of therapy required.

Contrast with olive:MedicalEncounter, which are the more 'bite-sized' events that combine to form an episode."""^^xsd:string ;
        owl:disjointWith olive:MedicalEncounter ;
.

olive:Equipment	a owl:Class ;
	rdfs:label "equipment"^^xsd:string ;
	skos:prefLabel "equipment"@en ;
	rdfs:subClassOf olive:PhysicalArtifact ;
	rdfs:comment """Equipment are tools, machines, or other physical pieces of technology that aid in completing some task. Paradigm instances include hard hats, hammers, cars, stethoscopes, MRI machines, baseball bats, and syringes."""^^xsd:string ;
	olive:formerName "gist:Equipment"^^xsd:string;
	owl:disjointWith olive:Building ;
.

olive:Evaluation a owl:Class ;
        rdfs:subClassOf olive:Content, olive:NonphysicalArtifact ;
        rdfs:label "evaluation"^^xsd:string;
        skos:prefLabel "evaluation"@en ;
	skos:altLabel "feedback"@en ;
        rdfs:comment """Instances of olive:Evaluation are instances of olive:Content in which something is being evaluated. As such, one should specify who is doing the evaluating (olive:evaluator), what is being evaluated (olive:evaluatedThing), and what the evaluation is (e.g. olive:quantitativeStrength or olive:qualitativeStrength). Paradigm examples would be a report card (though that might be best thought of as a collection of evaluations, usually one for each subject), a Pulse Survey response, or a letter of recommendation.

Note that olive:Recommendation is orthogonal to olive:Evaluation. Recommendations may be evaluations or vice-versa, but they are not coextensive. For one thing, their purposes are not the same. I might recommend a hairstylist to you, but my purpose is to get you a good haircut, not to provide feedback to the stylist."""^^xsd:string ;
.

olive:Event a owl:Class ;
		owl:disjointWith olive:State-Situation ;
        rdfs:label "event"^^xsd:string;
        skos:prefLabel "event"@en ;
		skos:altLabel "occurrence"@en , "happening"@en ;
		rdfs:subClassOf olive:Situation ;
	rdfs:comment """olive:Event is the class of all events. Roughly, an event is something that happens. They are temporal things, having start (olive:startOfEvent) and end (olive:endOfEvent) times. Paradigm examples include basketball games, doctor's visits, and chemical reactions.

To describe an event beyond the bare classification (e.g. specifying that some event is an ex:BirthdayParty), use subproperties of olive:EventInvolves. This will allow you to specify the role that various things play in a given event. For example, a birthday cake may play the 'thing being eaten' role in a birthday cake eating event. Or Katy might play the 'birthday girl' role in a given birthday party.

We can sometimes be tricky and use events to express more complex relations. Suppose I am sitting between two people on a bench. It would be great to say (:Me ex:isbetween [:Bill and :Sandy]), but we simply can't do that in triples. We can, however, say that there's some ex:SittingOnABench event in which the ex:personOnTheLeft is :Bill and the ex:personOnTheRight is :Sandy. As such, you can use this event as a nexus (or a Christmas tree!) to 'hang' off all the relevant details.

Another way that you might use events is to provide temporal qualification. If Jeremy is wearing a blue sweater, you might hestitate to write (:Jeremy ex:wears :BlueSweater1), since it wasn't true yesterday and won't be true tomorrow. There are a few remedies here, including reification, but you could also reify a 'sweater wearing event' that holds between Jeremy and his sweater, and give that event a start and end time."""^^xsd:string ;
        olive:exampleSubclass olive:RevenueCycle, olive:MedicalCareEvent ;
.

olive:Exchange a owl:Class ;
	rdfs:label "exchange" ;
	skos:prefLabel "exchage"@en ;
	rdfs:subClassOf olive:TransferEvent ;
	rdfs:comment """olive:Exchange is the subclass of olive:TransferEvent all instances of which are themselves constituted by multiple transfers, resulting in an end state such that the things transferred can be conceived of as replacing each other in some way. This sort of replacement can be physical (as when one replaces the strings on a guitar with a new set, or when people trade seats on an airplane), but it can also involve an exchange of (non-physical) control or rights (as in commercial transactions, where rights of ownership are exchanged).

	An important subclass of olive:Exchange is olive:Transaction, which is the class of exchanges such that the exchange occurs between two agents.

	In every instance of olive:Exchange, there should be more than one thing playing the role of olive:thingTransferred (or one of its subproperties), and one is licensed to conclude that the things playing this role are exchanged for one another in the event in question. Note that the each of the things playing the role of olive:thingTransferred in an instance of olive:Exchange should also, properly speaking, be conceived of as playing the olive:thingTransferred role in a transfer (see olive:TransferEvent) subevent (see olive:hasSubevent) of the top-level exchange. (Whether or not these subevents are explicitly represented depends on one's modeling purposes.)""" ;
	olive:exampleSubClass olive:Transaction ;
.

olive:ExemplarIndividual a owl:Class ;
        rdfs:label "exemplar individual"^^xsd:string;
        skos:prefLabel "exemplar individual"@en ;
	skos:altLabel "exemplar"@en, "paradigm individual"@en, "model"@en, "standard"@en ;
        rdfs:comment """This is a strange class. Every class can be thought of as having a paradigm instance of that class: the paradigm cheeseburger, doctor, exercise, etc. olive:ExemplarIndividual is the class of all such paradigm/exemplar individuals. 

Every class has exactly one such exemplar individual, and that individual can be used as a stand-in for the class. For example, if I say that I desire a cheeseburger, then prima facie it looks like I'm relating my desire to the class ex:Cheeseburger. However, we could also say that there is a single thing that I desire, namely the 'exemplar cheeseburger' (it's probably the thing that you're picturing in your head right now).

As a convention, we name the exemplar for CLASS :Exemplar_CLASS. So, the exemplar doctor is :Exemplar_Doctor.

Given that every class has exactly one exemplar (see olive:exemplarForClass), you might think that learning (:X a olive:ExemplarIndividual, olive:CLASS) and (:Y a olive:ExemplarIndividual, olive:CLASS) means that (:X owl:sameAs :Y). But that's a mistake. It might be that :X is directly an instance of olive:CLASS, whereas :Y is an instance of SUBCLASS, such that (olive:SUBCLASS rdfs:subClassOf olive:CLASS). To make this more plain, both the exemplar burger and the exemplar cheeseburger would be exemplars and burgers, though only the exemplar burger is the exemplar burger.

Note that being an exemplar does not mean that a thing is good. Oncologists treat cancer, and we can state this by using :Exemplar_Cancer. But this does not mean that we should all aspire to be more like or to get this cancer."""^^xsd:string ;
.

olive:Facet a owl:Class ;
	olive:instanceOf olive:Class-SecondOrder ;
	rdfs:label "facet" ;
	skos:prefLabel "facet"@en ;
	rdfs:comment """olive:Facet is intended primarily to be a top-level instance of owl:Class that serves to collect (as subclasses) instances of olive:Class-SecondOrder. To put it another way, the primarily role of this class is to streamline the top-level nodes of the Olive ontology. Instances of this class are all second-order classes (see olive:Class-SecondOrder) that serve as (at least partial) facetings (see olive:facetingOfClass) of some first-order class in (or constructable from) the Olive ontology.""" ;
.

olive:Female a owl:Class ;
        rdfs:subClassOf olive:LivingThing ;
        rdfs:label "female"^^xsd:string;
        skos:prefLabel "female"@en ;
        rdfs:comment """Female living things are of the sex that can bear offspring or produce eggs, distinguished biologically by the production of gametes (ova) which can be fertilized by male gametes."""^^xsd:string ;
	owl:equivalentClass [a owl:Restriction ;
			     owl:onProperty olive:assignedSex ;
			     owl:hasValue olive:Female-Sex ;] ;
.

olive:Field-Data a owl:Class ;
        rdfs:subClassOf olive:Collection, olive:Section ;
        rdfs:label "data field"^^xsd:string;
        skos:prefLabel "field"^^xsd:string ;
        rdfs:comment """Each instance of olive:Field-Data is the collection of cells (see olive:Cell-Data) for a given field or column. Each field should have an olive:fieldName, olive:fieldDataType, and olive:fieldProperty. These will give information about the logical meaning of the field."""^^xsd:string ;
.

olive:Figure a owl:Class ;
        rdfs:subClassOf olive:VisualContentSource ;
        rdfs:label "figure"^^xsd:string;
        skos:prefLabel "figure"^^xsd:string ;
        rdfs:comment """Figures are graphics that appear in written or visual media that convey information, such as tables, charts, and graphs."""^^xsd:string ;
.

olive:File a owl:Class ;
	rdfs:subClassOf olive:ContentBearingThing ;
	rdfs:label "file"^^xsd:string ;
	skos:prefLabel "file"@en ;
	rdfs:comment """This is the class of all files, whether physical files (made of, e.g. paper) or virtual files stored on a computer (see olive:VirtualThing). One should be careful to distinguish instances of this class from the content (see olive:Content) that they instantiate (see olive:instantiates). So, for example, :NicksKnowledgeGraph-TTLFile, a turtle file, would be an instance of this class, but the content expressed by that file (:NicksKnowledgeGraph-Content, say), would be an instance of olive:Content and (:NicksKnowledgeGraph-TTLFile olive:instantiates :NicksKnowledgeGraph-Content) would hold."""^^xsd:string ;
.

olive:File-Physical a owl:Class ;
	rdfs:subClassOf olive:File, olive:PhysicalObject ;
	rdfs:label "physical file"^^xsd:string ;
	skos:prefLabel "file"@en ;
	skos:altLabel "paper file"@en ;
	owl:equivalentClass [owl:intersectionOf (olive:File olive:PhysicalObject)] ;
	rdfs:comment """This is the intersection of olive:File and olive:PhysicalObject. Paradigmatic examples are paper files; paradigmatic non-examples are computer files."""^^xsd:string ;
.

olive:File-Virtual a owl:Class ;
	rdfs:subClassOf olive:File, olive:DataStore ;
	rdfs:label "virtual file"^^xsd:string ;
	skos:prefLabel "file"@en ;
	skos:altLabel "computer file"@en , "virtual file"@en, "electronic file"@en ;
	owl:equivalentClass [owl:intersectionOf (olive:File olive:VirtualThing)] ;
	rdfs:comment """This is the intersection of olive:File and olive:VirtualThing. Paradigmatic examples are computer files; paradigmatic non-examples are paper files.""" ;
.

olive:FileAttribute a owl:Class ;
	rdfs:label "file attribute"^^xsd:string ;
        skos:prefLabel "file attribute"@en ;
	rdfs:subClassOf olive:Category ;
	rdfs:comment """olive:FileAttribute is the class of all accessibility attributes that can apply to content, usually computer files. Most notably, read/write status or whether a file is public/private might be expressed using instances of these categories."""^^xsd:string ;
        olive:exampleInstance olive:ReadOnly ;
.

olive:Force a owl:Class ;
	rdfs:label "force"^^xsd:string ;
        skos:prefLabel "force"@en ;
	rdfs:subClassOf olive:Event ;
	rdfs:comment """olive:Force is the class of all events that are physical forces. This is a tricky class because it is natural to talk about forces as \"physical\" even though they are not physical things (since they are events). Forces are a particular type of interaction between physical bodies, and it is in virtue of the involved bodies being physical that the force is considered \"physical\".

Note that often we will be more interested in the situation (and usually event) in which the force is applied than in the force situation itself. So, while a force is involved in kicking a field goal, we are more likely to model and be interested in the kicking event than on focusing on just the force itself."""^^xsd:string ;
.

olive:Form-Template a owl:Class ;
	rdfs:label "form template"^^xsd:string ;
	skos:prefLabel "form"@en ;
	rdfs:subClassOf olive:Constraint, olive:Template ;
	rdfs:comment """This is the class of all forms considered as content (which may be expressed by some content-bearing thing - e.g. a paper form you fill out at the doctor's office). A form is a non-physical template that allows for information to be communicated in a structured way.
	
	Instances of this class are the \"abstract\" form structures themselves - e.g. the abstract template instantiated in a paper copy of an I-9 form. Filled-in forms communicate additional content, although they abstract to an instance of this class. So, for example, all of the following can consistently hold:
	(:MyFilledI9Form-PaperCopy olive:instantiates ::MyFilledI9Form-Content)
	(:MyFilledI9Form-PaperCopy olive:instantiates :I9Form)
	(:MyI9Form-Content olive:abstractsTo :I9Form)
	(:I9Form a olive:Form-Template)"""^^xsd:string ;
.

olive:Fraud a owl:Class ;
	rdfs:label "fraud"^^xsd:string ;
    skos:prefLabel "fraud"@en ;
	rdfs:subClassOf olive:Deception ;
	rdfs:comment """olive:Fraud is the class of all events in which some instance of olive:Agent (see olive:does) commits fraud - that is, they engage in deception in order to achieve some sort of financial or personal gain (typically at the expense of one or more other agents).

Note: just like every other event, one should specify when it happened using olive:timeOfEvent or its subproperties."""^^xsd:string ;
.

olive:Function a owl:Class ;
		rdfs:subClassOf olive:NonphysicalThing ;
        rdfs:label "function"^^xsd:string;
        skos:prefLabel "function"^^xsd:string ;
        rdfs:comment """Functions have inputs and outputs. This class includes mathematical functions as well as software functions (see olive:TaskRunnerAction).

This class is not the same as gist:Function, which is about the intended use of some artifact."""^^xsd:string ;
        olive:exampleSubclass olive:TaskRunnerAction;
.

olive:FunctionCall a owl:Class ;
        rdfs:subClassOf olive:Invocation ;
        rdfs:label "function call" ;
        skos:prefLabel "function call" ;
        rdfs:comment """A specific direct invocation of some function with specific arguments"""^^xsd:string ;
        olive:exampleSubclass olive:CustomFunctionCall ;
.

olive:Game a owl:Class ;
	rdfs:label "game"^^xsd:string ;
        skos:prefLabel "game"@en ;
	rdfs:subClassOf olive:CodeOfConduct ;
	rdfs:comment """olive:Game is the class of all codes of conduct that are rules for games. Every time an activity conforms to an instance of game, that activity is an instance of olive:GameEvent."""^^xsd:string ;
.

olive:GameEvent a owl:Class ;
	rdfs:label "game event"^^xsd:string ;
        skos:prefLabel "game"@en ;
	rdfs:subClassOf olive:Competition ;
	rdfs:comment """olive:GameEvent is the class of all competitions played according to rules where there can be a winner or loser (though games can end in other states like ties). Moreover, games are typically events in which the players play for leisure, entertainment, or fun. olive:GameEvent includes playings of board games, sports, and party games.

Note that this is distinct from olive:Game. Every olive:GameEvent must is played according to some normative specification that is an instance of olive:Game. For example, an instance of olive:ChessGame will be played according to the rules of olive:Chess, which is an instance of olive:Game."""^^xsd:string ;
        olive:exampleSubclass "";
        olive:exampleInstance "";
.

olive:Gender-Category a owl:Class ;
	rdfs:label "gender category"^^xsd:string ;
        skos:prefLabel "gender category"@en ;
	rdfs:subClassOf olive:SexAndGenderCategory ;
	rdfs:comment """olive:Gender-Category is the class of all genders that one might identify as. This includes male and female, but note that it is distinct from the notion of sex (see olive:Sex-Category). One's assigned sex may (and often does) differ from their identified gender, even if we use, say, the term 'female' to refer to both the female sex and the female gender."""^^xsd:string ;
        olive:exampleInstance olive:Female-Gender, olive:Male-Gender ;
.

olive:GenderExpression-Category a owl:Class ;
	rdfs:label "GenderExpression-category"^^xsd:string ;
        skos:prefLabel "gender expression category"@en ;
	rdfs:subClassOf olive:SexAndGenderCategory ;
	rdfs:comment """olive:GenderExpression-Category is the class of all gender expressions. The two traditional 'extremes' are masculine and feminine, though it is unclear what the best conception of the range of possible values is. Rather than taking such a stand in the ontology, we will add in new values as they become relevant. It's possible, indeed probable, that this dimension of the ontology is never needed for a business case, but we want to have an ontology that has the space for the nuanced ways that one might discuss sex and gender, and it feels impoverished to just have identification (see olive:Gender-Category) without also expression."""^^xsd:string ;
        olive:exampleInstance olive:Feminine, olive:Masculine ;
.

olive:GeographicPoint a owl:Class ;
	rdfs:subClassOf olive:Region ;
	rdfs:label "geographic point"^^xsd:string ;
	skos:prefLabel "location on the Earth's surface"@en ;
	rdfs:comment "An individual point on the Earth's surface, identified by latitude, longitude and altitude. If altitude is missing, it is assumed to be at the Earth's surface.  However, altitude is measured from sea level.  these points are to the WGS-84 coordinate system using the GPS decimal lat/long"^^xsd:string ,
		"NOTE: Assume coordinate system used by Google (WGS 84 Web Mercator)."^^xsd:string
		;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:disjointWith
		olive:IntellectualProperty ,
		olive:Intention ,
		olive:Language ,
		olive:Magnitude ,
		olive:Organization ,
		olive:PhysicalObject ,
		olive:PhysicalSubstance ,
		olive:TimeInstant ,
		olive:UnitOfMeasure
		;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			[
				a owl:Restriction ;
				owl:onProperty olive:hasAltitude ;
				owl:someValuesFrom olive:Distance ;
			]
			[
				a owl:Restriction ;
				owl:onProperty olive:latitude ;
				owl:someValuesFrom xsd:double ;
			]
			[
				a owl:Restriction ;
				owl:onProperty olive:longitude ;
				owl:someValuesFrom xsd:double ;
			]
		) ;
	] ;
	olive:formerName "gist:GeoPoint"^^xsd:string;
.

olive:Government-Country a owl:Class ;
	rdfs:label "country government"^^xsd:string ;
	skos:prefLabel "government"@en ;
	rdfs:comment "The geopolitical body that governs a geopolitical region recognized as a country."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:GovernmentOrganization
			[
				a owl:Restriction ;
				owl:onProperty olive:governs ;
				owl:someValuesFrom olive:Region ;
			]
			[
				a owl:Restriction ;
				owl:onProperty [owl:inverseOf olive:recognizes] ;
				owl:someValuesFrom olive:Organization ;
			]
		) ;
	] ;
	olive:formerName "gist:CountryGovernment"^^xsd:string;
.

olive:GovernmentOrganization a owl:Class ;
	rdfs:label "government organization"^^xsd:string ;
	skos:prefLabel "government"@en ;
	rdfs:comment
		"An organization established either by fiat (as a conquering army overtakes a land and declares a government) or by delegation from a fiat government, such as a state or local government or a specific agency. Differs from a corporation in that it cannot be owned."^^xsd:string ,
		"EXAMPLES: The State of Washington Office of Financial Management; the Food and Drug Administration; the Scottish Parliament."^^xsd:string ,
		"NOTE: Establishment by a CountryGovernment may be indirect via local, regional, or national GovernmentOrganization(s) that ultimately are recognized by a CountryGovernment."^^xsd:string
		;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:Organization
			[
				a owl:Restriction ;
				owl:onProperty [owl:inverseOf olive:recognizes] ;
				owl:someValuesFrom olive:Government-Country ;
			]
		) ;
	] ;
	olive:formerName "gist:GovernmentOrganization"^^xsd:string;
.

olive:GroupPurchasingOrganization a owl:Class ;
        rdfs:subClassOf olive:Organization ;
        rdfs:label "group purhasing organization"^^xsd:string;
        skos:prefLabel "group purchasing organization"@en ;
	skos:altLabel "GPO"@en ;
        rdfs:comment """A group purchasing organization (GPO) is an entity that helps healthcare providers — such as hospitals, nursing homes and home health agencies — realize savings and efficiencies by aggregating purchasing volume and using that leverage to negotiate discounts with manufacturers, distributors and other vendors."""^^xsd:string ;
.

olive:Group a owl:Class ;
	rdfs:label "group"^^xsd:string ;
	rdfs:subClassOf olive:Collection ;
	skos:prefLabel "group"@en ;
	rdfs:comment "A collection people. The group may or may not also be an instance of olive:Organization.  Many organizations consist of groups of people, but that is not a defining characteristic. As with any group, this is defined extensionally rather than intensionally."^^xsd:string ;
	owl:equivalentClass [a owl:Restriction ;
			     owl:onProperty olive:hasMember ;
			     owl:allValuesFrom olive:Person ;];
	olive:formerName "gist:Group"^^xsd:string;
.

olive:GUI a owl:Class ;
        rdfs:subClassOf olive:SoftwareInterface ;
        rdfs:label "GUI"^^xsd:string;
        skos:prefLabel "GUI"@en ;
	skos:altLabel "graphical user interface"@en ;
        rdfs:comment """A visual component via which a user may interact with a software application."""^^xsd:string ;
.

olive:Gynecologist a owl:Class ;
	rdfs:label "gynecologist"^^xsd:string ;
        skos:prefLabel "gynecologist"@en ;
	rdfs:subClassOf olive:Doctor ;
	rdfs:comment """olive:Gynecologist is the class of all gynecologists."""^^xsd:string ;
.

olive:HCPCSCode a owl:Class ;
	rdfs:label "HCPCS code"^^xsd:string ;
        skos:prefLabel "HCPCS code"@en ;
	skos:altLabel "healthcare common procedure coding system code"@en ;
	rdfs:subClassOf olive:ServiceCodeCategory ;
	rdfs:comment """olive:HCPCSCode is the class of all HCPCS codes. Each code should be connected with the class of events that it signifies, as well as the descriptions associated with said code."""^^xsd:string ;
.

olive:HealthcareSystem a owl:Class ;
        rdfs:subClassOf olive:MedicalCareOrganization, olive:System ;
        rdfs:label "healthcare system"^^xsd:string;
        skos:prefLabel "healthcare system"@en, "health system"@en ;
        rdfs:comment """A healthcare system is an organization that consists of either at least one hospital plus at least one group of physicians or more than one group of physicians."""^^xsd:string ;
.

olive:HealthCondition a owl:Class ;
	rdfs:label "health condition"^^xsd:string ;
        skos:prefLabel "health condition"@en ;
	rdfs:subClassOf olive:State-Situation ;
	rdfs:comment """olive:HealthCondition is the class of all diseases, disorders, injuries, and other related health conditions. Paradigm examples include twisted ankles, diabetes, allergies to latex, and ADHD. Individual persons can have these conditions (see olive:hasCondition). The conditions might be treated, or have symptoms. Certain physicians may specialize in some of these conditions (e.g. an oncologist specializes in cancer; see olive:Oncologist).

This class is meant to emcompass more or less the same subject matter that is mapped by the ICD."""^^xsd:string ;
     	rdfs:seeAlso "https://www.who.int/standards/classifications/classification-of-diseases"^^xsd:string ;
     	olive:exampleSubclass olive:Injury, olive:Allergy ;
        olive:exampleInstance "ex:MyTwistedAnkle"^^xsd:string ;
.

olive:HomeCareEvent a owl:Class ;
	rdfs:label "home care event"^^xsd:string ;
        skos:prefLabel "home care event"@en ;
	rdfs:subClassOf olive:MedicalCareEvent ;
	rdfs:comment """olive:HomeCareEvent is the class of all events in which a person receives medical care at home. The care provider need not be, and usually is not, a medical care professional. This class of events will typically be used to document how a patient has historically been treating some condition, or as a disposition (see olive:patientDischargedTo) for some other medical care event."""^^xsd:string ;
        olive:exampleInstance ":CaseysHomeCarePostSurgery" ;
.

olive:Hospital a owl:Class ;
        rdfs:subClassOf olive:MedicalCareOrganization ;
        rdfs:label "hospital"^^xsd:string;
        skos:prefLabel "hospital"^^xsd:string ;
        rdfs:comment """olive:Hospital is a subclass of olive:Organization and olive:MedicalCareProvider where each instance is a hospital.

Note that this class refers to the organization, not the building. When you are 'at the hospital', you are at the building that is the headquarters for a hospital organization. Conflating a building and an organization can lead to confusion."""^^xsd:string ;
        olive:mapsTo "Hospital" ;
        olive:uriTemplate [
                olive:uniqueText "olive:Hospital/ribbonUuid=" ;
                olive:uriUsesProperty olive:ribbonUuid ;
                olive:note "Applicable when importing data from the RibbonHealth API"^^xsd:string ;
                ];
.

olive:Hospital-Childrens a owl:Class ;
        rdfs:subClassOf olive:Hospital ;
        rdfs:label "childrens hospital"^^xsd:string;
        skos:prefLabel "children's hospital"@en ;
        rdfs:comment """Children's hospitals are a instances of olive:Hospital that provides services to children, persons up to 18 years old (sometimes 21 years old in the United States)."""^^xsd:string ;
.

olive:Hospital-CriticalAccess a owl:Class ;
        rdfs:subClassOf olive:Hospital ;
        rdfs:label "critical access hospital"^^xsd:string;
        skos:prefLabel "critical access hospital"@en ;
        rdfs:comment """Critical access hospitals are US hospitals that receive federal funding as part of a 1997 Balanced Budget Act provision to provide medical access to rural areas that would otherwise be too far from emergency medical care."""^^xsd:string ;
.

olive:Hospital-Psychiatric a owl:Class ;
        rdfs:subClassOf olive:Hospital ;
        rdfs:label "psychiatric hospital"^^xsd:string;
        skos:prefLabel "psychiatric hospital"@en ;
        rdfs:comment """Psychiatric hospitals are olive:Hospitals that focus on providing psychiatric care."""^^xsd:string ;
.

olive:Hospital-VA a owl:Class ;
        rdfs:subClassOf olive:Hospital ;
        rdfs:label "VA hospital"^^xsd:string;
        skos:prefLabel "VA medical center"@en ;
	skos:altLabel "veteran's affairs hospital"@en, "VA"@en,  "VAMC"@en ;
        rdfs:comment """VA hospitals are run by the United States Department of Veterans Affairs."""^^xsd:string ;
.

olive:HospitalSystem a owl:Class ;
        rdfs:subClassOf olive:MedicalCareOrganization, olive:System ;
        rdfs:label "hospital system"^^xsd:string;
        skos:prefLabel "hospital system"@en, "health system"@en ;
        rdfs:comment """A hospital system is an organization that consists of more than one hospital that function together as part of a system."""^^xsd:string ;
	owl:disjointWith olive:HealthcareSystem ;
.

olive:HumanActivityType a owl:Class ;
	olive:instanceOf olive:Class-SecondOrder ;
	rdfs:subClassOf olive:Facet ;
	rdfs:label "human activity type"^^xsd:string ;
        skos:prefLabel "type of human activity"@en ;
	olive:instancesAreSubclassesOf olive:Event ;
	olive:facetingOfClass [a owl:Restriction ;
			    			owl:onProperty olive:doneByAgent ;
							owl:someValuesFrom olive:Agent ;] ;
	rdfs:comment """olive:HumanActivityType is the class of all classes of events all instances of which are activities essentially performed by agents. Despite the 'human' in the name, the restriction is that every such activity must have an agent performer. ('human activity' is a more intuitive naming convention than 'agential activity')."""^^xsd:string ;
        olive:exampleSubclass olive:PhysicalActivityType ;
.

olive:ID a owl:Class ;
	rdfs:subClassOf olive:Content, olive:NonphysicalArtifact ;
	rdfs:label "ID"^^xsd:string ;
	skos:prefLabel "identifier"@en ;
	rdfs:comment "EXAMPLE: e.g. SSN for a person, serial number for a product, employee id"^^xsd:string ,
		"EXAMPLES: SSN for a person; serial number for a product; employee ID."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:Content
			[
				a owl:Restriction ;
				owl:onProperty [owl:inverseOf olive:createsID] ;
				owl:someValuesFrom [
					a owl:Class ;
					owl:unionOf (
						olive:IntellectualProperty
						olive:Organization
						olive:Person
					) ;
				] ;
			]
			[
				a owl:Restriction ;
				owl:onProperty olive:uniqueText ;
				owl:someValuesFrom xsd:string ;
			]
		) ;
	] ;
	olive:uriTemplate     [olive:uniqueText "http://data.oliveai.com/ontology/ID/uniqueText/sha1=";
						  olive:note "This template uses the sha1 function to hash the following pattern: for ID, concat(CREATOR-NAME,\"-\",IDENTIFYING-TEXT), where (ID [owl:inverseOf olive:createsID]/olive:name CREATOR-NAME) and (ID olive:identifyingText IDENTIFYING-TEXT). This pattern should be encoded as olive:uniqueText on the ID in question when it is used.";
						  olive:uriTemplateUsesProperty olive:createsID, olive:name, olive:identifyingText]
.

olive:ImplementationSuccessOwner a owl:Class ;
	rdfs:label "implementation success owner"^^xsd:string ;
	skos:altLabel "ISO"@en ;
        skos:prefLabel "implementation success owner"@en ;
	rdfs:subClassOf olive:Professional ;
	rdfs:comment """olive:ImplementationSuccessOwner, as per the latest Workable job description: 'you will lead and manage our SaaS and AI implementations with enterprise healthcare organizations and are the primary point of contact for our customers during the implementation process.'"""^^xsd:string ;
.

olive:Injury a owl:Class ;
	rdfs:label "injury"^^xsd:string ;
        skos:prefLabel "injury"@en ;
	rdfs:subClassOf olive:HealthCondition ;
	rdfs:comment """olive:Injury is the class of all injuries. Note that the injury is different from the injured thing. For example, when I twist my ankle, :MyAnkleInjury is not identical to :MyAnkle (which is injured)."""^^xsd:string ;
        olive:exampleInstance "ex:MyTwistedAnkle"^^xsd:string ;
.

olive:IntellectualProperty a owl:Class ;
	rdfs:subClassOf olive:NonphysicalArtifact ;
	owl:equivalentClass [a owl:Restriction ;
						owl:onProperty olive:intellectualPropertyOf ;
						owl:someValuesFrom olive:Agent] ;
	rdfs:label "intellectual property"^^xsd:string ;
	skos:prefLabel "intellectual property"@en ;
	skos:altLabel "IP"@en ;
	rdfs:comment
		"A work, invention or concept, independent of its being expressed in text, audio, video, image, or live performance.  IP can also be tacit knowledge, know-how, or skill. Also includes Brands."^^xsd:string ,
		"EXAMPLES: ?The Old Man and The Sea?; the Page Rank algorithm; Coca Cola"^^xsd:string ,
		"NOTE:  For literature this could be called the ?Work?, except that ?work? is a highly overloaded term (expenditure of energy, resource consumption, art).  Often the first expression precedes our recognition of the IP, but subsequent expressions are known to be derivatives of the IP, even if they are expression-to-expression translations (or copies)."^^xsd:string
		;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:disjointWith
		olive:Intention ,
		olive:Magnitude ,
		olive:Organization ,
		olive:PhysicalObject ,
		olive:PhysicalSubstance ,
		olive:TimeInstant ,
		olive:UnitOfMeasure
		;
	olive:formerName "gist:IntellectualProperty"^^xsd:string;
.

olive:Intention a owl:Class ;
	rdfs:label "intention"^^xsd:string ;
	skos:prefLabel "intention"@en ;
	rdfs:comment """olive:Intention is the class of relationships between a thing (often a person or an artifact) and some state of affairs. Things like intentions, and functions, and desires have some very simple and intuitive examples, but are difficult to give a general treatment. This comment will start with the simple and then move to more nuances.

Take some simple examples: I have a desire to eat a hamburger. This hammer has the function of hammering nails. Olive AI has a goal of removing $1 trillion from healthcare expenses in the US. Here we have three things: a desire, a function, and a goal. And we have three actors: myself, a hammer, and Olive AI. And each of these things is related to some possible state of affairs: one where I eat a burger, one where the hammer is hitting some nails, and one where Olive AI has drastically reduced healthcare costs in the US.

We also say that a bird's beak has the function of, say, penetrating the bark of some tree. This is so even if you don't believe there is some god who has intended it as such. If random chance, or natural selection, or whatever is the causal force that has led to a situation where a beak is well-suited for some task, it is still appropriate to use olive:Intention or a subclass to express this.

In some ways, as natural as it is to say that we have a desire or function or goal, it is very weird to think of these as entities in and of themselves. Compare to the similar class olive:Magnitude. It's sensible to say that a baseball bat has a length and a weight, but it's weird to think that the bat and, say, 45 inches, are mediated by a length. The measure just *is* the length, and the measure directly reflects a part of the bat itself. Similarly, to say that I have a desire feels more like some direct relationship between myself and the state of affairs in which I eat a burger, and not that I stand in some relation to the desire, and that desire stands in some relation to the world.

The above discussion just highlights that the representation in triples may not reflect the actual structure of reality. Or, our language might not. Or neither. In practice, intentions are used as intermediaries between things and states of the world which are intended/desired/etc."""^^xsd:string ;
        olive:exampleSubclass gist:Desire, gist:Goal ;
		olive:formerName "gist:Intention"^^xsd:string;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:disjointWith
		olive:Magnitude ,
		olive:Organization ,
		olive:PhysicalObject ,
		olive:PhysicalSubstance ,
		olive:TimeInstant ,
		olive:UnitOfMeasure
		;
.

olive:Invocation a owl:Class ;
        rdfs:subClassOf olive:Event ;
        rdfs:label "invocation"^^xsd:string;
        skos:prefLabel "invocation"@en ;
	skos:altLabel "execution"@en ;
        rdfs:comment """Every invocation is an event in which some plan/algorithm/function is carried out (see olive:invokes). So, if we define some function F such that F(x) = x^3, then applying that function to some specific value and getting an output, such as F(3) = 27 as a process would be the invocation. For another example, consider an offensive system in basketball, the Triangle. The Triangle is a system that is carried out by many basketball teams in particular plays and games. These events are invocations of that system.

Invocations ought to specify the thing being implemented using olive:invokes (or subproperties)."""^^xsd:string ;
.

olive:Input a owl:Class ;
	rdfs:subClassOf olive:Variable ;
        rdfs:label "input"^^xsd:string ;
        skos:prefLabel "function input"@en ;
        rdfs:comment """Inputs are the arguments that are inputs for a function (see olive:Function). By definition, every input in the domain of a function should be mapped to at least one output (see olive:Output)."""^^xsd:string ;
.

olive:InsuranceClaim a owl:Class ;
        rdfs:subClassOf olive:Obligation;
        rdfs:label "insurance claim"^^xsd:string;
        skos:prefLabel "insurance claim"^^xsd:string ;
        rdfs:comment """olive:InsuranceClaim is the subclass of olive:Obligation where a policyholder (see olive:hasInsurancePolicy) places a claim against their insurer (see olive:insurerForPolicy). The claim is supported by the agreed upon policy (see olive:InsurancePolicy). The claim will then either be denied, leaving the policyholder with the cost burden, or accepted, in which case the insurer will bear at least some of the financial burden.

Note that the claim is NOT the same as the event in which the covered party incurred a cost (e.g. an instance of olive:MedicalCareEvent). Nor is it the transfer of funds to the provider.

Every claim should be connected (at least) to the relevant policy via olive:policyForClaim. It should also be connected to the event for which compensation is being requested."""^^xsd:string ;
        olive:exampleTriple ":Claim123 a olive:InsuranceClaim; olive:claimForEvent :BillsAppt; [owl:inverseOf olive:policyForClaim] :BillsInsurancePolicy." ;
.

olive:InsuranceClaim-Paid a owl:Class ;
        rdfs:subClassOf olive:InsuranceClaim ;
        rdfs:label "paid insurance claim"^^xsd:string;
        skos:prefLabel "paid claim"@en ;
        rdfs:comment """Paid insurance claims are those where the full contracted amount has been recovered by the provider."""^^xsd:string ;
	owl:disjointWith olive:InsuranceClaim-Underpaid ;
	owl:equivalentClass [a owl:Restriction ;
			     owl:onProperty olive:hasStatus ;
	 		     owl:hasValue olive:PaidClaim ;] ;
.

olive:InsuranceClaim-Underpaid a owl:Class ;
        rdfs:subClassOf olive:InsuranceClaim ;
        rdfs:label "underpaid insurance claim"^^xsd:string;
        skos:prefLabel "underpaid claim"@en ;
	skos:altLabel "underpayment"@en ;
        rdfs:comment """Underpayments are insurance claims that, for whatever reason, have not had their allowed amount paid in a reasonable period of time. Obviously this class is very important to providers, as they want to minimize the number of claims that are not reimbursed at the contractually agreed upon amounts."""^^xsd:string ;
.

olive:InsuranceClaimType a owl:Class ;
        rdfs:subClassOf olive:Category;
        rdfs:label "insurance claim type"^^xsd:string;
        skos:prefLabel "types of insurance claims"@en ;
        rdfs:comment """Instances of this subclass of category are tags that are applied to instances of olive:InsuranceClaim.

Notable subclasses include RARC and CARC, which provide comments on a given claim's features."""^^xsd:string ;
        olive:exampleSubclass olive:RARC, olive:CARC;
.

olive:InsuranceCompany a owl:Class ;
        rdfs:subClassOf olive:Organization;
        rdfs:label "insurance company"^^xsd:string;
        skos:prefLabel "insurance company"^^xsd:string ;
	skos:altLabel "payor"^^xsd:string ;
        rdfs:comment """olive:InsuranceCompany is a subclass of olive:Organization where each instance is an insurance company. This includes health, home, life, and so on.

Importantly, insurance companies are often the payors for medical care events (see olive:MedicalCareEvent)."""^^xsd:string ;
        olive:uriTemplate [
                olive:uniqueText "olive:InsuranceCompany/ribbonName=" ;
                olive:uriUsesProperty olive:ribbonName ;
                olive:note "Applicable when importing data from the RibbonHealth API"^^xsd:string ;
                ] ;
        .

olive:InsurancePlan a owl:Class ;
	rdfs:label "insurance plan"^^xsd:string ;
        skos:prefLabel "insurance plan"@en ;
	rdfs:subClassOf olive:Commitment ;
	rdfs:comment """Insurance plans are the predecessors to insurance policies in the sense that plans are broader guidelines that policies (are intended to) follow. Employers pick/craft a plan, and then there are are individual policies that employees receive, for instance."""^^xsd:string ;
        olive:exampleInstance "ex:OlivesCignaPlan";
        olive:uriTemplate [
                olive:uniqueText "olive:InsurancePlan/ribbonUuid=" ;
                olive:uriUsesProperty olive:ribbonUuid ;
                olive:note "Applicable when importing data from the RibbonHealth API"^^xsd:string ;
                ] ;
.

olive:InsurancePlan-EPO a owl:Class ;
	rdfs:label "EPO insurance plan"^^xsd:string ;
        skos:prefLabel "EPO"@en ;
	skos:altLabel "exclusive provider organization insurance plan"@en ;
	rdfs:subClassOf olive:InsurancePlan ;
	rdfs:comment """olive:InsurancePlan-EPO is the class of all exclusive provider organization plans."""^^xsd:string ;
	olive:mapsTo "EPO" ;
.

olive:InsurancePlan-HDHP a owl:Class ;
	rdfs:label "HDHP insurance plan"^^xsd:string ;
        skos:prefLabel "HDHP"@en ;
	skos:altLabel "high deductible health plan"@en ;
	rdfs:subClassOf olive:InsurancePlan ;
	rdfs:comment """olive:InsurancePlan-HDHP is the class of all high deductible health plans."""^^xsd:string ;
	olive:mapsTo "HDHP" ;
.

olive:InsurancePlan-HMO a owl:Class ;
	rdfs:label "HMO insurance plan"^^xsd:string ;
        skos:prefLabel "HMO"@en ;
	skos:altLabel "health maintenance organization insurance plan"@en ;
	rdfs:subClassOf olive:InsurancePlan ;
	rdfs:comment """olive:InsurancePlan-HMO is the class of all health maintenance organziation plans. These have lower premiums than, say, PPOs, but they do this by trading costs for flexibility in provider choice for members."""^^xsd:string ;
	olive:mapsTo "HMO" ;
.

olive:InsurancePlan-POS a owl:Class ;
	rdfs:label "POS insurance plan"^^xsd:string ;
        skos:prefLabel "POS"@en ;
	skos:altLabel "point of service plan"@en ;
	rdfs:subClassOf olive:InsurancePlan ;
	rdfs:comment """olive:InsurancePlan-POS is the class of all point of service plans."""^^xsd:string ;
	olive:mapsTo "POS" ;
.

olive:InsurancePlan-PPO a owl:Class ;
	rdfs:label "PPO insurance plan"^^xsd:string ;
        skos:prefLabel "PPO"@en ;
	skos:altLabel "preferred provider plan"@en ;
	rdfs:subClassOf olive:InsurancePlan ;
	rdfs:comment """olive:InsurancePlan-PPO is the class of all preferred provider insurance plans. The premiums of PPOs are usually much higher than those of HMOs and HDHPs, but they aim to make up for this in flexibility in terms of provider selection for policyholders."""^^xsd:string ;
	olive:mapsTo "PPO" ;
.

olive:InsurancePlan-Uninsured a owl:Class ;
	rdfs:label "Uninsured insurance plan"^^xsd:string ;
        skos:prefLabel "Uninsured"@en ;
	skos:altLabel "preferred provider plan"@en ;
	rdfs:subClassOf olive:InsurancePlan ;
	rdfs:comment """olive:InsurancePlan-Uninsured is the class of all 'plans' where the person has to pay their own way. For purposes of merging with other ontologies, it was expedient to make this a subclass of olive:InsurancePlan, though I certainly sympathize with others who might prefer to not call this class an insurance plan at all. Still, folks who are uninsured or self-insured can be said to be normatively bound to pay their own way, and as such this serves much the same purpose as, say, a PPO plan."""^^xsd:string ;
.

olive:InsurancePolicy a owl:Class ;
        rdfs:subClassOf olive:Contract ;
        rdfs:label "insurance policy"^^xsd:string;
        skos:prefLabel "insurance policy"^^xsd:string ;
        rdfs:comment """olive:InsurancePolicy is the subclass of olive:Contract between a policyholder (see olive:hasInsurancePolicy) and an insurance company (see olive:InsuranceCompany and olive:insurerForPolicy), where the policyholder distributes some risk of payment for qualifying health events to the insurance compan. Coverage usually includes doctor's visits, prescriptions, or consultations."""^^xsd:string ;
        olive:exampleTriple ":Bob :hasInsurancePolicy [a olive:InsurancePolicy; olive:identifiedBy [olive:uniqueText \"Policy ABC123\"^^xsd:string]]" ;
.

olive:InsurancePortal a owl:Class ;
	rdfs:label "insurance portal"^^xsd:string ;
        skos:prefLabel "insuranceportal"@en ;
	rdfs:subClassOf olive:NonphysicalArtifact ;
	rdfs:comment """olive:InsurancePortal is the class of all insurance portals."""^^xsd:string ;
.

olive:Internship a owl:Class ;
	rdfs:label "internship"^^xsd:string ;
        skos:prefLabel "internship"@en ;
	rdfs:subClassOf olive:Employment ;
	rdfs:comment """olive:Internship is the class of all internships. Internships sit somewhere in between traditional employment and schooling. They last for a relatively short period of time, and the intern is expected to receive less (or no) pay during this time but receive beneficial instruction from the employer."""^^xsd:string ;
	olive:mapsTo "Internship" ;
        .

olive:KeyValuePair a owl:Class ;
        rdfs:subClassOf rdf:List;
        rdfs:label "key value pair"^^xsd:string;
        skos:prefLabel "key value pair"^^xsd:string ;
        rdfs:comment """Each instance of olive:KeyValuePair is a two-item list where the first item is a key and the second item is a value. Often these key/value pairs are stand-ins for two-thirds of a triple."""^^xsd:string ;
.

olive:KnowledgeGraph a owl:Class ;
	rdfs:label "knowledge graph"^^xsd:string ;
        skos:prefLabel "knowledge graph"@en ;
	rdfs:subClassOf olive:Network, olive:Dataset ;
	rdfs:comment """olive:KnowledgeGraph is the class of all knowlege graphs, which are sets of n-tuples (usually triples) that model data. This very assertion is part of a knowledge graph."""^^xsd:string ;
	olive:instanceOf olive:StructuredDataType ;
.

olive:KnowledgeGraph-ReadOnly a owl:Class ;
	rdfs:label "read only knowledge graph"^^xsd:string ;
        skos:prefLabel "read only knowledge graph"@en ;
	owl:equivalentClass [owl:intersectionOf ( olive:KnowledgeGraph   [a owl:Restriction ;
			     		     	 owl:onProperty olive:categorizedBy ;
			     			 owl:hasValue olive:ReadOnly ;])] ;
	rdfs:comment """olive:KnowledgeGraph-ReadOnly is the class of all knowledge graphs that are read only."""^^xsd:string ;
	owl:disjointWith olive:VolatileGraph ;
.

olive:Language a owl:Class ;
	rdfs:label "language"^^xsd:string ;
	skos:prefLabel "language"@en ;
	rdfs:subClassOf olive:NonphysicalArtifact ;
	rdfs:comment "This is the collection of recognized, organized set of symbols and grammar. It includes natural languages like Greek, Latin, English, Spanish, and French. It also includes programming languages, such as Lisp and C++."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:disjointWith
		olive:Magnitude ,
		olive:Organization ,
		olive:PhysicalObject ,
		olive:PhysicalSubstance ,
		olive:TimeInstant ,
		olive:UnitOfMeasure
		;
	olive:formerName "gist:Language"^^xsd:string;
.

olive:LetterGrade a owl:Class ;
        rdfs:subClassOf olive:QualitativeAssessment ;
        rdfs:label "letter grade"^^xsd:string;
        skos:prefLabel "letter grade"@en ;
	skos:altLabel "grade"@en ;
        rdfs:comment """Letter grades are things like A, B, C, D, and F. These will be the instances of this class."""^^xsd:string ;
.

olive:License-Content a owl:Class ;
    rdfs:subClassOf olive:Certification ;
    rdfs:label "license"^^xsd:string;
    skos:prefLabel "license"@en ;
    rdfs:comment """The class of all licenses. A license is a kind of certification that constitutes an official permission to do, use, or own something. Instances of this class are not the concrete documents that serve to verify the possession of such a license, but instead are the abstract licenses themselves. So, the driver's license card I hold in my hand would not be an instance of this class, but permission for me to operate a motor vehicle attested to by that document would be an instance of this class."""^^xsd:string ;
.

olive:LineItem a owl:Class ;
        rdfs:subClassOf olive:Content ;
        rdfs:label "line item"^^xsd:string;
        skos:prefLabel "line item"^^xsd:string ;
        rdfs:comment """Every instance of olive:LineItem is a part of some olive:Commitment and may itself be an instance of olive:Commitment (although it need not be). Line items are of accounting interest, and are typically related to whether they are paid, their amounts, identifying codes, and so on."""^^xsd:string ;
.

rdf:List a owl:Class ;
        rdfs:subClassOf olive:Content, olive:OrderedCollection ;
        rdfs:label "list"^^xsd:string;
        skos:prefLabel "list"^^xsd:string ;
        rdfs:comment """A list is a data structure that contains an ordered list of members."""^^xsd:string ;
        olive:exampleSubclass olive:KeyValuePair;
.

olive:LivingThing a owl:Class ;
	rdfs:label "living thing"^^xsd:string ;
	rdfs:subClassOf olive:PhysicalObject ;
	skos:prefLabel "living thing"@en ;
	olive:formerName "gist:LivingThing"^^xsd:string;
	rdfs:comment """This is the class of all things that have been alive, including trees, mushrooms, bacteria, persons, and kittens.

One might worry about whether to classify Beethoven or any other such dead living thing as still being a living thing. This is worth considering, but it is not unique to living things. All things that can cease to exist, including living things and statues and sweaters,  may only belong to their sortal category for a limited period of time. For this reason, once a thing comes to exist (at it's creation time, see olive:dateOfBirth, e.g.), it is a living thing eternally. Once the thing dies (see olive:dateOfDeath), that thing is even more particularly an instance of olive:DeceasedThing.

Note that asserting that olive:Person to be subclass of olive:LivingThing would entail that robots/computers could not be persons unless they were also classified as living things. This does not seem problematic to me, but I expect some might find it controversial."""^^xsd:string ;
.

olive:LongTermCareFacility a owl:Class ;
        rdfs:subClassOf olive:MedicalCareOrganization ;
        rdfs:label "long term care facility"^^xsd:string;
        skos:prefLabel "long term care facility"@en ;
        rdfs:comment """Long term care facilities are healthcare organizations that focus on delivering longterm care. This includes nursing homes, hospice care, and some (but not all) psychiatric facilities.

Note that while the name ends in 'facility', this is about the organization and not the building/grounds for the organization."""^^xsd:string ;
        olive:exampleSubclass olive:NursingHome ;
.

olive:LuminousIntensity
	a owl:Class ;
	rdfs:label "luminous intensity"^^xsd:string ;
	skos:prefLabel "brightness"@en ;
	rdfs:comment "A measure of the wavelength-weighted power emitted by a light source in a particular direction per unit solid angle.  This is based on the luminosity function, a standardized model of the sensitivity of the human eye."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:Magnitude
			[
				a owl:Restriction ;
				owl:onProperty olive:hasUoM ;
				owl:someValuesFrom olive:LuminousIntensityUnit ;
			]
		) ;
	] ;
	olive:formerName "gist:LuminousIntensity"^^xsd:string;
.

olive:LuminousIntensityUnit a owl:Class ;
	rdfs:label "luminous intensity unit"^^xsd:string ;
	skos:prefLabel "luminous intensity unit"@en ;
	rdfs:comment "The measure of brightness. The SI unit is the candela."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:disjointWith
		olive:MassUnit ,
		olive:MoleUnit ,
		olive:TemperatureUnit
		;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:SimpleUnit
			[
				a owl:Restriction ;
				owl:onProperty olive:hasBaseUnit ;
				owl:hasValue olive:_candela ;
			]
		) ;
	] ;
	olive:formerName "gist:LuminousIntensityUnit"^^xsd:string;
.

olive:Magnitude	a owl:Class ;
	rdfs:label "magnitude"^^xsd:string ;
	skos:prefLabel "magnitude"@en ;
	rdfs:subClassOf olive:Attribute ;
        rdfs:comment """Every member of olive:Magnitude is a quantitatively measurable feature of some physical thing. For example, a given object may have a weight, length, and temperature. Each of these could be magnitudes (e.g. [:_Weight_WeightOfRock1 rdfs:type olive:Magnitude]). Rarely should a given magnitude be directly asserted to be a magnitude. Instead, one should use the appropriate subclasses, such as olive:Mass, olive:Distance, and olive:Temperature. The count of something is also a magnitude, for instance, there being seventeen people in a crowd or three quarters in my pocket.

The olive:Magnitude approach to representation usually requires at least three asseertions to be made. First, one connects the object in question to their magnitude. Then, one specifies the numeric component of  the magnitude. Finally, one specifies the units. For example, suppose we want to specify that the Eiffel Tower is 300m tall. We can do this with the following triples: 
   [:EiffelTower olive:hasMagnitude :_Extent_ETHeight], 
   [:_Extent_ETHeight olive:decimalValue \"300\"^^xsd:double], and 
   [:_Extent_ETHeight olive:hasUoM olive:_meter].

Notice that there are alternative approaches if you want to directly connect an object to some of its measures. One could use custom data types as a range and create a property to take you directly from the thing in question to its weight/length/temperature/etc. For example: [:EiffelTower ex:hasHeight \"\"^^dataEx:meter]. Ideally, such properties should be connected to the equivalent representation using olive:Magnitude (or subclass), and thus either representation can be derived from the other. Decisions about which representation to use initially or at query time may best be made in terms of practical considerations: flexibility, speed of queries, naturalness of representation for users, and so on.

So, why bother having magnitudes at all if we could just use properties to skip straight to the important thing (the number/unit pair)? The answer is that you might want to say more about a magnitdue than just its amount. We might also want to specify the degree of precision (see olive:hasPrecision). Or we might want to note that two different magnitudes are equivalent to each other. This representation approach gives you a great deal of flexibility.

Note that olive:Magnitude is a subclass of olive:Attribute, but it is neither a subclass of olive:Category nor disjoint with it. This is to allow for instances of olive:Magnitude to be \"particularized\" (e.g. :TheHeightOfTheEiffelTower, where this may have some specific associated quantity measure and quantity unit but is not identical to the combination of the two) or \"universal\" (e.g. 200 meters as a universal quantity)."""^^xsd:string ;
        rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
        olive:exampleSubclass olive:Temperature, olive:Distance, olive:Mass ;
	olive:exampleTriple ":EiffelTower olive:hasMagnitude :_Extent_ETHeight"^^xsd:string ;
	owl:disjointWith olive:Organization , olive:PhysicalObject , olive:PhysicalSubstance , olive:TimeInstant , olive:UnitOfMeasure ;
	olive:formerName "gist:Magnitude"^^xsd:string;
.

olive:Male a owl:Class ;
        rdfs:subClassOf olive:LivingThing ;
        rdfs:label "male"^^xsd:string;
        skos:prefLabel "male"@en ;
        rdfs:comment """Male living things are of the sex that produces small, typically motile gametes, especially spermatozoa, with which a female may be fertilized or inseminated to produce offspring."""^^xsd:string ;
	owl:equivalentClass [a owl:Restriction ;
			     owl:onProperty olive:assignedSex ;
			     owl:hasValue olive:Male-Sex ;] ;
.

olive:MappingEvent a owl:Class ;
    rdfs:subClassOf olive:Invocation ;
    rdfs:label "mapping event"^^xsd:string;
    skos:prefLabel "mapping event"^^xsd:string ;
    rdfs:comment """Every instance of olive:MappingEvent is an event in which some content (see olive:Content) is mapped to some other content (see olive:Content) using some defined mapping algorithm. For example, a medical dataset (input) might be mapped into the Olive ontology via a construct query (the mapping algorithm), thus resulting in a set of triples (output).
	
	This collection is designed to be especially useful in logging mapping failures during some mapping process."""^^xsd:string ;
.

olive:MappingStatus a owl:Class ;
        rdfs:subClassOf olive:Category ;
        rdfs:label "mapping status"^^xsd:string;
        skos:prefLabel "mapping status"@en ;
        rdfs:comment """The category of mapping statuses. See the comment on the relation  olive:mappingStatus."""^^xsd:string ;
.

olive:Mass a owl:Class ;
	rdfs:label "mass"^^xsd:string ;
	skos:prefLabel "mass"@en ;
	rdfs:comment "Magnitude of mass. In medical contexts, when we talk about a 'mass' we do mean something that has mass, but in the sense that it is a foreign or unwanted body in some tissue, which is differnt from olive:Mass."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:Magnitude
			[
				a owl:Restriction ;
				owl:onProperty olive:hasUoM ;
				owl:someValuesFrom olive:MassUnit ;
			]
		) ;
	] ;
	olive:formerName "gist:Mass"^^xsd:string;
.

olive:MassUnit a owl:Class ;
	rdfs:label "mass unit"^^xsd:string ;
	skos:prefLabel "mass unit"@en ;
	rdfs:comment "A unit representing the amount of matter in a particle or object.  The SI unit of mass is the kilogram."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:disjointWith
		olive:MoleUnit ,
		olive:TemperatureUnit
		;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:SimpleUnit
			[
				a owl:Restriction ;
				owl:onProperty olive:hasBaseUnit ;
				owl:hasValue olive:_kilogram ;
			]
		) ;
	] ;
	olive:formerName "gist:MassUnit"^^xsd:string;
.

olive:MeaningfulUseStage a owl:Class ;
        rdfs:subClassOf olive:Certification ;
        rdfs:label "meaningful use stage"^^xsd:string;
        skos:prefLabel "meaningful use stage"@en ;
        rdfs:comment """There are three meaningful use stages, and each one should eventually be a subclass of this class. They are certifications that a EHR service meets various requirements for accessibility, privacy, and efficiency."""^^xsd:string ;
	rdfs:seeAlso "https://www.aanem.org/getmedia/bb9480ae-f5b3-4c64-b55a-55c457d325a8/EHR-and-Meaningful-Use.pdf.aspx"^^xsd:string ;
.

olive:MedicaidIdentifier a owl:Class ;
    rdfs:subClassOf olive:ID ;
    rdfs:label "Medicaid identifier"^^xsd:string;
    skos:prefLabel "Medicaid ID"@en ;
	skos:altLabel "Medicaid number"@en ;
    rdfs:comment """This is the subclass of olive:ID for all Medicaid Identifiers."""^^xsd:string ;
.

olive:MedicalCareEvent a owl:Class ;
        rdfs:subClassOf olive:Event;
        rdfs:label "medical care event"^^xsd:string;
        skos:prefLabel "medical care event"^^xsd:string ;
        rdfs:comment """A subclass of olive:Event, this is the class of all events in which a patient (see olive:Patient) receives some form of medical care. The care is usually administered by a olive:MedicalProfessional. Examples include doctor/dentist/chiropractor/etc. visits, surgeries, consultations with medical professionals regarding medical issues, and medical testing for a particular person. The key is that there be at least one subject of the care event. 

For a counterexample, medical research on, say, some vaccine would not count as a medical care event, even if the output of the research was used for future medical care events. 

This class is intended to be very broad. When possible, use or create a more specific class that will have more details about the type of care event. Surgery will require a surgeon, for example. Or, virtual patient visits will take place over the phone or video chat as opposed to in a medical facility (from the patient's perspective, at least)."""^^xsd:string ;
        olive:exampleTriple ":MyDoctorVisit a olive:MedicalCareEvent; olive:occursAt :MyLocalHospital." ;
	rdfs:subClassOf [a owl:Class; owl:intersectionOf ( [ rdf:type owl:Restriction ;
			   	      			     owl:onProperty olive:eventPatient ;
			  				     owl:someValuesFrom olive:Patient]
							     [ rdf:type owl:Restriction ;
			   	      			     owl:onProperty olive:eventCareProvider ;
			  				     owl:someValuesFrom olive:MedicalProfessional])];
.

olive:MedicalCareEventCohort a owl:Class ;
	rdfs:label "medical care event cohort"^^xsd:string ;
        skos:prefLabel "medical care event cohort"@en ;
	rdfs:subClassOf olive:Cohort ;
	rdfs:comment """olive:MedicalCareEventCohort is the class of all cohorts that are subclasses of olive:MedicalCareEvent."""^^xsd:string ;
	olive:facetingOfClass olive:MedicalCareEvent ;
.

olive:MedicalCareOrganization a owl:Class ;
	rdfs:label "medical care organization"^^xsd:string ;
        skos:prefLabel "medical care organization"@en ;
	rdfs:subClassOf olive:MedicalCareProvider, olive:Organization ;
	rdfs:comment """olive:MedicalCareOrganization is the class of all organizations that essentially provide medical care."""^^xsd:string ;
        olive:uriTemplate [
                olive:uniqueText "olive:MedicalCareOrganization/ribbonUuid=" ;
                olive:uriUsesProperty olive:ribbonUuid ;
                olive:note "Applicable when importing data from the RibbonHealth API"^^xsd:string ;
                ];
.

olive:MedicalCareProvider a owl:Class ;
        rdfs:subClassOf olive:Agent ;
        rdfs:label "medical care provider"^^xsd:string;
        skos:prefLabel "medical care provider"^^xsd:string ;
        rdfs:comment """olive:MedicalCareProvider is the subclass of olive:Agent wherein each individual is involved in directly providing healthcare. Notable examples include hospitals, walk-in clinics, nurses (olive:Nurse), doctors (olive:Doctor).

Health insurance companies (see olive:InsuranceCompany) and healthcare R&D companies are not instances of olive:MedicalCareProvider; though they are involved in the healthcare industry, they are not directly providing medical care to patients. (Exception: if an R&D company provides treatment to patients in the form of medical trials, then it would be a medical care provider. The point is that doing medical research alone is insufficient for membership in this class.)

One of the main uses for this class is to identify agents who are eligible to be paid for medical services by a payer."""^^xsd:string ;
        olive:exampleSubclass olive:Doctor , olive:Hospital ;
	olive:uriTemplate     [olive:uniqueText "http://data.oliveai.com/ontology/MedicalCareProvider/npi=" ;
	                       rdfs:seeAlso "https://www.cms.gov/Outreach-and-Education/Medicare-Learning-Network-MLN/MLNProducts/Downloads/NPI-What-You-Need-To-Know.pdf" ;
			       olive:note "All health care providers (physicians, suppliers, hospitals, and others) may get an NPI." ;
			       olive:note  "An NPI is a unique identification number for covered health care providers, created to improve the efficiency and effectiveness of electronic transmission of health information.";
			       olive:uriTemplateUsesProperty olive:npi ;],
			      [olive:uniqueText "http://data.oliveai.com/ontology/MedicalCareProvider/ssn=";
			      rdfs:seeAlso "https://www.ssa.gov/ssnumber/";
			      rdfs:comment "While npi is the preferred method, you can also identify providers by their SSN.";
      			      olive:uriTemplateUsesProperty olive:ssn ;];
	olive:classIdentifyingProperty olive:npi, olive:ssn ;
.

olive:MedicalEncounter a owl:Class ;
	rdfs:label "medical encounter"^^xsd:string ;
        skos:prefLabel "medical encounter"@en ;
	rdfs:subClassOf olive:MedicalCareEvent ;
	rdfs:comment """olive:MedicalEncounter is a class best understood in juxtaposition to another, olive:EpisodeOfCare. Whereas an episode is a complete narrative for a given condition/illness/procedure, encounters are one-off events that combine to form episodes. An encounter is a temporally contiguous event, whereas episodes are events that can (and almost always) have 'gaps' of time in them."""^^xsd:string ;
.

olive:MedicalEncounter-Elective a owl:Class ;
	rdfs:label "elective medical encounter"^^xsd:string ;
        skos:prefLabel "elective medical encounter"@en ;
	rdfs:subClassOf olive:MedicalEncounter ;
	rdfs:comment """olive:MedicalEncounter-Elective is the class of all medical encounters where the patient elects to be admitted for some procedure."""^^xsd:string ;
	owl:disjointWith olive:MedicalEncounter-Outpatient ;
.

olive:MedicalEncounter-Inpatient a owl:Class ;
	rdfs:label "MedicalEncounter-inpatient"^^xsd:string ;
        skos:prefLabel "inpatient medical encounter"@en ;
	rdfs:subClassOf olive:MedicalEncounter ;
	rdfs:comment """olive:MedicalEncounter-Inpatient is the class of all medical encounters where the patient needs to be admitted to the hospital for an extended period of time, usually at least over night.This class is contrasted with outpatient encounters."""^^xsd:string ;
	owl:disjointWith olive:MedicalEncounter-Outpatient ;
.

olive:MedicalEncounter-Outpatient a owl:Class ;
	rdfs:label "MedicalEncounter-outpatient"^^xsd:string ;
        skos:prefLabel "outpatient medical encounter"@en ;
	rdfs:subClassOf olive:MedicalEncounter ;
	rdfs:comment """olive:MedicalEncounter-Outpatient is the class of all medical encounters where the patient does not need to be admitted to the hospital for an extended period of time. Some outpatient encounters may require admission for a short period (say, for a few hours), but will not require an overnight hospital stay. Other outpatient encounters will not require admission at all. This class is contrasted with inpatient encounters."""^^xsd:string ;
.

olive:MedicalFellowship a owl:Class ;
	rdfs:label "medical fellowship"^^xsd:string ;
        skos:prefLabel "fellowship"@en ;
	rdfs:subClassOf olive:PostGraduateEducation, olive:Employment ;
	rdfs:comment """olive:MedicalFellowship is the class of all medical fellowships, which follow a residency (see olive:MedicalResidency) and result in certifying a physician in a particular specialty."""^^xsd:string ;
	owl:disjointWith olive:MedicalResidency ;
	olive:mapsTo "Fellowship" ;
.

olive:MedicalImplant a owl:Class ;
	rdfs:subClassOf olive:PhysicalArtifact ;
	rdfs:label "medical implant" ;
	skos:prefLabel "medical implant"@en ;
	skos:altLabel  "implant"@en ;
	rdfs:comment """The class of all medical implants.""" ;
	skos:note """This class will likely be deprecated in favor of integrating with a medical device ontology.""" ;
.

olive:MedicalProfessional a owl:Class ;
        rdfs:subClassOf olive:Professional, olive:MedicalCareProvider ;
        rdfs:label "medical professioal"^^xsd:string ;
        skos:prefLabel "medical professional"^^xsd:string ;
        rdfs:comment """olive:MedicalProfessional is a subclass of olive:Person that works in the healthcare or medical field. Notable subclasses include olive:Doctor and olive:Nurse.

There is some ambiguity in whether one becomes a medical professional only i) when they are currently employed in the medical care field, ii) for life after they are employed (e.g. retired doctors are still doctors), or iii) as long as they are qualified to serve in a professional capacity in mediine. This list isn't mutually exclusive or exhaustive, but hopefully it is clear that there is some flexibility in how this term can be used. For most usecases, I do not expect this potential ambiguity will cause problems, and as such the ontological framework to resolve the ambiguity is unlikely to be worth the trouble. But if this assumption proves incorrect, we should be willing to revise and refine this term."""^^xsd:string ;
        olive:exampleSubclass olive:Doctor , olive:Nurse ;
.

olive:MedicalRecordNumber a owl:Class ;
	rdfs:label "medical record number"^^xsd:string ;
        skos:prefLabel "MRN"@en ;
	rdfs:subClassOf olive:ID ;
	rdfs:comment """olive:MedicalRecordNumber is the class of all IDs that are medical record numbers. They are assigned by healthcare providers or hospital systems, and they therefore are not universal. They should be used for all care for a given patient in that system, and therefore should be consistent across appointments, etc."""^^xsd:string ;
.

olive:MedicalResidency a owl:Class ;
	rdfs:label "medical residency"^^xsd:string ;
        skos:prefLabel "residency"@en ;
	rdfs:subClassOf olive:PostGraduateEducation, olive:Employment ;
	rdfs:comment """olive:MedicalResidency is the class of all education and employment events in which 'a qualified physician (one who holds the degree of MD, DO, DPM, MBBS, MBChB) who practices medicine, usually in a hospital or clinic, under the direct or indirect supervision of a senior medical clinician registered in that specialty such as an attending physician or consultant.' (Wikipedia)"""^^xsd:string ;
	rdfs:seeAlso "https://en.wikipedia.org/wiki/Residency_(medicine)" ;
        olive:exampleInstance "Barb's residency at Meriter Hospital" ;
	olive:mapsTo "Residency" ;
.

olive:MedicareIdentifier a owl:Class ;
    rdfs:subClassOf olive:ID ;
    rdfs:label "Medicare identifier"^^xsd:string;
    skos:prefLabel "Medicare ID"@en ;
    skos:altLabel "Medicare number"@en ;
    rdfs:comment """This is the subclass of olive:ID for all Medicare Identifiers."""^^xsd:string ;
.

olive:MedicareOSCARID a owl:Class ;
    rdfs:subClassOf olive:MedicareIdentifier ;
    rdfs:label "Medicare OSCAR ID"^^xsd:string;
    skos:prefLabel "Medicare OSCAR ID"@en ;
	skos:altLabel "Medicare OSCAR number"@en ; skos:altLabel "Medicare OSCAR provider number"@en ;
    rdfs:comment """This is the subclass of olive:MedicareIdentifier for all Medicare OSCAR (online survey certification and reporting system) provider IDs."""^^xsd:string ;
.

olive:MedicareNSCID a owl:Class ;
    rdfs:subClassOf olive:MedicareIdentifier ;
    rdfs:label "Medicare NSC ID"^^xsd:string;
    skos:prefLabel "Medicare NSC ID"@en ;
	skos:altLabel "Medicare NSC number"@en ;
    rdfs:comment """This is the subclass of olive:MedicareIdentifier for all Medicare NSC (National Supplier Clearinghouse) IDs."""^^xsd:string ;
.

olive:MedicarePIN a owl:Class ;
    rdfs:subClassOf olive:MedicareIdentifier ;
    rdfs:label "Medicare PIN"^^xsd:string;
    skos:prefLabel "Medicare PIN"@en ;
	skos:altLabel "Medicare provider identification number (PIN)"@en ; 
    rdfs:comment """This is the subclass of olive:MedicareIdentifier for all Medicare provider IDs."""^^xsd:string ;
.

olive:MedicareUPIN a owl:Class ;
    rdfs:subClassOf olive:MedicareIdentifier ;
    rdfs:label "Medicare UPIN"^^xsd:string;
    skos:prefLabel "Medicare UPIN"@en ;
	skos:altLabel "Medicare unique physician identification number (UPIN)"@en ;
    rdfs:comment """This is the subclass of olive:MedicareIdentifier for all Medicare unique physician identification numbers."""^^xsd:string ;
	rdfs:seeAlso "https://en.wikipedia.org/wiki/Unique_physician_identification_number"^^xsd:string ;
.

olive:MentalHealthCondition a owl:Class ;
	rdfs:label "mental health condition"^^xsd:string ;
        skos:prefLabel "mental health condition"@en ;
	rdfs:subClassOf olive:MentalState, olive:HealthCondition ;
	rdfs:comment """olive:MentalHealthCondition is the class of all health conditions and mental states; they typically negatively impact the lives of those who occupy those states."""^^xsd:string ;
.

olive:MentalState a owl:Class ;
	rdfs:label "mental state"^^xsd:string ;
        skos:prefLabel "mental state"@en ;
	rdfs:subClassOf olive:State-Situation ;
	rdfs:comment """olive:MentalState is the class of all static situations in which some actor (usually an agent) occupies a particular mental state."""^^xsd:string ;
        olive:exampleSubclass olive:EmotionalState, olive:ConfusedState, olive:MentalHealthCondition ;
.

olive:Message a owl:Class ;
	rdfs:subClassOf olive:Content, olive:NonphysicalArtifact ;
	rdfs:label "message"^^xsd:string ;
	skos:prefLabel "message"@en ;
	rdfs:comment """A specific instance of content sent from one agent to another. This class doesn't assume the medium: message can be verbal, written, recorded, etc. Create subclasses if there are specific types of messages worth discussing (e.g. X12 835 messages).

Note: you can send a message to yourself, though this is atypical. So, the olive:toAgent need not be different from the olive:fromAgent."""^^xsd:string ;
	rdfs:subClassOf [owl:intersectionOf (olive:Content
			[
				a owl:Restriction ;
				owl:onProperty olive:fromAgent ;
				owl:someValuesFrom olive:Agent ;
			]
			[
				a owl:Restriction ;
				owl:onProperty olive:toAgent ;
				owl:someValuesFrom olive:Agent ;
			]
		) ;
	] ;
	olive:formerName "gist:Message"^^xsd:string;
.

olive:MetaGraph a owl:Class ;
	rdfs:label "meta graph"^^xsd:string ;
        skos:prefLabel "metagraph"@en ;
	rdfs:subClassOf olive:KnowledgeGraph ;
	rdfs:comment """olive:MetaGraph is the class of all knowledge graphs that give meta information about one or more other graphs. As such, you can query metagraphs to determine which graphs might contain information you want, and you can use metagraphs to get more information about the provenance of the data contained in those other graphs.

Typical informaion contained in metagraphs include the topic of the graph, the number or types of classes/properties/subjects in the graph, the source from which the graph is drawn, and date and versioning information."""^^xsd:string ;
.

olive:MetalLevel a owl:Class ;
	rdfs:label "metal level"^^xsd:string ;
        skos:prefLabel "metal level"@en ;
	rdfs:subClassOf olive:ProductCategory ;
	rdfs:comment """olive:MetalLevel is the class of all tags for 'metal levels', which are applied to insurance plans. Lower medals (e.g. Bronze) correspond to lower deductibles, but also to higher costs when you receive care."""^^xsd:string ;
	rdfs:seeAlso "https://www.healthcare.gov/choose-a-plan/plans-categories/" ;
        olive:exampleInstance olive:MetalLevel-Bronze;
.

olive:MolarQuantity a owl:Class ;
	rdfs:label "molar quantity"^^xsd:string ;
	skos:prefLabel "molar quantity"@en ;
	rdfs:comment "Amount of a substance, as counted molecules."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:Magnitude
			[
				a owl:Restriction ;
				owl:onProperty olive:hasUoM ;
				owl:someValuesFrom olive:MoleUnit ;
			]
		) ;
	] ;
	olive:formerName "gist:MolarQuantity"^^xsd:string;
.

olive:MoleUnit
	a owl:Class ;
	rdfs:label "Mole Unit"^^xsd:string ;
	skos:prefLabel "mole unit"@en ;
	rdfs:comment "Amount of chemical material.  Measured in Avogadro units (moles) of 6.02 x 10^23 molecules."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:disjointWith olive:TemperatureUnit ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:SimpleUnit
			[
				a owl:Restriction ;
				owl:onProperty olive:hasBaseUnit ;
				owl:hasValue olive:_mole ;
			]
		) ;
	] ;
	olive:formerName "gist:MoleUnit"^^xsd:string;
.

olive:Monetary a owl:Class ;
	rdfs:label "monetary"^^xsd:string ;
	skos:prefLabel "monetary amount"@en ;
	rdfs:comment "This is an amount of money. Such magnitudes should specify the amount (via olive:decimalValue) and the unit of currency (e.g olive:_USDollar) via olive:hasUoM."^^xsd:string ;
	owl:equivalentClass [a owl:Class ;
			     owl:intersectionOf (olive:Magnitude
			     			 [a owl:Restriction ;
						  owl:onProperty olive:hasUoM ;
						  owl:someValuesFrom olive:CurrencyUnit ;]) ;] ;
	olive:formerName "gist:Monetary"^^xsd:string;
.

olive:MonthInstant a owl:Class ;
	rdfs:label "month instant"^^xsd:string ;
	skos:prefLabel "month instant"@en ;
	rdfs:comment "A point in time known only to the accuracy of one day.  Say the signing of the declaration of independence on 7/4/1776"^^xsd:string ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:TimeInstant
			[a owl:Restriction ;
			 owl:onProperty olive:hasMagnitude ;
			 owl:someValuesFrom [a owl:Class; owl:intersectionOf (
			   
			[
				a owl:Restriction ;
				owl:onProperty olive:hasPrecision ;
				owl:hasValue "1"^^xsd:double ;
			]
			[
				a owl:Restriction ;
				owl:onProperty olive:hasUoM ;
				owl:hasValue olive:_month ;
			]
		)]])] ;
.

olive:MovingSomething a owl:Class ;
	rdfs:label "moving something"^^xsd:string ;
        skos:prefLabel "moving something"@en ;
	rdfs:subClassOf olive:Event ;
	rdfs:comment """Moving something is the class of all events in which an object (which may or may not be an agent) is moving. This would include delivering flowers, throwing a frisbee, driving a car, and walking.

Many events involve moving objects. However, this class will be most useful when there is a focal moving object. So, while an entire basketball game might be an instance of olive:MovingSomething, but that would feature many players, referees, and the ball moving. Much better to focus on an individual event of a particular pass or shot where the ball is the focal moving object."""^^xsd:string ;
        olive:exampleSubclass olive:Delivery ;
        olive:exampleInstance "ex:StephCurrysGamewinningShot"^^xsd:string ;
.

olive:NationalProviderIdentifier a owl:Class ;
    rdfs:subClassOf olive:ID ;
    rdfs:label "National Provider Identifier"^^xsd:string;
    skos:prefLabel "NPI"@en ;
	skos:altLabel "National Provider Identifier (NPI)"@en, "NPI number"@en ;
    rdfs:comment """This is the subclass of olive:ID for National Provider Identifiers."""^^xsd:string ;
	olive:uriTemplate     [olive:uniqueText "http://data.oliveai.com/ontology/NationalProviderIdentifier/uniqueText="^^xsd:string ;
	                       rdfs:seeAlso "https://www.cms.gov/Outreach-and-Education/Medicare-Learning-Network-MLN/MLNProducts/Downloads/NPI-What-You-Need-To-Know.pdf"^^xsd:string ;
			       olive:note  "An NPI is a unique identification number for covered health care providers, created to improve the efficiency and effectiveness of electronic transmission of health information."^^xsd:string ;
			       olive:uriTemplateUsesProperty olive:uniqueText;]
.

olive:NationalProviderIdentifier-Replacement a owl:Class ;
    rdfs:subClassOf olive:NationalProviderIdentifier ;
    rdfs:label "replacement National Provider Identifier"^^xsd:string;
    skos:prefLabel "NPI"@en ;
	skos:altLabel "National Provider Identifier (NPI)"@en, "NPI number"@en ;
    rdfs:comment """This is the subclass of olive:NationalProviderIdentifiers all instances of which are NPIs for providers if the provider has been assigned a replacement NPI. In other words, if EXAMPLE is a member of this class, then EXAMPLE was assigned to its associated provider as a replacement NPI."""^^xsd:string ;
.

olive:NationalProviderIdentifier-SoleProprietor a owl:Class ;
    rdfs:subClassOf olive:NationalProviderIdentifier ;
    rdfs:label "National Provider Identifier - Sole Proprietor"^^xsd:string;
    skos:prefLabel "NPI"@en ;
	skos:altLabel "National Provider Identifier (NPI)"@en, "NPI number"@en ;
    rdfs:comment """This is the subclass of olive:NationalProviderIdentifier that contains all NPIs that are used for sole proprietors. A sole proprietor in this sense is an individual medical care provider that provides care via an unincorprated business. Practically speaking, this prevents the medical care provider from applying for two distinct NPIs (one for oneself qua provider and one for oneself qua care organization/business). Thus, instances of this class are ambiguous with regard to whether they identify the individual provider or the unincorporated organization of which they are the sole proprietor (since no such distinct is made for these individuals insofar as NPI data is concerned)."""^^xsd:string ;
.

olive:Network
	a owl:Class ;
	rdfs:label "network"^^xsd:string ;
	skos:prefLabel "network"@en ;
	rdfs:comment "A network is a connected set of links and nodes"^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:subClassOf olive:NonphysicalThing ;
	olive:formerName "gist:Network"^^xsd:string;
.

olive:NetworkLink a owl:Class ;
	rdfs:subClassOf olive:NonphysicalThing ;
	rdfs:label "network link"^^xsd:string ;
	skos:prefLabel "network link"@en ;
	skos:altLabel "edge"@en ;
	rdfs:comment "A link in a network.  This is the abstraction of the network.  The physical instantiation couple be pipes, or wire  but may also be non physical such as wireless networks or organization structures"^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:NetworkLink"^^xsd:string;
	.

olive:NetworkNode a owl:Class ;
	rdfs:subClassOf olive:NonphysicalThing ;
	rdfs:label "network node"^^xsd:string ;
	skos:prefLabel "network node"@en ;
	skos:altLabel "node"@en ;
	rdfs:comment "A node in a network.  Note the network is the abstract representation of the network.  It is physically instantiated with equipment, or in some cases People."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:NetworkNode"^^xsd:string;
	.

olive:NUCCProviderTaxonomyCode a owl:Class ;
    rdfs:subClassOf olive:ID ;
    rdfs:label "NUCC provider taxonomy code"^^xsd:string;
    skos:prefLabel "NUCC provider taxonomy code"@en ;
    rdfs:comment """This is the subclass of olive:ID for NUCC provider taxonomy codes."""^^xsd:string ;
	olive:uriTemplate     [olive:uniqueText "http://data.oliveai.com/ontology/NUCCProviderTaxonomyCode/uniqueText="^^xsd:string ;
	                       rdfs:seeAlso "https://www.nucc.org/index.php/code-sets-mainmenu-41/provider-taxonomy-mainmenu-40"^^xsd:string ;
			       olive:uriTemplateUsesProperty olive:uniqueText;]
.

olive:NaturalLanguage a owl:Class ;
	rdfs:label "natural language"^^xsd:string ;
        skos:prefLabel "language"@en ;
	rdfs:subClassOf olive:Language ;
	rdfs:comment """olive:NaturalLanguage is the class of all languages that evolve 'naturally', usually juxtaposed with formal languages such as logics and programming languages."""^^xsd:string ;
        olive:exampleInstance olive:EnglishLanguage, olive:FarsiLanguage;
.

olive:NonphysicalArtifact a owl:Class ;
        rdfs:subClassOf olive:Artifact, olive:NonphysicalThing ;
		owl:equivalentClass [owl:intersectionOf (olive:Artifact olive:NonphysicalThing)] ;
        rdfs:label "nonphysical artifact"^^xsd:string;
        skos:prefLabel "nonphysical artifact"^^xsd:string ;
	skos:altLabel "abstract artifact"^^xsd:string ;
	skos:altLabel "conceptual work"^^xsd:string ;
        rdfs:comment """olive:NonphysicalArtifact is a subclass of olive:Artifact, where the artifacts are essentially nonphysical. Paradigm instances include ideas, conceptual works (like stories or poems), rules for games, content (see olive:Content), and so on.

Nonphysical artifacts are contrasted with physical artifacts. See the comment on olive:PhysicalArtifact for more discussion."""^^xsd:string ;
        olive:exampleSubclass olive:Content , olive:IntellectualProperty ;
	owl:disjointWith olive:PhysicalArtifact ;
.

olive:NonphysicalThing a owl:Class ;
    rdfs:subClassOf owl:Thing ;
	owl:disjointWith olive:PhysicalThing, olive:Attribute, olive:Situation, olive:TimeInterval ;
    rdfs:label "nonphysical thing"^^xsd:string;
    skos:prefLabel "nonphysical thing"^^xsd:string ;
    rdfs:comment """This is the class of all (wholly) non-physical things, and it serves as the complement of olive:PhysicalThing. Non-physical things are things that have no spatial extent (although they may - and often do - have a temporal extent), are not situations (see olive:Situation), are not time intervals, and possess \"independent\" existence (i.e. they are not \"attribute-like\", as contrasted with instances of olive:Attribute). Paradigmatic examples are conceptual works (including fictional characters as considered in contexts in which they are indeed fictional), virtual objects (such as an email address) insofar as they are virtual (i.e. considered apart from any underlying physical structure that supports their existence), and other abstract objects like variables and functions.
	
	As a rule of thumb, something belongs in this category if (1) it isn't state- or event-like (note, though, that fictional events do belong in this class since these are properly characterized as conceptual works and not events), (2) it isn't attribute-like (i.e. it cannot be attributed to something else in the manner that instances of olive:Attribute are), (3) is not a time interval, (4) it is not localizable in space. Note that based on this characterization, things like holes are actually instances of olive:PhysicalThing (even though they are not instances of olive:MaterialThing) since they are localizable in space."""^^xsd:string ;
        olive:exampleSubclass olive:NonphysicalArtifact , olive:Variable ;
.

olive:Nurse a owl:Class ;
        rdfs:subClassOf olive:MedicalProfessional ;    
        rdfs:label "nurse"^^xsd:string;
        skos:prefLabel "nurse"^^xsd:string ;
        rdfs:comment """olive:Nurse is the subclass of olive:MedicalProfessionals who are nurses."""^^xsd:string ;
	olive:mapsTo-providerType "Nursing" ;
.

olive:Obligation a owl:Class ;
	rdfs:label "obligation"^^xsd:string ;
	skos:prefLabel "obligation"@en ;
	rdfs:subClassOf olive:Requirement ;
	rdfs:comment """Instances of olive:Obligation are normatively binding commitments for an agent that constitute specific demands on that agent's actions or relationships. A contract (see olive:Contract), for example, may contain/specify one or more obligations that are binding for multiple agents. A given obligation (considered as a content) may be conceived of as being a part of a larger content from which it issues (as in when a contract contains certain specific obligations), or it may be conceived as an abstraction from (see olive:abstractsTo) a specific agreement (e.g. as when my agreement to pay you $20 abstracts to the obligation that I pay you $20 - both are legitimately conceived of as normatively binding, but the obligation, considered in itself, is an abstraction from the content of the agreement). Agents can also have obligations that do not issue from any kind of agreement - for example, there are certain conceptions of moral obligations according to which those obligations do not issue from any antecedent agreement."""^^xsd:string ;	
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:subClassOf [a owl:Restriction ;
			 owl:onProperty olive:bindingForAgent ;
			 owl:someValuesFrom olive:Agent ] ;
	olive:formerName "gist:Obligation"^^xsd:string;
.

olive:OHM a owl:Class ;
        rdfs:subClassOf olive:Message ;
        rdfs:label "OHM"^^xsd:string;
        skos:prefLabel "OHM"@en ;
	skos:altLabel "Olive human message"@en ;
        rdfs:comment """OHM stands for \"Olive Human Message\".  An OHM is when Olive sends a message to a human and the human responds.  Most commonly the medium for communication between Olive and a human is email.  However, it could also include chat tools or other asynchronous messaging systems.  The OHM is the center point for ensuring a Turing-like relationship with Olive and a customer.  The OHM Manager, in Omega, oversees the creation, transmission, and performance of all OHMs."""^^xsd:string ;
.

olive:OliveEmployee a owl:Class ;
	rdfs:label "olive employee"^^xsd:string ;
        skos:prefLabel "Olive employee"@en ;
	rdfs:subClassOf olive:Professional ;
	owl:equivalentClass [a owl:Restriction ;
			     owl:onProperty olive:employer ;
			     owl:hasValue olive:Olive ] ,
			    [a owl:Restriction ;
			     owl:onProperty olive:employee ;
			     owl:someValuesFrom [owl:intersectionOf (olive:Employment
			     					     [a owl:Restriction ;
			     			 		      owl:onProperty olive:employer ;
								      owl:hasValue olive:Olive])]];
	rdfs:comment """olive:OliveEmployee is the class of all people who are employed by Olive."""^^xsd:string ;
	olive:uriTemplate [olive:uniqueText "http://data.oliveai.com/ontology/OliveEmployee/namelyHref=" ;
			   olive:uriUsesProperty olive:namelyHref ; ]	
.

olive:Oncologist a owl:Class ;
        rdfs:subClassOf olive:Doctor ;
        rdfs:label "oncologist"^^xsd:string;
        skos:prefLabel "oncologist"@en ;
        rdfs:comment """This is the class of all doctors who specialize in oncology.

Not to be confused with an ontologist!"""^^xsd:string ;
        olive:exampleSubclass olive:Oncologist-Medical, olive:Oncologist-Surgical, olive:Oncologist-Radiation ;
	owl:equivalentClass [a owl:Class ;
			     owl:intersectionOf (olive:Doctor
						[a owl:Restriction ;
						 owl:onProperty olive:specializesIn ;
						 owl:hasValue olive:Exemplar_Cancer ;])] ;
.

olive:Oncologist-Medical a owl:Class ;
        rdfs:subClassOf olive:Oncologist ;
        rdfs:label "medical oncologist"^^xsd:string;
        skos:prefLabel "medical oncologist"@en ;
        rdfs:comment """This is the subclass of olive:Oncologist where they specialize in chemotherapy or other drug treatments for cancer."""^^xsd:string ;
	owl:equivalentClass [a owl:Class ;
			     owl:intersectionOf (olive:Oncologist
						[a owl:Restriction ;
						 owl:onProperty olive:specializesIn ;
						 owl:hasValue olive:Exemplar_Chemotherapy ;])] ;
.

olive:Oncologist-Radiation a owl:Class ;
        rdfs:subClassOf olive:Oncologist ;
        rdfs:label "radiation oncologist"^^xsd:string;
        skos:prefLabel "ratiation oncologist"@en ;
        rdfs:comment """This is the subclass of olive:Oncologist where they specialize in radiation therapy to treat cancer."""^^xsd:string ;
	owl:equivalentClass [a owl:Class ;
			     owl:intersectionOf (olive:Oncologist
						[a owl:Restriction ;
						 owl:onProperty olive:specializesIn ;
						 owl:hasValue olive:Exemplar_RadiationTherapy ;])] ;
.

olive:Oncologist-Surgical a owl:Class ;
        rdfs:subClassOf olive:Oncologist ;
        rdfs:label "surgical oncologist"^^xsd:string;
        skos:prefLabel "surgical oncologist"@en ;
        rdfs:comment """This is the subclass of olive:Oncologist where they specialize in surgical treatments for cancer."""^^xsd:string ;
	owl:equivalentClass [a owl:Class ;
			     owl:intersectionOf (olive:Oncologist
						[a owl:Restriction ;
						 owl:onProperty olive:specializesIn ;
						 owl:hasValue olive:Exemplar_Surgery ;])] ;
.

olive:Ontologist a owl:Class ;
	rdfs:label "ontologist"^^xsd:string ;
        skos:prefLabel "ontologist"@en ;
	skos:altLabel "ontological engineer"@en, "OE"@en, "ontology engineer"@en ;
	rdfs:subClassOf olive:Professional ;
	rdfs:comment """olive:Ontologist is the class of all ontologists (aka ontological engineers). One is writing this comment right now. It is a noble profession, attracting the best and brightest who can't manage to get a real job."""^^xsd:string ;
.

olive:OntologyTermType a owl:Class ;
	rdfs:label "ontology term type"^^xsd:string ;
        skos:prefLabel "ontology term type"@en ;
	rdfs:subClassOf olive:Category ;
	rdfs:comment """olive:OntologyTermType is the class of all tags for an ontology term or resource. For example, a term might be created but not really fleshed out; we can categorize said term as a olive:StubTerm.

However, since we're going to be relating any resource to a term type, we cannot use an object property. Instead of olive:categorizedBy, use olive:quotedCategorizedBy. See that property for more discussion for the 'quoted' aspect."""^^xsd:string ;
        olive:exampleInstance olive:StubTerm, olive:TermRequiringReview;
.

olive:OrderedCollection a owl:Class ;
	rdfs:subClassOf olive:Collection ;
	rdfs:label "ordered collection"^^xsd:string ;
	skos:prefLabel "ordered collection"@en ;
	rdfs:comment "A collection where the members are in a fixed sequence."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:OrderedCollection"^^xsd:string;
.

olive:OrdinalCollection a owl:Class ;
	rdfs:subClassOf	rdf:List, olive:OrderedCollection ;
	rdfs:label "ordinal collection"^^xsd:string ;
	skos:prefLabel "list"@en ;
	rdfs:comment "An Ordered Collection where no item can be of the same rank as any other item. This is just a list, and is a subclass of rdf:List. It should be familiar to LISP users."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:OrdinalCollection"^^xsd:string;
.

olive:Organization
	a owl:Class ;
	rdfs:label "organization"^^xsd:string ;
	skos:prefLabel "organization"@en ;
	rdfs:subClassOf olive:Agent ;
	rdfs:comment """Paradigm organizations include companies (e.g. Olive AI), countries (e.g. Germany), and clubs (e.g. the NRA). Organizations are distinct from individual persons (see olive:Person), though there can be single-person organizations, such as when an individual person starts a company and is the only employee.

olive:Organization is closely related to, but different from, olive:Group. As noted in the comment on olive:Collection, collections are determined by their members. An organization, on the other hand, is not determined strictly by its members. To see this, suppose that Olive AI over time replaced every employee. It's reasonable to say that the organization would be the same, though the group of people that were employees was different.

olive:Organization is a subclass of olive:Agent, which means that an organization is capable of action and engaging in contracts. There are some heavy and contentious metaphsyical claims in this vicinity (e.g. whether corporations are people or are subject to moral evaluation), but this ontology tries to remain neutral whenever possible."""^^xsd:string ;
	olive:exampleSubclass olive:GovernmentOrganization ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:disjointWith
		olive:PhysicalObject ,
		olive:PhysicalSubstance ,
		olive:TimeInstant ,
		olive:UnitOfMeasure ;
.

olive:Output a owl:Class ;
	rdfs:subClassOf olive:Variable ;
        rdfs:label "output"^^xsd:string;
        skos:prefLabel "function output"@en ;
        rdfs:comment """Outputs are the arguments that are outputs for a function (see olive:Function). By definition, every output in the range of a function should be mapped to exactly one input (see olive:Input)."""^^xsd:string ;
.

olive:Partnership a owl:Class ;
    rdfs:subClassOf olive:Relationship;
    rdfs:label "partnership"^^xsd:string;
    skos:prefLabel "partnership"^^xsd:string ;
    rdfs:comment """This is the class of partnerships, which are relationships between agents engaged together in the same activity, often with equal (or approximately equal) status, though this need not be the case."""^^xsd:string ;
.

olive:Patient a owl:Class ;
        rdfs:subClassOf olive:Person ;
        rdfs:label "patient"^^xsd:string ;        skos:prefLabel "patient"^^xsd:string ;
        rdfs:comment """olive:Patient is the subclass of olive:Person in which each instance is the patient in a medical care event (see olive:patientInEvent).

This representation is a little heavy-handed without temporal qualification. Virtually every preson will be the patient in some medical care event, and therefore they will be classified as patients. However, one might argue that one is only a patient during a given medical care event, or at least in reference to that event. For that reason, it may turn out that the property olive:patientInEvent is far more important than this class for meaningful representation."^^xsd:string ;
        olive:exampleTriple ":Bob a olive:Patient; olive:patientInEvent :DoctorApptOnJune13th."""^^xsd:string ;
.

olive:PatientCohort a owl:Class ;
	rdfs:label "patient cohort"^^xsd:string ;
        skos:prefLabel "patient cohort"@en ;
	rdfs:subClassOf olive:Cohort ;
	rdfs:comment """olive:PatientCohort is the class of all cohorts that are subclasses of olive:Patient."""^^xsd:string ;
	olive:facetingOfClass olive:Patient ;
.

olive:PatientDispositionCategory a owl:Class ;
	rdfs:label "patient disposition category"^^xsd:string ;
        skos:prefLabel "patient disposition category"@en ;
	rdfs:subClassOf olive:Category ;
	rdfs:comment """olive:PatientDispositionCategory is the class of all dispositions that might conclude a olive:MedicalCareEncounter. It includes olive:Disposition-ToHomeCare, olive:Disposition-Deceased, and olive:Disposition-LongTermCare.

While this class looks to be about the patient, and it is, note that these categories should be applied to patient encounters, not patients themselves."""^^xsd:string ;
        olive:exampleInstance olive:Disposition-ToHomeCare, olive:Disposition-Deceased, olive:Disposition-LongTermCare;
.

olive:PatientEncounterReview a owl:Class ;
        rdfs:subClassOf olive:AssessingSomething ;
        rdfs:label "patient encounter review"^^xsd:string;
        skos:prefLabel "patient encounter review"^^xsd:string ;
	skos:altLabel "encounter utilization review"^^xsd:string ;
	skos:altLabel "case management"^^xsd:string ;
	skos:altLabel "encounter utilization review and case management"^^xsd:string ;
        rdfs:comment """This is the third subevent of the revenue cycle. It starts after the patient leaves, and consists of both reviewing the treatment and planning for monitoring the patient's continued care."""^^xsd:string ;
	rdfs:subClassOf [ rdf:type owl:Restriction ;
			  owl:onProperty olive:precedes ;
			  owl:someValuesFrom olive:ChargeCaptureCoding
			] ;
.

olive:PatientScheduling a owl:Class ;
        rdfs:subClassOf olive:Event ;
        rdfs:label "patient scheduling"^^xsd:string;
        skos:prefLabel "patient scheduling"^^xsd:string ;
        rdfs:comment """Patient scheduling is the first subevent of the revenue cycle. It is the class of all events in which a patient has their pending medical events scheduled. It starts with the first contact with the patient and includes setting their appointment, checking their insurance eligibility, and reminding the patient of the upcoming appointment."""^^xsd:string ;
	rdfs:subClassOf [ rdf:type owl:Restriction ;
			  owl:onProperty olive:precedes ;
			  owl:someValuesFrom olive:PointOfServiceEvent
			] ;
.

olive:PatientStatus a owl:Class ;
        rdfs:subClassOf olive:Status ;
        rdfs:label "patient status"^^xsd:string;
        skos:prefLabel "patient status"@en ;
        rdfs:comment """This is the class of tags for patients and their statuses. It can include patient triage scores, dispositions and so on."""^^xsd:string ;
.

olive:PayingForSomething a owl:Class ;
        rdfs:subClassOf olive:TransferEvent ;
        rdfs:label "paying for something"^^xsd:string;
        skos:prefLabel "paying for something"@en ;
        rdfs:comment """Every instance of olive:PayingForSomething is an event in which some agent pays some other agent for some good or service.

Such events should probably specify the method (olive:paidWith) and amount (olive:paidAmount), the thing being paid for (olive:payingForThing), the payer (olive:paidBy), the payee (olive:paidTo), and link to any records of the transaction."""^^xsd:string ;
.

olive:PaymentPostingAppealsAndCollections a owl:Class ;
        rdfs:subClassOf olive:Event ;
        rdfs:label "payment posting, appeals, and collections"^^xsd:string;
        skos:prefLabel "payment resolution"^^xsd:string ;
        rdfs:comment """This is the seventh and final subevent of the revenue cycle. The medical care provider receives the verdict from the insurance company with respect to the claim. If the claim is paid in full, the account may be closed. If the claim is partially paid or rejected, the provider will have some time to appeal to the insurance company. After this is resolved, whatever balance remains will be charged to the patient."""^^xsd:string ;
.

olive:Pediatrician a owl:Class ;
	rdfs:label "pediatrician"^^xsd:string ;
        skos:prefLabel "pediatrician"@en ;
	rdfs:subClassOf olive:Doctor ;
	rdfs:comment """olive:Pediatrician is the class of all pediatricians."""^^xsd:string ;
.

olive:Periodical a owl:Class ;
        rdfs:subClassOf olive:Content, olive:NonphysicalArtifact ;
        rdfs:label "periodical"^^xsd:string;
        skos:prefLabel "periodical"^^xsd:string ;
        rdfs:comment """Periodicals are (pieces of) content that are put out in some regular time intervals by an organization. This class is reserved for the most generic conception of a given periodical - e.g. The New York Times (considered as the overarching \"content\" that is common to all periodical releases).
		
		Thus, we can consistently say the following things:
		(:TheNewspaperInMyHand olive:instantiates :TheNewYorkTimes-13Dec2021)
		(:TheNewspaperInMyHand olive:instantiates :TheNewYorkTimes)
		(:TheNewYorkTimes-13Dec2021 olive:abstractsTo :TheNewYorkTimes)
		
		In other words, any concrete manifestation of a periodical may be represented as instantiating (1) a particular release/issue of that periodical and (2) the periodical itself. Likewise, any particular release/issue of a periodical (considered as content) may be represented as abstracting to the generic periodical, considered as content."""^^xsd:string ;
.

olive:Person
	a owl:Class ;
	rdfs:subClassOf olive:Agent, olive:LivingThing ;
	rdfs:label "person"^^xsd:string ;
	skos:prefLabel "person"@en ;
	rdfs:comment "The class of all persons. Usually, one should think of this class as synonymous with 'human', but the intended meaning is the class of all non-group moral agents. In this sense, some may argue that some nonhuman animals, or even machines, may end up being persons. Or, conversely, some humans may cease to be moral agents (and therefore cease to be persons) in cases where they suffer irreversible debilitating brain damage or other conditions."^^xsd:string ;
	olive:formerName "gist:Person"^^xsd:string ;
	olive:uriTemplate [olive:uniqueText "olive:Person/ssn=";
			   olive:uriTemplateUsesProperty olive:ssn ;];
	olive:classIdentifyingProperty olive:ssn ;
.

olive:PhysicalActivityType a owl:Class ;
	rdfs:label "physical activity type"^^xsd:string ;
        skos:prefLabel "type of physical activity"@en ;
	olive:instanceOf olive:Class-SecondOrder ;
	rdfs:subClassOf olive:HumanActivityType ;
	olive:facetingOfClass [a owl:Restriction ;
			    		   owl:onProperty olive:doneByAgent ;
						   owl:someValuesFrom olive:Agent ;] ;
	rdfs:comment """olive:PhysicalActivityType is the class of classes of events all instances of which are such that human activity that is importantly physical. Paradigm examples include jogging (i.e. the class of jogging events), swimming, dancing, and so on. In short, this is the class for all of the events that correlate to action verbs that agents can perform.

The 'importantly' in the definition is a little squishy, but I think it's the best we can do. It might be that playing chess or thinking are also essentially physical: if we had no physical bodies, we couldn't do them. Yet, they seem to lack the physicality that we intuitively want to define this class. Playing chess over the board with another player would be an instance of this class, but not playing chess generally. A good litmus test: if you can perform an activity virtually and still truly say you did that activity, then it is not physical. So, when I run through the virtual world of Skyrim, I cannot say that I have been doing any olive:Running. Whereas when I play a game of chess online, I can truly say that I was doing an instance of olive:PlayingChess."""^^xsd:string ;
        olive:exampleInstance olive:Running, olive:Biking, olive:Walking ;
.

olive:PhysicalAddress a owl:Class ;
        rdfs:subClassOf olive:Address, olive:PhysicalArtifact ;
		owl:equivalentClass [owl:intersectionOf (olive:Address olive:PhysicalThing)] ;
        rdfs:label "physical address"^^xsd:string;
        skos:prefLabel "physical address"^^xsd:string ;
        rdfs:comment """This is the sublcass of olive:Place, olive:Address, and olive:PhysicalArtifact: they are physical places that can be referred to by some routing algorithm."""^^xsd:string ;
.

olive:PhysicalArtifact a owl:Class ;
        rdfs:subClassOf olive:Artifact, olive:PhysicalThing ;
		owl:equivalentClass [owl:intersectionOf (olive:Artifact olive:PhysicalThing)] ;
        rdfs:label "physical artifact"^^xsd:string;
        skos:prefLabel "physical artifact"^^xsd:string ;
        rdfs:comment """olive:PhysicalArtifact is a subclass of olive:Artifact, where the artifacts are essentially physical. Paradigm instances include hammers, fishing poles, cars, bridges, and buildings.

Physical artifacts are contrasted with non-physical artifacts. The abstract content of Moby Dick is non-physical, whereas the physical instantiations of that content are necessarily physical. So, there's a difference between Moby Dick the story on one hand, and paperback copies of Moby Dick on the other. That is, (:MobyDick-TheStory a olive:NonphysicalArtifact), whereas (:MyCopyOfMobyDick a olive:PhysicalArtifact).

One might think that physical and non-physical covers the whole space. And in a sense, this is right: every artifact must either be physical or non-physical. (This assumes there are no hybrid physical/non-physical artifacts.) However, there are a few classes that might straddle the distinction, in that instances of these classes might sometimes be physical and sometimes be non-physical. olive:System, for example, will include both physical and non-physical systems. Templates are also like this. A template might be physical, like a mold for a metal car part, but there are also abstract templates, like the structure for a sonata."""^^xsd:string ;
        olive:exampleSubclass olive:Building, olive:Equipment ;
.

olive:PhysicalExam a owl:Class ;
        rdfs:subClassOf olive:MedicalCareEvent ;
        rdfs:label "physical exam"^^xsd:string;
        skos:prefLabel "physical examination"@en ;
	skos:altLabel "physical exam"@en, "physical"@en ;
        rdfs:comment """This is the subclass of olive:MedicalCareEvent in which a patient receives a physical. This might be for general wellness or for being cleared for some activity, such as high school sports."""^^xsd:string ;
.

olive:PhysicalObject a owl:Class ;
	rdfs:subClassOf olive:PhysicalThing ;
	rdfs:label "physical object"^^xsd:string ;
	skos:prefLabel "physical object"@en ;
	skos:altLabel "physical item"@en ;
	rdfs:comment """This is the class of all physical things that are objects (more on the technical meaning below). It includes everything from everyday 'moderate-sized specimens of dry goods' like pants and plates and bags of flour, to large things like bridges and planets and universes, to tiny things like grains of sand and molecules and lysosomes. If it is physical and countable, it is a physical identifiable item.

What does it mean to say something is an object? It is contrasted with something's being stuff. Roughly, if you have an object of some type, the parts of that object will not themselves be of that type. A dog is an object, because the dog's leg is not itself a dog. Contrast this with substances like water: any portion of a sample of water is itself a sample of water. Another way to get at the distinction is to note which terms are count nouns rather than mass nouns. 

These tests are not foolproof. Things get a little weird on the molecular level, since a single Hydrogen atom is in some sense a part of a sample of water, but that atom is not a sample of water. And there are words that can be both used as mass and as count nouns (e.g. you can pick up two rocks or go mine for some rock). Still, this intuitive macro-distinction allows us to separate things like animals and tools from the substances that are used to make these things: matter, water, steel, and so on."""^^xsd:string ;
        olive:exampleSubclass olive:Equipment, olive:LivingThing ;
	owl:disjointWith olive:TimeInstant , olive:UnitOfMeasure , olive:PhysicalSubstance ;
	olive:formerName "gist:PhysicalIdentifiableItem"^^xsd:string;
.

olive:PhysicalSubstance
	a owl:Class ;
	rdfs:subClassOf olive:PhysicalThing,  [
		owl:intersectionOf (
			[
				a owl:Restriction ;
				owl:onProperty olive:hasMagnitude ;
				owl:someValuesFrom olive:Mass ;
			]
			[
				a owl:Restriction ;
				owl:onProperty olive:hasMagnitude ;
				owl:someValuesFrom olive:Volume ;
			]
		) ;
	] ;
	rdfs:label "physical substance"^^xsd:string ;
	skos:prefLabel "substance"@en ;
	rdfs:comment """This is the class of all physical things that are substances, as opposed to objects. Whereas objects are countable, substances are typically mass nouns that are not countable. Paradigm examples include water, gold, lemonade, and cotton.

Note that individual instances of a physical substance will be some particular sample of that substance, rather than the type itself. That is, the water in my class of water would be an instane of olive:PhysicalSubstance--water itself would be a subclass (of which the water in my class would be an instance) but not an instance itself.

For more discussion on the distinction between objects and substances, see the comment on olive:PhysicalObject."""^^xsd:string 	;
    	olive:formerName "gist:PhysicalSubstance"^^xsd:string ;
	owl:disjointWith
		olive:TimeInstant ,
		olive:UnitOfMeasure
		;
	.

olive:PhysicalThing a owl:Class ;
        rdfs:label "physical thing"^^xsd:string;
        skos:prefLabel "physical thing"^^xsd:string ;
        rdfs:comment """olive:PhysicalThing is the most general category for physical objects (see olive:PhysicalObject) and substances (or 'stuff', see olive:PhysicalSubstance). Note that instances of this class must be at least partially - but need not be wholly - physical: that is, if a thing has at least one physical part (whether or not it has non-physical parts), it belongs in this class. Paradigm examples include ferrets, hammers, planets, and samples of water or nitrogen. Physical things are spatially located and take up space.

As a basic test of whether something belongs in this class, one can ask the following question: Does the thing in question take up space and/or is it located in space? If so, it belongs in this class. If not (or if there's an open question about whether the answer is \"yes\"), then it doesn't belong in this class.

Nonexamples include situations (see olive:Situation and its subclasses), ideas, and virtual things (see olive:VirtualThing). The latter might be tempting; Word documents and Google Sheets and such are usually engaged with via sense perception, and they are physically realized in physical circuits and electrical currents. While there are certainly physical things required to bring a virtual document into existence, the document itself is nonphysical.

This class is primarily used for describing various properties that all physical things will have: spatial locations, mass, etc. However, in practice new individuals should almost always be placed 'lower' in more specific classes in the ontology."""^^xsd:string ;
        olive:exampleSubclass olive:PhysicalObject, olive:PhysicalSubstance, olive:Equipment ;
		owl:disjointWith olive:Situation, olive:Attribute, olive:TimeInterval ;
.

olive:PhysicianGroup a owl:Class ;
        rdfs:subClassOf olive:MedicalCareOrganization, olive:Group ;
        rdfs:label "physician group"^^xsd:string;
        skos:prefLabel "physician group"@en ;
        rdfs:comment """A physician group is when three or more physicians formally organize as a legal entity in which business, clinical, and administrative facilities are shared."""^^xsd:string ;
.

olive:Place a owl:Class ;
	rdfs:label "place"^^xsd:string ;
	skos:prefLabel "place"@en ;
	skos:altLabel "area"@en ;
	rdfs:comment """olive:Place is the class of all individuals that are locations (physical and non-physical) that can be the answer to a 'where' question. Places include countries, buildings, and regions of space, as well as websites and email addresses.

Conceptually, this is an easy class to get a grasp on. But we do have to be careful with the loose way that people talk. Oftentimes we use the same word for both a place and something else. For example, 'I went to the hospital. I paid the hospital for my recent procedure.' In those two sentences, 'the hospital' refers to different things. In the first, it refers to the place, probably best understood as the hospital building. In the second, it refers to the organization that uses the building. We certainly don't want to pay the building!

Another looseness comes in talking of addresses. When we say that we visit some address (say 221B Baker Street), we mean that we visited the location that is denoted by the string-version of the address. This confusion rarely causes problems in conversation, but can really cause havoc in an ontology if it goes unnoticed."""^^xsd:string ;
        olive:exampleSubclass olive:Region, olive:Building, olive:VirtualAddress ;
	olive:formerName "gist:Place"^^xsd:string;	
.

olive:PointOfServiceEvent a owl:Class ;
        rdfs:subClassOf olive:Event ;
        rdfs:label "point of service event"^^xsd:string;
        skos:prefLabel "point of service event"^^xsd:string ;
        rdfs:comment """The is the second subevent of the revenue cycle. It starts with patient check-in to the provider and concludes when the patient leaves after service is rendered."""^^xsd:string ;
	rdfs:subClassOf [ rdf:type owl:Restriction ;
			  owl:onProperty olive:hasSubevent ;
			  owl:someValuesFrom olive:MedicalCareEvent
			] ;	
	rdfs:subClassOf [ rdf:type owl:Restriction ;
			  owl:onProperty olive:precedes ;
			  owl:someValuesFrom olive:PatientEncounterReview
			] ;
.

olive:PostGraduateEducation a owl:Class ;
	rdfs:label "post graduate education"^^xsd:string ;
        skos:prefLabel "post-graduate education"@en ;
	rdfs:subClassOf olive:Education ;
	rdfs:comment """olive:PostGraduateEducation is the class of all education events that typically require and follow an undergraduate degree, such as a Bachelor's degree."""^^xsd:string ;
        olive:exampleSubclass olive:MedicalResidency;
.

olive:PrescribingADrug a owl:Class ;
        rdfs:subClassOf olive:MedicalCareEvent, olive:RequestingSomething ;
        rdfs:label "prescribing a drug"^^xsd:string;
        skos:prefLabel "prescribing a drug"@en ;
        rdfs:comment """This is the subclass of olive:MedicalCareEvent in which the patient is prescribed some drug or drugs in a medical context."""^^xsd:string ;
	owl:equivalentClass [a owl:Restriction ;
			     owl:onProperty olive:eventCreates ;
			     owl:someValuesFrom olive:Prescription ;] ;
	rdfs:subClassOf [a owl:Restriction ;
			 owl:onProperty olive:communicatedContent ;
			 owl:someValuesFrom olive:Prescription ] ;
.

olive:Prescription a owl:Class ;
	rdfs:label "prescription"^^xsd:string ;
        skos:prefLabel "prescription"@en ;
	rdfs:subClassOf olive:Request ;
	rdfs:comment """Prescription is the class of all requests such that the requested thing is medication. This includes both inpatient and outpatient requests, despite inpatient requests more frequently called 'medication requests' than 'prescriptions'."""^^xsd:string ;
        olive:exampleInstance ":MyXanaxPrescription"^^xsd:string ;
	owl:equivalentClass [owl:intersectionOf (
			    			 [a owl:Restriction ;
						  owl:onProperty [owl:inverseOf olive:authorOf] ;
						  owl:someValuesFrom olive:MedicalProfessional ;]
						 [a owl:Restriction ;
						  owl:onProperty olive:requestedThing ;
						  owl:someValuesFrom olive:Drug])] ;
.

olive:Procedure a owl:Class ;
        rdfs:subClassOf olive:NonphysicalArtifact, olive:Template, olive:Constraint ;
        rdfs:label "procedure"^^xsd:string;
        skos:prefLabel "procedure"@en ;
	skos:altLabel "algorithm"@en , "process"@en , "method"@en ;
        rdfs:comment """Instances of olive:Procedure are algorithms or methods for solving some type of problem. This could be a cosin algorithm for calculating CPA similarity, or a method for bench pressing heavy weight."""^^xsd:string ;
.

olive:Product a owl:Class ;
	rdfs:label "product"^^xsd:string ;
        skos:prefLabel "product"@en ;
	rdfs:subClassOf olive:Artifact ;
	rdfs:comment """olive:Product is the class of all artifacts that are intended to be sold."""^^xsd:string ;
.

olive:ProductCategory a owl:Class ;
	rdfs:subClassOf olive:Category ;
	rdfs:label "product category"^^xsd:string ;
	skos:prefLabel "product category"@en ;
	rdfs:comment "Any of many ways of categorizing products, including models, NATO product codes, and the like."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:ProductCategory"^^xsd:string;
.

olive:ProductCollectionType a owl:Class ;
    olive:instanceOf olive:Class-SecondOrder ;
	rdfs:subClassOf olive:Facet ;
	rdfs:label "product unit type" ;
	skos:prefLabel "product unit type"@en ;
	skos:altLabel "unit type"@en ;
	olive:instancesAreSubclassesOf olive:Collection ;
	rdfs:comment """This is a class of those classes each of which is a type of (mere) collection of products. For example, the six surgical masks in the my pack-of-6 surgical masks form a collection; the class of all collections of that sort would be an instance of this class. This class is designed to most useful in representing type-level information about product units (e.g. that surgical mask X is sold in cases of 12 - see also olive:ProductUnitType).""" ;
	olive:seeAlso olive:ProductUnitType ;
.

olive:ProductMagnitude a owl:Class ;
	rdfs:label "product magnitude"^^xsd:string ;
	skos:prefLabel "product magnitude"@en ;
	rdfs:comment "A magnitude expressed as a product of primitives.  (E.g., Force = M*A)."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:Magnitude
			[
				a owl:Restriction ;
				owl:onProperty olive:hasUoM ;
				owl:someValuesFrom olive:ProductUnit ;
			]
		) ;
	] ;
	olive:formerName "gist:ProductMagnitude"^^xsd:string;
.

olive:ProductUnit a owl:Class ;
	rdfs:label "product unit"^^xsd:string ;
	skos:prefLabel "product unit"@en ;
	rdfs:subClassOf olive:UnitOfMeasure ;
	rdfs:comment """A unit of measure that is the product of two or more simple units. The simpler units need not be distinct: square meters is a product unit. Other examples include foot pounds (for torque), or Newtons."""^^xsd:string ;
	olive:formerName "gist:ProductUnit"^^xsd:string;
.

olive:ProductUnitType a owl:Class ;
	olive:instanceOf olive:Class-SecondOrder ;
	rdfs:subClassOf olive:Facet ;
	rdfs:label "product unit type" ;
	skos:prefLabel "product unit type"@en ;
	skos:altLabel "unit type"@en ;
	olive:instancesAreSubclassesOf olive:Artifact ;
	rdfs:comment """This is a class of those classes each of which is a type of product unit. For example, a certain kind of surgical mask may be sold in packs of twelve; thus, ex:TwelvePack might be an instance of olive:ProductUnitType (and, more generally, ex:Pack might be an instance, as might be the more specific class ex:PackOfSurgicalMaskX). Instances of this class should be conceived of as classes of \"product units plus their packaging\" - thus, a twelve pack of surgical masks has the collection constituted by the masks themselves (and, by transitivity, each of the masks itself) as a part, but it also may have (and typically does) have other parts (e.g. the packaging used to unify the individual pieces of the product unit).

	There are some important distinctions to be careful to make here. In the case of the pack of 12 instances of ex:SurgicalMaskX, the 12 surgical masks themselves are members of (see olive:memberOf) an instance of olive:Collection (and that instance of olive:Collection stands in olive:collectionOfType to ex:SurgicalMaskX, and it has an olive:memberCount of \"12\"^^xsd:integer). This collection, then, is a part (see olive:hasPart and its inverse) of an instance of ex:Pack (or one of its subclasses - e.g. ex:PackOfSurgicalMaskX); ex:Pack is an instance of olive:ProductUnitType (as are its subclasses, if such there be).""" ;
.

olive:ProductStatus a owl:Class ;
        rdfs:subClassOf olive:ProductCategory, olive:Status ;
        rdfs:label "product status"^^xsd:string;
        skos:prefLabel "product status"@en ;
        rdfs:comment """This is the class of 'tags' for product statuses. For example, olive:Status-Inactive and olive:Status-Build are two statuses that can be applied to instances of olive:Product."""^^xsd:string ;
.

olive:Professional a owl:Class ;
	rdfs:label "professional"^^xsd:string ;
        skos:prefLabel "professional"@en ;
	skos:altLabel "employed person"@en ;
	rdfs:subClassOf olive:Person ;
	rdfs:comment """olive:Professional is the class of all persons who do some job professionally."""^^xsd:string ;
.

olive:Proposition a owl:Class ;
	rdfs:subClassOf olive:Content ;
	rdfs:label "proposition"^^xsd:string ;
	skos:prefLabel "proposition"^^xsd:string ;
	rdfs:comment """This is the class of all propositions. When modeling a given content, such as a belief or goal, it is sometimes useful to explicitly represent that content as being expressable (see olive:abstractsTo) as a proposition (or colleciton of propositions). In such a case, you can use one or more instances of this class along with the following properties: olive:propositionSubject, olive:propositionProperty, olive:propositionObject. At base, then, each instance of this class is the reified content of a triple.
	
	For example, (:Proposition1 olive:propositionSubject :Desdemona) + (:Proposition1 olive:propositionProperty olive:loves) + (:Proposition1 olive:propositionObject :Casio) means that Proposition1 expressed in triple form is (:Desdemona olive:loves :Casio)."""^^xsd:string ;
.

olive:QualitativeAmount-Generic a owl:Class ;
        rdfs:subClassOf olive:QualitativeAssessment ;
        rdfs:label "generic qualitative amount"^^xsd:string;
        skos:prefLabel "generic qualitative amount"@en ;
        rdfs:comment """Instances of this category allow us to qualitatively tag some amount with common language such as low/medium/high.

See instances of this category for more discussion. By its very nature, qualitative assessments are going to be context-sensitive and difficult to establish protocols for. But they are nonetheless both ubiquitous and useful, so we will try our best to be systematic and true to the source material in our data."""^^xsd:string ;
.

olive:QualitativeAssessment a owl:Class ;
        rdfs:subClassOf olive:Category ;
        rdfs:label "qualitative assessment"^^xsd:string;
        skos:prefLabel "qualitative assessment"@en ;
        rdfs:comment """Instances here qualitatively apply to something, as opposed to olive:Magnitude instances, which are quantitative measurements. Examples would include task priorities: low, medium, high, critical, blocker, etc."""^^xsd:string ;
.

olive:Query a owl:Class ;
	rdfs:label "query"^^xsd:string ;
        skos:prefLabel "query"@en ;
	rdfs:subClassOf olive:Request, olive:Function ;
	rdfs:comment """olive:Query is the class of all queries, which are a more specific kind of request. Namely, they are requests for information."""^^xsd:string ;
        olive:exampleSubclass olive:Query-SPARQL;
.

olive:Query-SPARQL a owl:Class ;
	rdfs:label "SPARQL query"^^xsd:string ;
        skos:prefLabel "SPARQL query"@en ;
	rdfs:subClassOf olive:Query ;
	rdfs:comment """olive:Query-SPARQL is the class of all queries that are formatted to query RDF according to the W3C standard."""^^xsd:string ;
	rdfs:seeAlso "https://www.w3.org/TR/sparql11-query/" ;
        olive:exampleInstance "UMLS_stored_query";
.

olive:RARC a owl:Class ;
        rdfs:subClassOf olive:InsuranceClaimType ;
        rdfs:label "RARC"^^xsd:string;
        skos:prefLabel "RARC"@en ;
        skos:altLabel "remittance advice remark code"@en ;
        rdfs:comment """These codes provide additional explanation for an adjustment already described by a Claim Adjustment Reason Code (CARC) or convey information about remittance processing.

Each instance should be named olive:RARC-##. So the RARC code 15 is olive:RARC-15."""^^xsd:string ;
.
olive:RatioMagnitude a owl:Class ;
	rdfs:label "ratio magnitude"^^xsd:string ;
	skos:prefLabel "ratio magnitude"@en ;
	rdfs:comment
		"EXAMPLE:  Speed.  The ratio magnitude is 60, the unit of measure might be MilesPerHour."^^xsd:string ,
		"NOTE:  A RatioMagnitude just has one decimal value."^^xsd:string ,
		"This is a number whose unit of measure is a ratio."^^xsd:string
		;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:Magnitude
			[
				a owl:Restriction ;
				owl:onProperty olive:hasUoM ;
				owl:someValuesFrom olive:RatioUnit ;
			]
		) ;
	] ;
	olive:formerName "gist:RatioMagnitude"^^xsd:string;
.

olive:RatioUnit a owl:Class ;
	rdfs:label "ratio unit"^^xsd:string ;
	skos:prefLabel "ratio unit"@en ;
	rdfs:comment
		"A UnitOfMeasure composed of a numerator unit and a denominator unit."^^xsd:string ,
		"EXAMPLE:  Miles per hour."^^xsd:string ,
		"NOTE: If needed, a conversion factor for a RatioUnit can be (recursively) derived from the conversion factors of the numerator and denominator units.  E.g., the derived conversion factor from km/minute to meters/second is 1000/60 or 16 2/3."^^xsd:string
		;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:UnitOfMeasure
			[
				a owl:Restriction ;
				owl:onProperty olive:denominator ;
				owl:someValuesFrom olive:UnitOfMeasure ;
			]
			[
				a owl:Restriction ;
				owl:onProperty olive:numerator ;
				owl:someValuesFrom olive:UnitOfMeasure ;
			]
		) ;
	] ;
	olive:formerName "gist:RatioUnit"^^xsd:string;
.

olive:Reactivation a owl:Class ;
	rdfs:label "reactivation"^^xsd:string ;
    skos:prefLabel "reactivation"@en ;
	rdfs:subClassOf olive:ChangeEvent ;
	rdfs:comment """olive:Reactivation is the class of all events in which some primary object (see olive:changedThing) is reactivated.

Note: just like every other event, one should specify when it happened using olive:timeOfEvent or its subproperties."""^^xsd:string ;
.

olive:ReasoningLevel a owl:Class ;
	rdfs:label "reasoning level"^^xsd:string ;
        skos:prefLabel "reasoning level"@en ;
	rdfs:subClassOf olive:Category ;
	rdfs:comment """olive:ReasoningLevel is the class of all reasoning types or levels. These can be thought of as isomorphic to inference engines."""^^xsd:string ;
        olive:exampleInstance olive:SL-StardogReasoningLevel;
.

olive:Recommendation a owl:Class ;
        rdfs:subClassOf olive:Content, olive:NonphysicalArtifact ;
        rdfs:label "recommendation"^^xsd:string;
        skos:prefLabel "recommendation"@en ;
        rdfs:comment """A recommendation is content that is designed to encourage/discourage some agent to take some action or acquire some thing. For example, Netflix might recommend that I watch Season 3 of Cobra Kai.

Recommendations have several important elements: the recommender (olive:recommender), the recommendee (olive:recommendedTo), the thing recommended (olive:recommendedThing), and the  level of recommendation (olive:recommendationDegree, olive:quantitativeStrength). To revist the above example, Netflix (recommender) recommends that I (recommendee) watch Cobra Kai (thing recommended) with some strength, say four stars (level of recomendation). Note that we could reasonably disagree about whether the thing recommended is Cobra Kai Season 3 or the *watching* of Cobra Kai Season 3. I expect this difference does not matter in most cases, but one should probably adopt a parallel structure if they are dealing with several recommendations. It would be strange, for example, to compare Netflix's recommendation that I watch New Girl Season 2 with their recommendation of Cobra Kai Season 3.

Subclasses of olive:Recommendation can be made based on the classes that the above properties might be relating. For example, olive:Recommendation-CPA is the subclass of recommendations that are recommendations of instances of olive:CPA. """^^xsd:string ;
        olive:exampleSubclass olive:Recommendation-CPA ;
.

olive:Record-Data a owl:Class ;
	rdfs:subClassOf olive:Content, olive:NonphysicalArtifact ;
	rdfs:label "data record"^^xsd:string ;
	skos:prefLabel "record (data)"@en ;
	rdfs:comment """The class of all records in some data source. Examples include a single row in a table in a relational database and the content of a physical file. This is a very broad class, intended to allow for suitable precisifications as needed."""^^xsd:string ;
.

olive:ReceivingADrug a owl:Class ;
        rdfs:subClassOf olive:TransferEvent ;
        rdfs:label "receiving a drug"^^xsd:string;
        skos:prefLabel "receiving a drug"@en ;
        rdfs:comment """This is a subclass of olive:Event in which someone 'receives' a drug (see olive:Drug). This includes taking medicine orally, being vaccinated via injection, or any other means of having a drug administered. Since it need not be administered by a medical professional, this is not a subclass of olive:MedicalCareEvent.

Also, one does not receive a drug if it is merely given into their possession (see olive:DrugDispensation). Receipt here entails that that the drug has been administered."""^^xsd:string ;
        olive:exampleSubclass olive:Vaccination ;
.

olive:Region a owl:Class ;
	rdfs:subClassOf olive:Place, olive:PhysicalObject ;
	rdfs:label "region"^^xsd:string ;
	skos:prefLabel "region"@en ;
	rdfs:comment """olive:Region is the class of all geographical regions. They need not be contiguous, or on the planet Earth, though they typically are both of these. Paradigm examples: the land area of the United States, the lot my house is on, Crater Lake and its immediate surroundings.

Note: the region is not identical to the geopolitical entity. The USA is distinct from the geographical region that partly constitutes the country. Also note that this is distinct from olive:Area. Every region has an area, however."""^^xsd:string ;
	owl:disjointWith olive:IntellectualProperty , olive:Magnitude , olive:Organization , olive:TimeInstant , olive:UnitOfMeasure ;
	olive:formerName "gist:GeoRegion"^^xsd:string;
.

olive:Relationship a owl:Class ;
		rdfs:subClassOf olive:State-Situation ;
        rdfs:label "relationship"^^xsd:string;
        skos:prefLabel "relationship"@en ;
        rdfs:comment """olive:Relationship is the class of all reified relationships that hold between agents (see olive:Agent). Marriages, friendships, and accounts are paradigm examples.

Non-examples include relations between agents and non-agents, such as ownership being located in some location (those will naturally find correlates in subclasses of olive:Event). Also, instances of olive:Contract are NOT instances of olive:Relationship. If you have a contract with someone, then you stand in a special relationship to them, but the contract is distinct from that relationship; instead, you might say that the contract grounds the special relationship.

We should specify the temporal extent of the relationship (using olive:timeOf and subproperties) as well as the agents involved (using olive:hasParty and subproperties). Each subclass should also likely be paired with a property that directly relates the parties of the relationship. So, if Bill and Susan are married, and we reify their marriage as :Marriage01, then we also probably want to be able to say something like (:Bill ex:isMarriedTo :Susan) to directly connect Bill and Susan. If such a property is created, make sure to note this in the comments for the property and corresponding class."""^^xsd:string ;
        olive:exampleSubclass olive:Account ;
	rdfs:subClassOf [a owl:Restriction ;
			    owl:onProperty olive:hasParty ;
			    owl:minCardinality "2"^^xsd:integer ;] ;
	owl:disjointWith olive:Contract ;
.

olive:Relationship-Contractual a owl:Class ;
        rdfs:subClassOf olive:Relationship ;
        rdfs:label "contractual relationship"^^xsd:string;
        skos:prefLabel "contractual relationship"^^xsd:string ;
        rdfs:comment """These are the relationships that are governed by some--that is, at least one--contract (see olive:Contract)."""^^xsd:string ;
	owl:equivalentClass [a owl:Class ;
			      owl:intersectionOf (olive:Relationship
						  [a owl:Restriction ;
						   owl:onProperty [owl:inverseOf olive:governs] ;
						   owl:someValuesFrom olive:Contract ])] ;
.

olive:Relationship-NonContractual a owl:Class ;
        rdfs:subClassOf olive:Relationship ;
        rdfs:label "non-contractual relationship"^^xsd:string;
        skos:prefLabel "non-contractual relationship"^^xsd:string ;
        rdfs:comment """These are the relationships that are not governed by any contract. All other relationships are instances of olive:Relationship-Contractual."""^^xsd:string ;
	owl:disjointWith olive:Relationship-Contractual ;
.

olive:RequestingCommunication a owl:Class ;
	rdfs:label "requesting communication"^^xsd:string ;
        skos:prefLabel "requesting communication"@en ;
	rdfs:subClassOf olive:RequestingSomething ;
	rdfs:comment """Requesting communication is the class of all requests such that the requested thing is communication. For example, one might request a conversation with a sales associate, or summon you to the principal's office."""^^xsd:string ;
        olive:exampleInstance "ex:SurveyRequest201"^^xsd:string ;
	owl:equivalentClass [owl:intersectionOf (
						  olive:RequestingSomething
						 [a owl:Restriction ;
						  owl:onProperty olive:requestedThing ;
						  owl:someValuesFrom olive:CommunicationEvent ])] ;
.

olive:RequestingEquipment a owl:Class ;
	rdfs:label "requesting equipment"^^xsd:string ;
        skos:prefLabel "requesting equipment"@en ;
	rdfs:subClassOf olive:RequestingSomething ;
	rdfs:comment """Requesting equipment is the class of all requests such that the requested thing is equipment. For example, one might request an MRI machine, or a new baseball bat, or the surgeon may ask for a scalpel."""^^xsd:string ;
        olive:exampleInstance ":BillsOrderingAnAlternator"^^xsd:string ;
	owl:equivalentClass [owl:intersectionOf (
						  olive:RequestingSomething
						 [a owl:Restriction ;
						  owl:onProperty olive:requestedThing ;
						  owl:someValuesFrom olive:Equipment ])] ;
.

olive:RequestingMedicalCareEvent a owl:Class ;
	rdfs:label "requesting medical care event"^^xsd:string ;
        skos:prefLabel "requesting a medical procedure"@en ;
	rdfs:subClassOf olive:RequestingSomething ;
	rdfs:comment """Requesting a medical care event is the class of all requests such that the requested thing is a medical procedure. For example, one might request physical therapy, or an appendectomy, or counseling. See olive:MedicalCareEvent."""^^xsd:string ;
        olive:exampleInstance ":BillsOrderingAnAlternator"^^xsd:string ;
	owl:equivalentClass [owl:intersectionOf (
						  olive:RequestingSomething
						 [a owl:Restriction ;
						  owl:onProperty olive:requestedThing ;
						  owl:someValuesFrom olive:MedicalCareEvent ])] ;
.

olive:RequestingSomething a owl:Class ;
	rdfs:label "requesting something"^^xsd:string ;
        skos:prefLabel "requesting something"@en ;
	skos:altLabel "ordering something"@en ;
	rdfs:subClassOf olive:CommunicationEvent ;
	rdfs:comment """Requesting something is the class of all communication events in which a request is made."""^^xsd:string ;
        gist:exampleSubclass olive:PrescribingADrug ;
        olive:exampleInstance "ex:MyAskingForARaise";
	owl:equivalentClass [a owl:Restriction ;
			     owl:onProperty olive:communicatedContent ;
			     owl:someValuesFrom olive:Request ;] ;
.

olive:Request a owl:Class ;
	rdfs:label "request"^^xsd:string ;
        skos:prefLabel "request"@en ;
	skos:altLabel "demand"@en, "order"@en ;
	rdfs:subClassOf olive:Content, olive:NonphysicalArtifact ;
	rdfs:comment """Requests are content in which something is requested. We usually want to specify the thing requested and the requesting agent. It is also nice to specify who the request is made to.

Compare this to the events in which an item is requested, olive:RequestingSomething."""^^xsd:string ;
        olive:exampleSubclass olive:Prescription ;
        olive:exampleInstance ":Prescription1"^^xsd:string ;
.

olive:Requirement a owl:Class ;
	rdfs:subClassOf olive:Intention, olive:Constraint ;
	rdfs:label "requirement"^^xsd:string ;
	skos:prefLabel "requirement"@en ;
	rdfs:comment "Each instance of olive:Requirement is content that specifies conditions that must be satisfied (whether these are conditional/hypothetical or absolute). For example, the specification of a physical or functional need that a particular design, product, or process must be able to perform in order to satisfy some agreement constitutes a requirement. Likewise, the content of my belief that humans need water to live is a requirement (in this case, non-normative). The specification of an obligation for a person or organization to behave in a certain way also constitutes a requirement."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:Requirement"^^xsd:string;
.

olive:RespondingToSomething a owl:Class ;
	rdfs:label "responding to something"^^xsd:string ;
        skos:prefLabel "responding to something"@en ;
	rdfs:subClassOf olive:CommunicationEvent ;
	rdfs:comment """olive:RespondingToSomething is the class of all communication events that are responses. Responses might be complicated, but they might also have simple contents like accepting or rejecting an offer. When possible, specify what the response is a response to."""^^xsd:string ;
.

olive:RevenueCycle a owl:Class ;
        rdfs:subClassOf olive:Event ;
        rdfs:label "revenue cycle"^^xsd:string;
        skos:prefLabel "revenue cycle"^^xsd:string ;
	skos:altLabel "rev cycle"^^xsd:string ;
        rdfs:comment """The revenue cycle is the event that spans a patient's entire experience with the healthcare system. It starts with scheduling an appointment and ends with paying for the costs incured along the way."""^^xsd:string ;
	owl:equivalentClass [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
	                                             owl:onProperty olive:hasSubevent ;
						     owl:someValuesFrom olive:PatientScheduling
						   ]
						   [ rdf:type owl:Restriction ;
	                                             owl:onProperty olive:hasSubevent ;
						     owl:someValuesFrom olive:PointOfServiceEvent
						   ]
						   [ rdf:type owl:Restriction ;
	                                             owl:onProperty olive:hasSubevent ;
						     owl:someValuesFrom olive:PatientEncounterReview
						   ]
						   [ rdf:type owl:Restriction ;
	                                             owl:onProperty olive:hasSubevent ;
						     owl:someValuesFrom olive:ChargeCaptureCoding
						   ]
						   [ rdf:type owl:Restriction ;
	                                             owl:onProperty olive:hasSubevent ;
						     owl:someValuesFrom olive:ClaimSubmission
						   ]
						   [ rdf:type owl:Restriction ;
	                                             owl:onProperty olive:hasSubevent ;
						     owl:someValuesFrom olive:ClaimProcessing
						   ]
						   [ rdf:type owl:Restriction ;
	                                             owl:onProperty olive:hasSubevent ;
						     owl:someValuesFrom olive:PaymentPostingAppealsAndCollections
						   ]

						   ) ;
						   rdf:type owl:Class ] ;
.

olive:Room a owl:Class ;
	rdfs:subClassOf olive:Place, olive:Container, olive:PhysicalArtifact ;
	rdfs:label "room"^^xsd:string ;
	skos:prefLabel "room"@en ;
	rdfs:comment "An enclosed area within a building."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:Room"^^xsd:string;
.

olive:Row-Data a owl:Class ;
        rdfs:subClassOf olive:Collection, olive:Section ;
        rdfs:label "data row"^^xsd:string;
        skos:prefLabel "row"^^xsd:string ;
	skos:altLabel "record"^^xsd:string ;
        rdfs:comment """Each instance of olive:Row-Data is the collection of cells (see olive:Cell-Data) for a given row or record. Each row should a referent (see olive:hasReferent)."""^^xsd:string ;
.

olive:School a owl:Class ;
	rdfs:label "school"^^xsd:string ;
        skos:prefLabel "school"@en ;
	rdfs:subClassOf olive:Organization ;
	rdfs:comment """olive:School is the class of all organizations that aim primarily provide a place for learning and teaching. This class includes traditional K-12 education and Universities as well as other types of schools, such as drivers education schools an d trade schools. """^^xsd:string ;
        olive:exampleSubclass olive:University ;
.

olive:Section a owl:Class ;
        rdfs:subClassOf olive:Content ;
        rdfs:label "section"^^xsd:string;
        skos:prefLabel "section"^^xsd:string ;
        rdfs:comment """Sections are parts of content, considered abstractly. For examples: the introduction to one's speech, the conclusion of a paper, the bridge to a song, or the chase scene in an exciting movie. Since being a part of some broader content is essential to this class, every instance should be asserted to be part of some 'complete' content, which must be an instance of olive:Content.

Again, note that this is for abstract content, not for any physical/virtual manifestation of the abstract content. If you have a particular page of some book, that page itself will be an instance of olive:Snippet. And, in turn, that olive:Snippet will instantiate (see olive:instantiate) the olive:Section that appears on the page."""^^xsd:string ;
        owl:equivalentClass [owl:intersectionOf ([a owl:Restriction ;
			    			  owl:onProperty olive:partOf ;
						  owl:someValuesFrom olive:Content ;]
						olive:Content )] ;
.

olive:SegmentationStrategy a owl:Class ;
        rdfs:subClassOf olive:Category ;
        rdfs:label "segmentation strategy"^^xsd:string;
        skos:prefLabel "segmentation strategy"@en ;
        rdfs:comment """Instances are tags for marketing strategies that segment the market along some specified difference. Examples would include regional or demographic segmentation."""^^xsd:string ;
	rdfs:seeAlso "https://www.lotame.com/what-is-market-segmentation/"^^xsd:string ;
.

olive:SensitiveInformationType a owl:Class ;
	rdfs:subClassOf olive:DataClassificationType ;
	rdfs:label "sensitive information type"^^xsd:string ;
        skos:prefLabel "type of sensitive information"@en ;
	rdfs:comment """olive:SensitiveInformationType is the class of all tags that indicate some information is sensitive. Notably, this includes PHI and Olive IP. These tags can be created to better regulate access to named graphs or other sources of information."""^^xsd:string ;
        olive:exampleInstance olive:SensitiveInfo-PHI, olive:SensitiveInfo-OliveIP ;
.

olive:Sensor a owl:Class ;
	rdfs:subClassOf olive:Equipment ;
	rdfs:label "sensor"^^xsd:string ;
	skos:prefLabel "sensor"@en ;
	rdfs:comment "A device that can detect something and report it. Light sensors, temperature sensors,"^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:Sensor"^^xsd:string;
.

olive:ServiceCodeCategory a owl:Class ;
	rdfs:label "service code category"^^xsd:string ;
        skos:prefLabel "service code"@en ;
	rdfs:subClassOf olive:Category ;
	rdfs:comment """olive:ServiceCodeCategory is the class of all service codes (see olive:serviceCode and olive:hasServiceCode). A service code is like an identifier (see olive:ID), but instead of identifying an individual it identifies a class of medically related things. So, the ICD10 Diagnostic Service Code denoted by K00.0 is for Anodontia.

Each instance is a code, and is used as a tag for individual persons/events/etc. that are tagged of that sort. The importance of the tagging depends on the kind of code, but it is often used for diagnosis or billing.

Whenever possible, uses a subclass of service code category that picks out the particular convention being used (e.g. ICD9 or ICD10 or HCPCS)."""^^xsd:string ;
.

olive:SexAndGenderCategory a owl:Class ;
	rdfs:label "sex and gender category"^^xsd:string ;
        skos:prefLabel "sex and gender classification"@en ;
	rdfs:subClassOf olive:Category ;
	rdfs:comment """olive:SexAndGenderCategory is the class of all (biological/assigned) sex and gender categories. This includes, but need not be limited to, sex assigned at birth, identified gender, and gender expression."""^^xsd:string ;
        olive:exampleSubclass olive:Sex-Category, olive:Gender-Category ;
        olive:exampleInstance olive:Male-Sex, olive:Male-Gender ;
.

olive:Sex-Category a owl:Class ;
	rdfs:label "sex-category"^^xsd:string ;
        skos:prefLabel "sex category"@en ;
	rdfs:subClassOf olive:SexAndGenderCategory ;
	rdfs:comment """olive:Sex-Category is the class of all sexes that can be assigned at birth. Make sure to distinguish this from gender (see olive:Gender-Category). This category is notionally about some biological feature, such as number of X and Y chromosomes, of the individual. It's worth noting that in practice, medical assignments of sex may not actually be entirely based in physiological facts."""^^xsd:string ;
        olive:exampleInstance olive:Female-Sex, olive:Male-Sex ;
.

olive:SimpleUnit a owl:Class ;
	rdfs:label "simple unit"^^xsd:string ;
	skos:prefLabel "simple unit"@en ;
	rdfs:subClassOf olive:UnitOfMeasure ;
	rdfs:comment """Each simple unit has a base unit and a conversion factor to the base. The bases are from the System International (SI). The conversion factor is the number which one multiplies a Unit by to get to base, or divides by to get from base.  E.g., the convertToBase for inch is 0.0254 to get to the base unit (meter)."""^^xsd:string ;
	olive:formerName "gist:SimpleUnitOfMeasure"^^xsd:string;
.

olive:Situation a owl:Class ;
	owl:equivalentClass [owl:unionOf (olive:Event olive:State-Situation)] ;
	rdfs:label "situation"^^xsd:string ;
	skos:prefLabel "situation"@en ;
	rdfs:comment """olive:Situation is the common generalization of two more intuitive classes: olive:Event and olive:State-Situation. Roughly speaking, a situation is either (1) something that happens in the world (an instance of olive:Event), or (2) some state of the world (an instance of olive:State-Situation). All instances of olive:Situation have a temporal extent (even if it's just an instant) and involve at least one role player (i.e. something that might be said to be \"involved\" in the situation in some way). Given that this class is intended as a common generalization of olive:Event and olive:State-Situation, one should almost always use one of those two subclasses when ontologizing an individual."""^^xsd:string ;
.

olive:Snippet a owl:Class ;
        rdfs:subClassOf olive:ContentBearingThing ;
        rdfs:label "snippet"^^xsd:string;
        skos:prefLabel "snippet"^^xsd:string ;
        rdfs:comment """Snippets are parts of larger content bearing things. For examples: a page from a book, the portion of a physical CD that contains the first track of a song, the part of the Mona Lisa that contains her smile. Since being part of some broader content bearing thing is essential to this class, every instance should be asserted to be part of some 'complete' content bearing thing, which must be an instance of olive:ContentBearingThing.

Again, note that this is for concrete content bearing things, not for the abstract content communicated by such things. If you have a particular page of some book, that page itself will be an instance of olive:Snippet. And, in turn, that olive:Snippet will instantiate (see olive:instantiate) the olive:Section that appears on the page."""^^xsd:string ;
	owl:equivalentClass [a owl:Restriction ;
			     owl:onProperty olive:instantiates ;
			     owl:someValuesFrom olive:Section] ,
			    [owl:intersectionOf ( [a owl:Restriction ;
			    			  owl:onProperty olive:partOf ;
						  owl:someValuesFrom olive:ContentBearingThing]
						  olive:ContentBearingThing)] ;
.

olive:SoftwareApplication a owl:Class ;
        rdfs:subClassOf olive:NonphysicalArtifact ;
        rdfs:label "software application"^^xsd:string;
        skos:prefLabel "software application"^^xsd:string ;
        rdfs:comment """This is the class of all software programs designed for end users. Notable subclasses include IDEs, Word Processing software, 

Notionally, this class does not include operating systems, though this is not enforced. If that distinction becomes important, an ontologist should update the ontology and this comment accordingly."""^^xsd:string ;
.

olive:SoftwareEngineer a owl:Class ;
	rdfs:label "software engineer"^^xsd:string ;
        skos:prefLabel "software engineer"@en ;
	rdfs:subClassOf olive:Professional ;
	rdfs:comment """olive:SoftwareEngineer is the class of all software engineers."""^^xsd:string ;
.

olive:SoftwareInterface a owl:Class ;
        rdfs:subClassOf olive:NonphysicalArtifact;
        rdfs:label "software interface"^^xsd:string;
        skos:prefLabel "software interface"^^xsd:string ;
	rdfs:subClassOf [a owl:Restriction ;
			 owl:onProperty olive:partOf ;
			 owl:someValuesFrom olive:SoftwareApplication ];
	rdfs:comment """This is the class of all instances that are ways in which someone can interact with a olive:SoftwareApplication. Examples include olive:API, olive:GUI, etc."""^^xsd:string ;
        olive:exampleSubclass olive:API, olive:GUI;
.

olive:Sport a owl:Class ;
	rdfs:label "sport"^^xsd:string ;
        skos:prefLabel "sport"@en ;
	rdfs:subClassOf olive:Game ;
	rdfs:comment """olive:Sport is the class of all games that are essentially physical. See the discussion on olive:SportsEvent; while this class is controversial at the margins, this ontology adopts a pretty inclusive conception of sports. Horseshoes and competitive cheerleading and e-sports are sports, even if they may be less obviously instances than basketball and rugby."""^^xsd:string ;
        olive:exampleSubclass olive:TeamSport, olive:BallSport, olive:CourtSport ;
.

olive:SportsEvent a owl:Class ;
	rdfs:label "sport"^^xsd:string ;
        skos:prefLabel "sport"@en ;
	rdfs:subClassOf olive:GameEvent;
	olive:instanceOf olive:PhysicalActivityType ;
	rdfs:comment """olive:SportsEvent is the class of all competitive physical activities that are typically performed for entertainment or leisure, though we include professional playing of such activities in this class as well (e.g. NBA games). This class is notoriously tricky to pin down. While just about everyone agrees on paradigm sports like boxing, basketball, baseball, and rugby, there is disagreement about activities that are less (directly) physical or less obviously competitive. Some take issue with e-sports on the grounds that the activity is not sufficiently physical. Others take issue with cheerleading or dance on the grounds that the physicality isn't directed at one's competitors. There is no doubt a social component here: in societies where ice dancing is popular and ice dancers are celebrities, I would expect ice dancing to be uncontroversially a sport.

Note that like olive:GameEvent, olive:SportsEvent is the class of events in which some sport is played. For the sport itself, see olive:Sport."""^^xsd:string ;
        olive:exampleSubclass olive:BasketballGame, olive:FootballGame;
.

olive:SSN a owl:Class ;
        rdfs:subClassOf olive:ID ;
        rdfs:label "SSN"^^xsd:string;
        skos:prefLabel "SSN"@en ;
	skos:altLabel "Social Security Number (SSN)"@en, "social"@en, "social security number"@en ;
        rdfs:comment """This is the subclass of olive:ID for social security numbers."""^^xsd:string ;
.

olive:SSVID a owl:Class ;
	rdfs:label "SSVID"^^xsd:string ;
        skos:prefLabel "SSV ID"@en ;
	rdfs:subClassOf olive:ID ;
	rdfs:comment """olive:SSVID is the class of all identifiers for entities that occur in the SSV data."""^^xsd:string ;
	olive:identifierTypeSupportsURITemplate olive:SSVURITemplate ;
.

olive:State-Situation a owl:Class ;
	owl:disjointWith olive:Event ;
	rdfs:subClassOf olive:Situation ;
	rdfs:label "situation state"^^xsd:string ;
	skos:prefLabel "state"@en ;
	skos:altLabel "static situation"@en , "state of affairs"@en ;
	rdfs:comment """olive:State-Situation is the class of all states of the world. Instances of this collection are temporally-extended (if even for an instant only) states that are constituted by one or more relations holding between one or more objects. The hallmark of such states is that if the focal relationship(s) change/fail to hold, the state ceases to exist.
	
	Examples of this class include: Barack Obama's being President, my having arthritis, and my being alive.
	
	Note that this class is disjoint with olive:Event and that there can be subtle differences between instances of this class and instances of that one. For example, we can distinguish between Barack Obama's being President (olive:State-Situation) and the presidency of Barack Obama (olive:Event). The former obtains simply as long as Barack Obama holds the office of President and involves no specific acts that Obama performed while being President. The latter, on the other hand, is an event that temporally overlaps (and is, in fact, temporally coextensive with) and is causally related to the former, subsumes all the various acts that Obama performed as President, but is not essentially constituted by the relationship that constitutes Obama's being president (even if, again, there is a causal relationship between the two). Likewise, we can distinguish the state (or condition) of my having arthritis from all the events that temporally overlap that state including the diagnosis of my arthritis, the various treatments of my arthritis, and various arthritic flare-ups that I might experience. Note also that instances of this collection need be \"static\" in the sense that they cannot involve, e.g., change or motion: my being alive is constituted by the proper functioning of certain biological systems, which certainly involves change and/or motion: the crucial point, though, is that the change and/or motion involved grounds the obtaining of the unchanging state of my being alive.
	
	There is a clear sense in which choices regarding how a particular thing is modeled will determine whether it is an instance of olive:Event or olive:State-Situation. For example, a top's spinning on my desk could be an instance of olive:State-Situation if the underlying model is of an object being in a (in some sense \"unchanging\") state of motion, or it could be an instance of olive:Event if the underlying model is of the top undergoing various movements (or one could choose to model things both ways, depending on one's interests). There is no real hard-and-fast rule with regard to which modeling idiom is preferable in any given case: whether one opts to model something as an instance of olive:State-Situation or olive:Event will largely depend on pragmatic considerations (although there are certainly exceptions to this).
	
	As a general rule, an instance of olive:State-Situation should not be conceived of as being divisible into multiple instances: there is no meaningful sense in which there are many different states of \"Obama's being President\". That state can obtain or fail to obtain, and it can do so at various times, but there is no sense in which any given occurrence of \"Obama's being President\" is different from any other. Now, we might want to distinguish between different occasions on which Obama is President: in such a case, we would need to model these different occasions as events, but there is also presumably a common state that temporally overlaps them - i.e. the state of Obama's being President. One can also see how these sorts of considerations might be applied to the top example from just above: there is the \"top's being in some kind of motion\" (state) and the various specific movements of the top (events) that overlap the former.
	
	When modeling the temporal extent of an instance of olive:State-Situation, one should use olive:stateObtainsDuring to relate the state to one or more time intervals."""^^xsd:string ;
.

olive:State-US a owl:Class ;
        rdfs:subClassOf olive:Region;
        rdfs:label "US state"^^xsd:string;
        skos:prefLabel "state"@en ;
        rdfs:comment """The geographical territory for one of the fifty members of the United States.

As with the other geographical regions, this is not identical to the state government or populace. That government governs this region, and the populace resides in the region."""^^xsd:string ;
.

olive:Status a owl:Class ;
        rdfs:subClassOf olive:Category ;
        rdfs:label "status"^^xsd:string;
        skos:prefLabel "status"^^xsd:string ;
        rdfs:comment """This is the class of 'tags' for statuses. For example, olive:Status-Inactive can describe a project that that is inactive. Or we can describe that status of an account using an instance of olive:AccountStatus."""^^xsd:string ;
	olive:exampleSubclass olive:AccountStatus, olive:ProductStatus ;
.

olive:StoredQuery a owl:Class ;
	rdfs:label "stored query"^^xsd:string ;
        skos:prefLabel "stored query"@en ;
	rdfs:subClassOf olive:Query-SPARQL ;
	rdfs:comment """olive:StoredQuery is the class of all SPARQL queries that have been saved for future use."""^^xsd:string ;
.

olive:StructuredDataType a owl:Class ;
	olive:instanceOf olive:Class-SecondOrder ;
	rdfs:subClassOf olive:Facet ;
	olive:instancesAreSubclassesOf olive:Dataset ;
	rdfs:label "structured data"^^xsd:string ;
	skos:prefLabel "structured data"@en ;
	rdfs:comment """This is the class of all subclasses of olive:Dataset all instances of which are encoded/expressed in a structure. Paradigmatic examples include data expressed by a CSV file and data stored in a database. Paradigmatic non-examples include data expressed in a free-text PDF."""^^xsd:string ;
.

olive:Student a owl:Class ;
	rdfs:label "student"^^xsd:string ;
        skos:prefLabel "student"@en ;
	rdfs:subClassOf olive:Person ;
	rdfs:comment """olive:Student is the class of all students. One is only a student when they are attending classes of some sort. These classes may be academic (e.g. university classes) or non-academic (e.g. student at Cobra Kai dojo)."""^^xsd:string ;
	olive:mapsTo-providerType "Student" ;
.

olive:Surgery a owl:Class ;
        rdfs:subClassOf olive:MedicalCareEvent ;
        rdfs:label "surgery"^^xsd:string;
        skos:prefLabel "surgery"@en ;
        rdfs:comment """This is the subclass of olive:MedicalCareEvent in which a surgery is performed."""^^xsd:string ;
.

olive:System a owl:Class ;
	rdfs:label "system"^^xsd:string ;
	skos:prefLabel "system"@en ;
	rdfs:subClassOf owl:Thing ;
	rdfs:comment """olive:System is the class of all things that have interconnected parts that 'work together' in performing some function. This includes both physical and non-physical systems. Physical systems include things like engines, HVAC systems, and humans. Nonphysical systems include abstract structures like languages and grammars, and strategic systems for games like chess (e.g. the Queen's Gambit).

Upon reflection, you may realize that just about everything is a system. My coffee mug seems simple, but it's really a drink-holding system: the handle for ease of holding, the bottom is attached to the sides in a way that each component seals liquid off in a different direction. The rim is smooth so it doesn't cut my lips when I drink. The comic art on the side designed to get a chuckle from coworkers and make the drinking more pleasurable.

In light of how ubiquitous systems are, you might think this class is worthless: if everything is special, then nothing is. In some sense, this is right. It's pointless to tag everything that is a system as a system. But it IS useful to note that something is a system when you are considering it as a system. Systems are what they are precisely because they have some function(s), and their having parts that are property situated and functional is essential to accomplishing what they are intended to accomplish. Note that many systems have parts which are themselves systems: my car is a system that has an electrical system, a drivetrain, a radio, and so on.

The vast majority of things that will be represented in the ontology as systems will be physical systems. Even things that 'feel' abstract like an offensive scheme in football are physically realized by players executing the scheme. Moreover, we are usually concerned with how we can repair/replace/modify a part of the system in such a way as to preserve or improve performance. For example, when a bearing in some circular saw seizes up, how does that affect performance? And how can we fix it?

If we are question-driven in this way, we should be sure to include information about what a system's parts are (see olive:hasPart and sub-properties), and what the system is intended to accomplish (see olive:Intention and subclasses)."""^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	.

olive:Table-Data a owl:Class ;
        rdfs:subClassOf olive:Section ;
        rdfs:label "data table"^^xsd:string;
        skos:prefLabel "table"^^xsd:string ;
        rdfs:comment """Every relational database has at least one instance of olive:Table-Data as a part.

Tables should be further specified by the number of columns, rows, as well as the logical meaning of those rows and columns."""^^xsd:string ;
.

olive:Task a owl:Class ;
	rdfs:label "task"^^xsd:string ;
        skos:prefLabel "task"@en ;
	rdfs:subClassOf olive:Commitment ;
	rdfs:comment """olive:Task is the class of all tasks or jobs to be done. They can best be thought of as imperatives, or collections of imperatives. Finishing mapping the fhir ontology is a task for the ontologist currently writing this comment. That means that I can complete or fail to complete the task. To express this, one can use olive:categorizedBy and then an instance of olive:CommitmentCategory.

Completed tasks may also be events, but not all tasks are events. For example, if I tell you to open the window, and you do so, then it is sensible to give start and end times to your satisfied task of opening the window. However, if I have a task to do the dishes and never do so, it seems wrong to say that there is some event that corresponds to my washing the dishes that failed to accomplish my task. If pressed we could describe the state of affairs in which I failed to do the dishes as being the task, but this seems a stretch (and probably not practical at any rate, even if it can be theoretically more satisfying)."""^^xsd:string ;
        olive:exampleInstance "ex:MyDoingTheDishes"^^xsd:string ;
.

olive:Taxonomy a owl:Class ;
	rdfs:label "taxonomy"^^xsd:string ;
        skos:prefLabel "taxonomy"@en ;
	rdfs:subClassOf olive:KnowledgeGraph ;
	rdfs:comment """olive:Taxonomy is the class of all tree-structure knowledge graphs that provide a hierarchical vocabulary for classifying things."""^^xsd:string ;
        olive:exampleInstance "the Linnaean taxonomy";
.

olive:Territory-US a owl:Class ;
    rdfs:subClassOf olive:Region ;
    rdfs:label "US territory"^^xsd:string ;
    skos:prefLabel "territory"@en ;
    rdfs:comment """The geographical territory for one of the unincorporated territories under the control of the United States government.

As with the other geographical regions, this is not identical to the state government or populace. That government governs this region, and the populace resides in the region."""^^xsd:string ;
.

olive:TelephoneNumber a owl:Class ;
	rdfs:subClassOf olive:VirtualAddress ;
	rdfs:label "telephone number"^^xsd:string ;
	skos:prefLabel "phone number"@en ;
	rdfs:comment "A numeric code a telephonic device uses for contacting another telephonic device."^^xsd:string ,
		"EXAMPLES:  Mobile, fax, or landline phone number."^^xsd:string	;
	olive:formerName "gist:TelephoneNumber"^^xsd:string;
	owl:equivalentClass [a owl:Restriction ;
			     owl:onProperty olive:categorizedBy ;
		             owl:hasValue olive:ContactType-Phone ;] ;
        olive:uriTemplate [
                olive:uniqueText "olive:PhoneNumber/ribbonUuid={uuid};number={number}" ;
                olive:uriUsesProperty olive:ribbonUuid ;
                olive:note "Applicable when importing data from the RibbonHealth API. Uses the ribbonUuid of the olive:Locaton associated with the phone number in question. {number} distinguishes it from other numbers at the same location"^^xsd:string ;
                ];
.

olive:Temperature a owl:Class ;
	rdfs:label "temperature"^^xsd:string ;
	skos:prefLabel "temperature"@en ;
	rdfs:comment "The degree or intensity of heat present in a substance or object, especially as expressed according to a comparative scale."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [a owl:Class ;
			     owl:intersectionOf (olive:Magnitude
			     			 [a owl:Restriction ;
						  owl:onProperty olive:hasUoM ;
						  owl:someValuesFrom olive:TemperatureUnit ;]);] ;
	olive:formerName "gist:Temperature"^^xsd:string;
.

olive:TemperatureUnit a owl:Class ;
	rdfs:label "temperature unit"^^xsd:string ;
	skos:prefLabel "temperature unit"@en ;
	rdfs:comment "Unit of measurement for expressing temperature.  Per SI, the base of temperature is in Kelvin, to allow for all units to be expressed relative to a real (in this case absolute) zero."^^xsd:string ;
	owl:equivalentClass [a owl:Class ;
			     owl:intersectionOf (olive:SimpleUnit
			     			 [a owl:Restriction ;
						  owl:onProperty olive:hasBaseUnit ;
						  owl:hasValue olive:_kelvin ;]
						 [a owl:Restriction ;
						  owl:onProperty olive:conversionOffset ;
						  owl:someValuesFrom xsd:double ;]) ;] ;
	olive:formerName "gist:TemperatureUnit"^^xsd:string;
.

olive:Template a owl:Class ;
	rdfs:subClassOf olive:Artifact ;
	rdfs:label "template"^^xsd:string ;
	skos:prefLabel "template"@en ;
	rdfs:comment
		"EXAMPLE:  A form. A filled-in form has the structure of the form with data entered into some or all of the fields."^^xsd:string ,
		"Something used to make instances in its own image.  In manufacturing this would be specialized as a die to make stamped parts, cookie cutters are templates for cookies, and forms are templates for data."^^xsd:string
		;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:disjointWith
		olive:TimeInstant ,
		olive:UnitOfMeasure
		;
	olive:formerName "gist:Template"^^xsd:string;
.

olive:Test a owl:Class ;
	rdfs:label "test"^^xsd:string ;
        skos:prefLabel "test"@en ;
	rdfs:subClassOf olive:Request ;
	rdfs:comment """olive:Test is the class of all tests. There are a large variety of tests: medical tests (e.g. a blood test), academic tests (e.g. a math test), knowhow tests (e.g. a driver's test), and software tests (e.g. an integration test). See subclasses for the more specific version as needed.

In general, a test is a request for information where the information conveys a capability. So, a blood test might tell us whether my body is capable of producing the right amount of insulin. A math test might tell you whether I have mastered the course material and can find the area under a given function. A driver's test might tell us whether I can safely join the driving population. An integration test might tell us whether my software program will reliably produce the desired results."""^^xsd:string ;
        olive:exampleSubclass olive:Test-Software ;
.

olive:Test-Software a owl:Class ;
	rdfs:label "Test-software"^^xsd:string ;
        skos:prefLabel "test"@en ;
	rdfs:subClassOf olive:Test ;
	rdfs:comment """olive:Test-Software is the class of all tests designed to ensure the proper functioning of software."""^^xsd:string ;
.

owl:Thing olive:uriTemplate [olive:uniqueText "olive:{salient-class}/uuid=";
	  		     olive:note "This is the most general template involving a UUID."];.

olive:Tier a owl:Class ;
	rdfs:label "tier"^^xsd:string ;
	skos:prefLabel "tier"@en ;
	rdfs:subClassOf olive:Section ;
	rdfs:comment """The collection of all tiers, which are components of \"abstract\" structures that help to enforce ordering of elements arranged in such a structure (or to which such a structure applies). Tiers may be thought of as parts of abstract ordering or ranking structures (see, e.g., olive:OrdinalCollection), which structures themselves may be thought of as applying to or being part of further abstract objects (e.g. the structure of a taxonomy). This class is designed to be especially useful for modeling cases in which the ordering of the elements of a structure is enforced by their association with tiers, rather than their association with tiers being dependent upon their ordering. In other words, it may be useful to make use of this class in cases in which one needs to represent information about tiers as ground-level facts rather than as being ultimately dependent upon other facts."""^^xsd:string ;
.

olive:TimeInstant a owl:Class ;
	rdfs:subClassOf olive:TimeInterval ,
		[
			a owl:Restriction ;
			owl:onProperty olive:hasPrecision ;
			owl:someValuesFrom xsd:double ;
		] ,
		[
			a owl:Restriction ;
			owl:onProperty olive:localDate ;
			owl:someValuesFrom xsd:string ;
		] ,
		[
			a owl:Restriction ;
			owl:onProperty olive:localDateTime ;
			owl:someValuesFrom xsd:dateTime ;
		] ,
		[
			a owl:Restriction ;
			owl:onProperty olive:localTime ;
			owl:someValuesFrom xsd:string ;
		] ,
		[
			a owl:Restriction ;
			owl:onProperty olive:universalDate ;
			owl:someValuesFrom xsd:string ;
		] ,
		[
			a owl:Restriction ;
			owl:onProperty olive:universalDateTime ;
			owl:someValuesFrom xsd:dateTime ;
		] ,
		[
			a owl:Restriction ;
			owl:onProperty olive:universalTime ;
			owl:someValuesFrom xsd:string ;
		]
		;
	rdfs:label "time instant"^^xsd:string ;
	skos:prefLabel "point in time"@en ;
	rdfs:comment """olive:TimeInstant is the class of all points in time. Despite the name 'instant', every point in time has some duration, and that duration is equal to the precision with which the time point is given. So, January 1, 1875 is an instance of olive:TimeInstant, and it has a duration of one day. On the other hand, 12:00:01 on 5-18-2829 is also a time instant, and it has a duration of one second.

By convention, if no time zone is specified, we assume that the time is given in GMT.

To relate a time instant to the date/time, use one of olive:universalDate, olive:universalTime, or olive:universalDateTime.

To note the precision, use olive:hasPrecision."""^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:disjointWith olive:UnitOfMeasure ;
	.

olive:TimeInterval a owl:Class ;
	rdfs:label "time interval"^^xsd:string ;
        skos:prefLabel "time interval"@en ;
	skos:altLabel "time period"@en ;
	rdfs:subClassOf owl:Thing ;
	rdfs:comment """olive:TimeInterval is the class of all stretches of time. These might be used to describe when a contract is in effect, or the period of time in which some individual lived (e.g. King Arthur was alive during the Middle Ages). Each time period must have at least a start or an end time, though usually they will have both. Time periods with only one bound are probably things like 'The Modern Age', which is still ongoing and therefore may have no definitive end point.

A subclass of time interval is olive:TimeInstant, which is a point (with some granularity) in time."""^^xsd:string ;
        olive:exampleSubclass olive:TimeInstant;
        olive:exampleInstance "ex:TheMiddleAges"^^xsd:string ;
.

olive:Transaction a owl:Class ;
	rdfs:label "transaction" ;
	skos:prefLabel "transaction"@en ;
	rdfs:subClassOf olive:Exchange;
	olive:instanceOf olive:HumanActivityType ;
	rdfs:comment """olive:Transaction is the subclass of olive:Exchange all instances of which involve agents as the \"endpoints\" of the exchange. In other words, transactions are exchanges that occur between agents (although the agents themselves need not be the things that are exchanged).

	An important subclass of olive:Transaction is olive:BuyingAndSelling.""" ;
	olive:exampleSubClass olive:BuyingAndSelling ;
.

olive:TransferEvent a owl:Class ;
	rdfs:label "transfer event"^^xsd:string ;
        skos:prefLabel "transfer event"@en ;
	rdfs:subClassOf olive:Event ;
	rdfs:comment """olive:TransferEvent is the class of all events in which the possession, ownership, or control of something is altered. Examples include, adoptions (custody is transferred), payment (money is transferred), buying something (the bought thing is transferred, as well as the payment), and passing a basketball (control is transferred). Notice that the control need not be, but is often, legal control.

Note that this classification does not entail or exclude the object moving. Compare with olive:MovementEvent."""^^xsd:string ;
        olive:exampleSubclass olive:DrugDispensation, olive:PayingForSomething ;
.

olive:UnitOfMeasure a owl:Class ;
	rdfs:subClassOf olive:NonphysicalThing ;
	rdfs:label "unit of measure"^^xsd:string ;
	skos:prefLabel "unit of measure"@en ;
	skos:altLabel "unit"@en ;
	rdfs:comment """The class of all units by which we measure things. Example units include kilogram, meter, pounds per square inch, and watts. 

olive:UnitOfMeasure instances are most frequently used in the object slot of triples using the olive:hasUoM.

Note: when just counting something, the unit may be just the object type being counted. For instance, when I have 5 apples, the unit is apples. To denote this unit, use olive:_each."""^^xsd:string ;
        olive:exampleSubclass olive:BaseUnit, olive:MassUnit, olive:RatioUnit ;
	olive:formerName "gist:UnitOfMeasure"^^xsd:string;
.

olive:University a owl:Class ;
	rdfs:label "university"^^xsd:string ;
        skos:prefLabel "university"@en ;
	rdfs:subClassOf olive:School ;
	rdfs:comment """olive:University is the class of all educational institutions that grant undergraduate degrees. Note that this combines what many in the US also call 'colleges'. While 'college' evokes a smaller, more intimate setting with fewer course offerings, in practice the terms are used synonymously so much that it would be counter-productive to separate them. Note that in other countries, 'college' may suggest other things, such as high school."""^^xsd:string ;
        olive:exampleInstance "Harvard", "Pacific Lutheran University", "Mount Holyoke College" ;
.


olive:UrgentCareCenter a owl:Class ;
	rdfs:label "urgent care center"^^xsd:string ;
        skos:prefLabel "urgent care"@en ;
	rdfs:subClassOf olive:MedicalCareOrganization ;
	rdfs:comment """olive:UrgentCareCenter is the class of all walk-in clinics that specialize in providing urgent care. They serve a similar purpose to emergency care facilities for patients with lower acuities."""^^xsd:string ;
	olive:mapsTo "Urgent Care" ;
.

olive:URITemplate a owl:Class ;
	rdfs:label "URI template"^^xsd:string ;
        skos:prefLabel "URI template"@en ;
	rdfs:subClassOf olive:Template ;
	rdfs:comment """olive:URITemplate is the class of all templates for minting URIs, in particular for the Olive ontology. See olive:uriTemplate and olive:uriTemplateUsesProperty.

These templates are of two basic sorts. First, there are templates that are non-random, determined solely be a set of properties that are sufficient for picking out an individual. For example, the template for olive:MedicalCareProvider is like this, where you can identify a provider by their npi. Persons can also often be identified by their SSN, or by their name/dob, or by some other set of properties. Second, there are templates that include a UUID, a randomly generated string. These are not guaranteed to be unique, but they are incredibly unlikely to result in collisions and pose some advantages over blank nodes.

In the end, we want our URIs to serve two main desiderata: 1) stably pick out distinct entities without collisions, and 2) still have names that gesture enough to the referent to be human readable."""^^xsd:string ;
	rdfs:seeAlso "https://docs.google.com/document/d/10WxIvFEf6mYra8pxaOewLo8xuWLK3-QVc7wYkEVKlMo/edit#";
.

olive:UseType a owl:Class ;
	rdfs:label "use type"^^xsd:string ;
        skos:prefLabel "use type"@en ;
	rdfs:subClassOf olive:Category ;
	rdfs:comment """olive:UseType is the class of all tags that signify how a thing is intended to be used. This is a pretty generic tag, and is initially motivated as targets for some very general code-types in fhir.

As a paradigm example, think about dishes. You can have dishes that are for everyday use, formal dining only, or perhaps just for display.

As with many categories, if there is enough substance in the term you might be better off creating a non-Category class or using a more robust object property."""^^xsd:string ;
        olive:exampleInstance olive:NormalUse ;
.

olive:UsingSomething a owl:Class ;
	rdfs:subClassOf olive:Event ;
	rdfs:label "using something" ;
	skos:prefLabel "using something"@en ;
	skos:altLabel "making use of something"@en , "utilizing something"@en ;
	rdfs:comment """olive:UsingSomething is the class of all events in which something is used (related via olive:affectedObject-Direct) by something (related via olive:doneByAgent).""" ;
.

olive:Vaccination a owl:Class ;
        rdfs:subClassOf olive:MedicalCareEvent, olive:ReceivingADrug ;
        rdfs:label "vaccination"^^xsd:string;
        skos:prefLabel "vaccination"@en ;
        rdfs:comment """This is the subclass of olive:ReceivingADrug and olive:MedicalCareEvent during which a patient is vaccinated. This usually is done via injection, but it need not be administered in that way."""^^xsd:string ;
.

olive:Variable a owl:Class ;
		rdfs:subClassOf olive:NonphysicalThing ;
        rdfs:label "variable"^^xsd:string;
        skos:prefLabel "variable"@en ;
        rdfs:comment """Variables are slots that can have values substituted in for them. Variables are often constituents of functions (see olive:Function)."""^^xsd:string ;
        olive:exampleSubclass olive:Input, olive:Output ;
.


olive:VersionedContent
    rdfs:subClassOf olive:Content ;
    rdfs:label "versioned content"^^xsd:string;
    skos:prefLabel "versioned content"^^xsd:string ;
    rdfs:comment "Some Content is published as a series of instantiations with explicit version names. Such publications _abstractTo_ an instance of VersionedContent. "^^xsd:string ;
.

olive:VersionID
    rdfs:subClassOf olive:ID ;
    rdfs:label "version" ;
    skos:preflabel "version of" ;
    rdfs:comment "Something that typically uses a string or number to name content which abstracts to an instance of Versioned Content. Typically uses olive:identifyingText to specify the actual token used for identification, and said text typically lends itself to interpretation as an ordered sequence." ;
.

olive:VirtualAddress a owl:Class ;
        rdfs:subClassOf olive:Address, olive:VirtualThing ;
		owl:equivalentClass [owl:intersectionOf (olive:Address olive:VirtualThing)] ;
        rdfs:label "virtual address"^^xsd:string;
        skos:prefLabel "virtual location"@en ;
	skos:altLabel "virtual address"@en ;
        rdfs:comment """This is the subclass of olive:Address reserved for virtual addresses. Paradigm examples include websites and email accounts. 

As with physical addresses, note that these addresses are distinct from the strings that can be used to identify the address. Our way of speaking is often unhelpful here. We use 'address' to refer both to the string and the place designated by the string. Don't be fooled!"""^^xsd:string ;
        olive:exampleSubclass olive:EmailAddress ;
.

olive:Vector a owl:Class ;
	rdfs:label "vector"^^xsd:string ;
        skos:prefLabel "vector"@en ;
	rdfs:subClassOf olive:NonphysicalThing ;
	rdfs:comment """olive:Vector is the class of all nonphysical things that are essentially composed of two parts: the direction, and the magnitude. This class includes all vectors, including physical forces and purely mathematical vectors (e.g. v = 2i - 3j)."""^^xsd:string ;
        olive:exampleSubclass olive:Force ;
.

olive:VirtualProfile a owl:Class ;
	rdfs:label "virtual profile"^^xsd:string ;
        skos:prefLabel "virtual profile"@en ;
	skos:altLabel "online profile"@en, "profile"@en, "account"@en, "virtual account"@en ;
	rdfs:subClassOf olive:VirtualThing ;
	rdfs:comment """olive:VirtualProfile is the class of all online accounts and profiles. They are virtual objects that are created and operated by persons. One's Facebook profile or LinkedIn account would be paradigm examples."""^^xsd:string ;
.

olive:VirtualCurrency a owl:Class ;
	rdfs:subClassOf olive:VirtualThing ;
	rdfs:label "virtual currency" ;
	skos:prefLabel "virtual currency"@en ;
	skos:altLabel "electronic payment"@en , "virtual money"@en ;
	rdfs:comment """olive:VirtualCurrency is the class of all virtual money. For example, if someone makes an online payment, they may be represented as purchasing something using an instance of this class with a particular monetary value (see also olive:boughtFor and olive:hasMonetaryValue).""" ;
	rdfs:seeAlso olive:boughtFor ;
.

olive:VirtualThing a owl:Class ;
	rdfs:subClassOf olive:NonphysicalArtifact ;
        rdfs:label "virtual thing"^^xsd:string;
        skos:prefLabel "virtual thing"@en ;
        rdfs:comment """This is the class of all things that are \"located\" on a computer system (and thus capable of being located on a computing network). This would include email, files, websites, and other such artifacts that (can) have a virtual address (see olive:VirtualAddress).

Every virtual thing should be able to be located using a property such as olive:url (or another property specifying, e.g., a filepath).

Note that every virtual thing will be associated with some physical thing(s), such as the servers or hard disks that store the information that supports a particular website."""^^xsd:string ;
        olive:exampleSubclass gist:VirtualAddress, olive:Endpoint ;
.

olive:VisualContentSource a owl:Class ;
	rdfs:label "visual content source"^^xsd:string ;
        skos:prefLabel "visual medium"@en ;
		skos:altLabel "video"@en, "visual content"@en ;
	rdfs:subClassOf olive:ContentBearingThing ;
	rdfs:comment """olive:VisualContentSource is the class of all content bearing things that are accessed (at least partly) visually. This includes photographs, charts, and videos."""^^xsd:string ;
        olive:exampleSubclass olive:Figure;
.

olive:VolatileGraph a owl:Class ;
	rdfs:label "volatile graph"^^xsd:string ;
        skos:prefLabel "volatile graph"@en ;
	rdfs:subClassOf olive:KnowledgeGraph ;
	rdfs:comment """olive:VolatileGraph is the class of all knowledge graphs whose contents can be modified by at least some users. Volatile graphs are unlikely to be versioned, since they can be updated directly. Contrast this class with graphs that are read only, which will be more stable but will also require new graph versions to be minted whenever they receive updates."""^^xsd:string ;
.

olive:Volume a owl:Class ;
	rdfs:label "volume"^^xsd:string ;
	skos:prefLabel "volumen"@en ;
	rdfs:comment "Three-dimensional space, or equivalent fluid measurement."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:Magnitude
			[
				a owl:Restriction ;
				owl:onProperty olive:hasUoM ;
				owl:someValuesFrom olive:VolumeUnit ;
			]
		) ;
	] ;
	olive:formerName "gist:Volume"^^xsd:string;
.

olive:VolumeUnit a owl:Class ;
	rdfs:label "volume unit"^^xsd:string ;
	rdfs:subClassOf olive:ProductUnit ;
	skos:prefLabel "volume unit"@en ;
	rdfs:comment "Units of three-dimensional space, expressed here as an area times a distance."^^xsd:string ;
	olive:formerName "gist:VolumeUnit"^^xsd:string;
.

olive:Vote a owl:Class ;
        rdfs:subClassOf olive:QualitativeAssessment ;
        rdfs:label "vote"^^xsd:string;
        skos:prefLabel "vote"@en ;
        rdfs:comment """Every instance of vote is a tag by which we can qualitatively assess something. Most notable instances include olive:Upvote and olive:Downvote."""^^xsd:string ;
.

olive:Warning a owl:Class ;
	rdfs:label "warning"^^xsd:string ;
        skos:prefLabel "warning"@en ;
	rdfs:subClassOf olive:Request ;
	rdfs:comment """olive:Warning is the class of all content that urges caution. Such content includes the images in instructino manuals that show users being dismembered for incorrectly using the equipment. It also includes spoken or written warnings; a police officer that lets a speeder off with a warning is communicating this content."""^^xsd:string ;
.

olive:WebService a owl:Class ;
        rdfs:subClassOf olive:Collection, olive:SoftwareInterface ;
        rdfs:label "web service"^^xsd:string;
	rdfs:subClassOf [a owl:Restriction ;
			 owl:onProperty olive:collectionOfType ;
			 owl:hasValue olive:Function ;];
        skos:prefLabel "web service"@en ;
	skos:altLabel "service"@en ;
        rdfs:comment """A web service is a collection of olive:Functions, which are designed to facilitate communication between two electronic devices as they communicate over some network (such as the web). Strictly speaking a service that runs over a network but not the internet may be thought of as a service rather than a web service, but for our purposes 'web service' is a catch all term for any service."""^^xsd:string ;
        olive:exampleSubclass olive:TaskRunner ;
.

olive:WeekInstant a owl:Class ;
	rdfs:label "week instant"^^xsd:string ;
	skos:prefLabel "week instant"@en ;
	rdfs:comment "A point in time known only to the accuracy of one day.  Say the signing of the declaration of independence on 7/4/1776"^^xsd:string ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:TimeInstant
			[a owl:Restriction ;
			 owl:onProperty olive:hasMagnitude ;
			 owl:someValuesFrom [a owl:Class; owl:intersectionOf (
			   
			[
				a owl:Restriction ;
				owl:onProperty olive:hasPrecision ;
				owl:hasValue "1"^^xsd:double ;
			]
			[
				a owl:Restriction ;
				owl:onProperty olive:hasUoM ;
				owl:hasValue olive:_week ;
			]
		)]])] ;
.

olive:WhitePaper a owl:Class ;
	rdfs:label "white paper"^^xsd:string ;
        skos:prefLabel "white paper"@en ;
	skos:altLabel "whitepaper"@en ;
	rdfs:subClassOf olive:Content, olive:NonphysicalArtifact ;
	rdfs:comment """olive:WhitePaper is the class of all white papers. They are typically of some length, and are of a business or marketing angle that expand on some philosophy towards products or services. They are usually used to generate sales leads, establish thought leadership, and make the company look good."""^^xsd:string ;
	rdfs:seeAlso "https://en.wikipedia.org/wiki/White_paper" ;
	olive:mapsTo "White Papers" ;
.

olive:X12Message a owl:Class ;
	rdfs:label "X12 message"^^xsd:string ;
        skos:prefLabel "X12 message"@en ;
	rdfs:subClassOf olive:Message ;
	rdfs:comment """olive:X12Message is the class of all olive:Messages that are in the EDI X12 format."""^^xsd:string ;
	rdfs:seeAlso "https://x12.org/"^^xsd:string ;
        olive:exampleSubclass olive:X12Message-835, olive:X12Message-837 ;
.

olive:X12Message-835 a owl:Class ;
	rdfs:label "X12 835 message"^^xsd:string ;
        skos:prefLabel "X12 835 message"@en ;
	rdfs:subClassOf olive:X12Message ;
	rdfs:comment """olive:X12Message-835 is the class of all 835 X12 messages, which are messages about insurance claim payments."""^^xsd:string ;
.

olive:X12Message-837 a owl:Class ;
	rdfs:label "X12 837 message"^^xsd:string ;
        skos:prefLabel "X12 837 message"@en ;
	rdfs:subClassOf olive:X12Message ;
	rdfs:comment """olive:X12Message-837 is the class of all 837 X12 messages, which are messages about insurance claims."""^^xsd:string ;
.

olive:YearInstant a owl:Class ;
	rdfs:label "year instant"^^xsd:string ;
	skos:prefLabel "year instant"@en ;
	rdfs:comment "A point in time known only to the accuracy of one day.  Say the signing of the declaration of independence on 7/4/1776"^^xsd:string ;
	owl:equivalentClass [
		a owl:Class ;
		owl:intersectionOf (
			olive:TimeInstant
			[a owl:Restriction ;
			 owl:onProperty olive:hasMagnitude ;
			 owl:someValuesFrom [a owl:Class; owl:intersectionOf (
			   
			[
				a owl:Restriction ;
				owl:onProperty olive:hasPrecision ;
				owl:hasValue "1"^^xsd:double ;
			]
			[
				a owl:Restriction ;
				owl:onProperty olive:hasUoM ;
				owl:hasValue olive:_year ;
			]
		)]])] ;
.

#################################################################
#    Properties
################################################################

olive:about a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:connectedTo ;
	rdfs:label "about"^^xsd:string ;
	skos:prefLabel "is about"@en ;
	skos:prefLabel "contains information about"^^xsd:string ;
	rdfs:comment """(:_Thing_1 olive:about :_Thing_2) means that Thing1 is about, broadly construed, Thing2. For example, (:DatabaseRow6 olive:about :ElizabethFaye) would indicate that row 6 in our database was about Elizabeth. Aboutness is notoriously hard to pin down, but a good test is to imagine someone who was researching a thing. If it would be reasonable to recommend that they look at some particular piece of content to research a thing, then that content can be said to be about that thing.

Typical uses of this property will be to state that some database or part thereof refers to some entity, or to state that a receipt or bill is about some particular event.

This property is not functional. Content may be about many distinct things."""^^xsd:string ;
        olive:exampleTriple ":DatabaseRow6 olive:about :ElizabethFaye"^^xsd:string ;
	rdfs:comment "Subject matter of a document."^^xsd:string ;
	rdfs:domain olive:Content ;
	rdfs:range owl:Thing ;
	olive:exampleSubproperty olive:identifies ;
	olive:formerName "gist:about"^^xsd:string;
.

olive:aboutClass a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:relatedToClass ;
	rdfs:label "about class"^^xsd:string ;
        skos:prefLabel "is about"^^xsd:string ;
        rdfs:domain olive:Content ;
        rdfs:range owl:Class ;
	rdfs:comment """This is the class-level version of olive:about.

Eventually we may adopt an alternative strategy of using paradigm instances as stand-ins for type-level claims. This property will at least be a stopgap until that vocabulary is in place."""^^xsd:string ;
.

olive:aboutProperty a owl:AnnotationProperty ;
	rdfs:label "about property"^^xsd:string ;
        skos:prefLabel "is about"^^xsd:string ;
        rdfs:domain olive:Content ;
        rdfs:range owl:Property ;
	rdfs:comment """This is the property-level version of olive:about. See olive:aboutClass.

This indicates that some content communicates something that can be expressed with triples that use the property asserted. So, (:Content1 olive:aboutProperty olive:npi) would mean that content1 can be (partially) modelled using triples that have the olive:npi property.

This may be useful in finding content such as knowledge graphs that contain a certain type of information."""^^xsd:string ;
        olive:exampleTriple ":Content1 olive:aboutProperty olive:npi"^^xsd:string ;
.

olive:abstractOf a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:about, [owl:inverseOf olive:abstractsTo] ;
	rdfs:label "abstract of"^^xsd:string ;
        skos:prefLabel "is the abstract for"@en ;
        rdfs:domain olive:Abstract ;
        rdfs:range olive:Content ;
	rdfs:comment """(:Abstract1 olive:abstractOf :Content1) means that Abstract1 is the abstract for Content1. For example, (:MyDissertationAbstract olive:abstractOf :MyDissertation).

See olive:Abstract and olive:abstractText (the latter can be used if one wants to skip the reification of the abstract altogether)."""^^xsd:string ;
        olive:exampleTriple ":MyDissertationAbstract olive:abstractOf :MyDissertation"^^xsd:string ;
.

olive:abstractsTo a owl:ObjectProperty, owl:TransitiveProperty ;
	rdfs:subPropertyOf olive:connectedTo ;
	rdfs:label "abstracts to"^^xsd:string ;
	skos:prefLabel "abstracts to"@en ;
	rdfs:domain owl:Thing ;
	rdfs:range olive:NonphysicalThing ;
	rdfs:comment """(:Thing1 olive:abstractsTo :NonphysicalThing1) means that NonphysicalThing1 is an abstraction from Thing1. A paradigmatic example of this relationship is that between objects that communicate content and the content that they communicate. For example, (:MyPhysicalCopyOfMobyDick olive:abstractsTo :MobyDick-Content) means that my physical copy of Moby Dick abstracts to Moby Dick (the conceptual work). Note that this is a very general property and is meant to include abstractions from abstractions. So, for example, (:OliveOntology-Version8December2021 olive:abstractsTo :OliveOntology) means that the 12/8/2021 version of the Olive ontology (itself a content) abstracts to the Olive ontology (a more generic content)."""^^xsd:string ;
	olive:exampleTriple ":MyPhysicalCopyOfMobyDick olive:abstractsTo :MobyDick-Content" ;
.

olive:abstractText a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:text ;
	rdfs:label "abstract text"^^xsd:string ;
        skos:prefLabel "has the following abstract:"@en ;
        rdfs:domain olive:Content ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Content1 olive:abstractText \"TEXT\"^^xsd:string) means that the abstract for Content1 is expressed by TEXT. For example, (:DissolvingHarmansDogmatismParadox olive:abstractText \"Harman (1974) presents a paradox about knowledge that utilizes intuitive premises about misleading evidence. It looks like an agent is justified in disregarding misleading evidence with respect to propositions she knows to be true. But it also seems plausible that knowledge is fallible; knowing that p doesn’t require certainty that p. Harman points out that these two claims are in tension. I argue that this tension dissolves once we disambiguate notions of misleading evidence.\"^^xsd:string).

Note that this property is useful when you want to skip reifying the abstract of the content itself; for cases in which you want to reify the abstract, see olive:abstractOf, olive:Abstract, and olive:transcript."""^^xsd:string ;
        olive:exampleTriple ":DissolvingHarmansDogmatismParadox olive:abstractText \"Harman (1974) presents a paradox about knowledge that utilizes intuitive premises about misleading evidence. It looks like an agent is justified in disregarding misleading evidence with respect to propositions she knows to be true. But it also seems plausible that knowledge is fallible; knowing that p doesn’t require certainty that p. Harman points out that these two claims are in tension. I argue that this tension dissolves once we disambiguate notions of misleading evidence.\"^^xsd:string"^^xsd:string ;
.

olive:acceptsPlan a owl:ObjectProperty ;
	rdfs:label "accepts plan"^^xsd:string ;
        skos:prefLabel "accepts"@en ;
	rdfs:subPropertyOf olive:agentUses ;
        rdfs:domain olive:MedicalCareProvider ;
        rdfs:range olive:InsurancePlan ;
	rdfs:comment """(:MedicalCareProvider1 olive:acceptsPlan :InsurancePlan1) means that MedicalCareProvider1 accepts InsurancePlan1. For example, (:DrBarry olive:acceptsPlan :CignaRedTopazPlan)."""^^xsd:string ;
        olive:exampleTriple ":DrBarry olive:acceptsPlan :CignaRedTopazPlan"^^xsd:string ;
.

olive:accountCustomer a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:bindingForAgent ;
	rdfs:label "account customer"^^xsd:string ;
        skos:prefLabel "services"@en ;
        rdfs:domain olive:Account ;
        rdfs:range olive:Agent ;
	rdfs:comment """(:Account_1 olive:accountCustomer :Agent1) means that Agent1 is the customer for Account1. For example, (:Acount234 olive:accountCustomer :GeneralMotors) would mean that Account234 was selling something or some service to GM."""^^xsd:string ;
        olive:exampleTriple ":Acount234 olive:accountCustomer :GeneralMotors"^^xsd:string ;
.

olive:accountNumber a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:text ;
	rdfs:label "account number"^^xsd:string ;
        skos:prefLabel "has account number"@en ;
        rdfs:domain [a owl:Class ; owl:unionOf (olive:Account olive:Check olive:Commitment)] ;
        rdfs:range xsd:string ;
	rdfs:comment """Links an account or account-adjacent thing to the account number. Typically this account is a bank account, and the 'adjacent' thing might be a check or debit card."""^^xsd:string ;
        olive:exampleTriple ":MyCheck olive:accountNumber \"7722551\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:accountSeller a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:bindingForAgent ;
	rdfs:label "account seller"^^xsd:string ;
        skos:prefLabel "is managed by"@en ;
        rdfs:domain olive:Account ;
        rdfs:range olive:Agent ;
	rdfs:comment """(:Account_1 olive:accountSeller :Agent1) means that Agent1 is the seller for Account1. For example, (:Account234 olive:accountSeller :BankOfAmerica) could be used to denote that bank account Account234 was monitored by BoA."""^^xsd:string ;
        olive:exampleTriple ":Account234 olive:accountSeller :BankOfAmerica"^^xsd:string ;
.

olive:address a owl:DatatypeProperty ;
        rdfs:subPropertyOf olive:contactInformation ;
	rdfs:label "address"^^xsd:string ;
        skos:prefLabel "is located at"@en ;
        rdfs:domain [a owl:Class ;
		     owl:unionOf (olive:Address olive:Agent)] ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Address1 olive:address \"ADDRESS\"^^xsd:string) means that \"ADDRESS\" can be used to refer to the location Address1. For example, (:MyHouse olive:address \"8825 29th St Ct E, Puyallup, WA 98371\"^^xsd:string) shows you what you might write on an envelope to get a letter sent to my house.

This property is not functional, as there are many strings that may point to a particular physical or virtual address. If there is a particular format, or a functional format, create or use a subproperty."""^^xsd:string ;
        olive:exampleTriple ":MyHouse olive:address \"8825 29th St Ct E, Puyallup, WA 98371\"^^xsd:string"^^xsd:string ;
.

olive:address-adminLevel1 a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:address ;
	rdfs:label "address admin level 1"^^xsd:string ;
        skos:prefLabel "is located at"@en ;
        rdfs:range xsd:string ;
	rdfs:comment """A specialization of olive:address for first-level administration areas, also called the \"region\" level; in the US, this is generally the state-level administration. E.g., (:Person1 olive:address-adminLevel2 \"TX\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":Person1 olive:address-adminLevel2 \"TX\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:address-adminLevel2 a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:address ;
	rdfs:label "address admin level 2"^^xsd:string ;
        skos:prefLabel "is located at"@en ;
        rdfs:range xsd:string ;
	rdfs:comment """A specialization of olive:address for second-level administration areas; in the US, this is generally the county-level administration. E.g., (:Person1 olive:address-adminLevel2 \"Travis Country\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":Person1 olive:address-adminLevel2 \"Travis County\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:address-adminLevel3 a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:address ;
	rdfs:label "address admin level 3"^^xsd:string ;
        skos:prefLabel "is located at"@en ;
        rdfs:range xsd:string ;
	rdfs:comment """A specialization of olive:address for third-level administration areas, also called the \"locality\" level; in the US, this is generally the city-level administration. E.g., (:Person1 olive:address-adminLevel2 \"Austin\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":Person1 olive:address-adminLevel3 \"Austin\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:address-city a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:address-adminLevel3 ;
	rdfs:label "address city"^^xsd:string ;
        skos:prefLabel "is located at"@en ;
        rdfs:range xsd:string ;
	rdfs:comment """A specialization of olive:address for this specific component. E.g., (:Person1 olive:address-line1 \"Puyallup\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":Person1 olive:address-line1 \"Puyallup\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:address-country a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:address ;
	rdfs:label "address country"^^xsd:string ;
        skos:prefLabel "is located in"@en ;
        rdfs:range xsd:string ;
	rdfs:comment """A specialization of olive:address for this specific component. E.g., (:Person1 olive:address-line1 \"USA\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":Person1 olive:address-line1 \"USA\"^^xsd:string"^^xsd:string ;
.

olive:address-full a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:address ;
	rdfs:label "full address"^^xsd:string ;
    skos:prefLabel "is located at"@en ;
    rdfs:range xsd:string ;
	rdfs:comment """A specialization of olive:address that is used to associated a resource with a full address string."""^^xsd:string ;
    olive:exampleTriple ":Person1 olive:address-full \"100 Washington Ave, Rochester, NY 00101, US\"^^xsd:string"^^xsd:string ;
.

olive:address-line1 a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:address ;
	rdfs:label "address line 1"^^xsd:string ;
        skos:prefLabel "is located at"@en ;
        rdfs:range xsd:string ;
	rdfs:comment """A specialization of olive:address for this specific component. E.g., (:Person1 olive:address-line1 \"718 29th St Ct E\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":Person1 olive:address-line1 \"718 29th St Ct E\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:address-line2 a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:address ;
	rdfs:label "address line 2"^^xsd:string ;
        skos:prefLabel "is located at"@en ;
        rdfs:range xsd:string ;
	rdfs:comment """A specialization of olive:address for this specific component. E.g., (:Person1 olive:address-line2 \"Suite 100\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":Person1 olive:address-line2 \"Suite 100\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:address-state a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:address-adminLevel1 ;
	rdfs:label "address state"^^xsd:string ;
        skos:prefLabel "is located at"@en ;
        rdfs:range xsd:string ;
	rdfs:comment """A specialization of olive:address for this specific component. E.g., (:Person1 olive:address-line1 \"WA\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":Person1 olive:address-line1 \"WA\"^^xsd:string"^^xsd:string ;
.

olive:address-street a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:address ;
	rdfs:label "street address"^^xsd:string ;
        skos:prefLabel "is located at"@en ;
        rdfs:range xsd:string ;
	rdfs:comment """A specialization of olive:address used to store the complete street address - i.e. including building and/or unit numbers. The concatenation of olive:address-line1 and olive:address-line2 (where available) should be equivalent to this property. E.g., (:Person1 olive:address-street \"718 29th St Ct E Suite 100\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":Person1 olive:address-line1 \"718 29th St Ct E Suite 100\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:adjustedCost a owl:ObjectProperty ;
	rdfs:subPropertyOf  olive:hasMonetaryValue ;
	rdfs:label "adjusted cost"^^xsd:string ;
        skos:prefLabel "has an adjusted cost of"@en ;
	skos:altLabel "costs"@en, "allowed amount"@en  ;
	rdfs:comment """(:Thing1 olive:adjustedCost :Monetary1) means that Thing1 has an adjusted cost of Monetary1; this is the amount that actually will need to be paid for Thing1, taking into account discounts, etc. For example, (:MyDentalProcedure olive:grossCost [a olive:Monetary; olive:decimalValue \"250\"^^xsd:decimal ; olive:hasUoM olive:_USDollar]). The initial cost may have been much higher, but I only owe a $250 after the insurance company's adjustments.

Specific to healthcare, the adjusted or allowed amount is the agreed amount that will be paid for a particular CPT (between a healthcare system and a payer).

See olive:grossCost."""^^xsd:string ;
        olive:exampleTriple ":MyDentalProcedure olive:grossCost [a olive:Monetary; olive:decimalValue \"250\"^^xsd:decimal ; olive:hasUoM olive:_USDollar]"^^xsd:string ;
.

olive:admissionSource a owl:DatatypeProperty ;
	rdfs:label "admission source"^^xsd:string ;
        skos:prefLabel "is an admission with source"@en ;
        rdfs:domain olive:MedicalCareEvent ;
        rdfs:range xsd:integer ;
	rdfs:comment """(:AdmissionEvent1 olive:admissionSource \"NUM\"^xsd:integer) means that AdmissionEvent1 was classified as NUM. These classifications are defined using the X12 standard (e.g. 1 is for Emergency admissions)."""^^xsd:string ;
        olive:exampleTriple ":CostasAdmission olive:admissionType \"1\"^xsd:integer"^^xsd:string ;
	rdfs:seeAlso "https://www.health.ny.gov/statistics/sparcs/sysdoc/elements_837/source_of_admission.htm"^^xsd:string ;
.

olive:admissionType a owl:DatatypeProperty ;
	rdfs:label "admissionType"^^xsd:string ;
        skos:prefLabel "is an admission classified as"@en ;
        rdfs:domain olive:MedicalCareEvent ;
        rdfs:range xsd:integer ;
	rdfs:comment """(:AdmissionEvent1 olive:admissionType \"NUM\"^xsd:integer) means that AdmissionEvent1 was classified as NUM. These classifications are defined using the X12 standard (e.g. 1 is for Emergency admissions)."""^^xsd:string ;
        olive:exampleTriple ":CostasAdmission olive:admissionType \"1\"^xsd:integer"^^xsd:string ;
	rdfs:seeAlso "https://www.health.ny.gov/statistics/sparcs/sysdoc/elements_837/type_of_admission.htm"^^xsd:string ;
.

olive:admitDate a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:timeOfEvent ;
	rdfs:label "admit date"^^xsd:string ;
        skos:prefLabel "began with a patient admission date of"@en ;
        rdfs:domain olive:Admission ;
        rdfs:range olive:TimeInstant ;
	rdfs:comment """(:Admission1 olive:admitDate :Instant1) means that that the admit date for Admission1 is Instant1. For example, (:MyHospitalStay olive:admitDate [a olive:TimeInstant; olive:universalDateTime \"2004-12-09\"^^xsd:string])."""^^xsd:string ;
        olive:exampleTriple ":MyHospitalStay olive:admitDate [a olive:TimeInstant; olive:universalDateTime \"2004-12-09\"^^xsd:string])"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:affectedBy a owl:ObjectProperty ;
	rdfs:label "affected by"^^xsd:string ;
        skos:prefLabel "is affected by"@en ;
	rdfs:domain owl:Thing ;
        rdfs:range owl:Thing ;
	owl:inverseOf olive:affects ;
	rdfs:comment """This is the inverse of olive:affects."""^^xsd:string ;
        olive:exampleTriple ""^^xsd:string ;
.

olive:affects a owl:ObjectProperty ;
	rdfs:label "affects"^^xsd:string ;
        skos:prefLabel "affects"^^xsd:string ;
        rdfs:domain owl:Thing ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:Thing1 olive:affects :Thing2) means that Thing1 affects Thing2. This is an incredibly general property. For example, (:MyHunger olive:affects :MyTestPerformance) would indicate that my hunger had some impact on my performance on the test. You almost always want to use a more specific property, such as olive:causes.

Note that this is not a symmetric property. While things are often mutually affected, this is not always the case. Gravity affects me, but I don't affect it, for instance."""^^xsd:string ;
        olive:exampleSubproperty olive:causes ;
        olive:exampleTriple ":MyHunger olive:affects :MyTestPerformance"^^xsd:string ;
.

olive:affectedObject a owl:ObjectProperty ;
	rdfs:label "affected object"^^xsd:string ;
    skos:prefLabel "affects"^^xsd:string ;
	rdfs:subPropertyOf olive:affects, olive:eventInvolves ;
    rdfs:domain olive:Event ;
    rdfs:range owl:Thing ;
	rdfs:comment """(:Event1 olive:affectedObject :Thing1) means that Thing1 is an object affected by/in Event1. For example, (:NicksHunger olive:affectedObject :Nick) means that Nick is affected by Nick's hunger. Note that this property is not functional: more than one object can be affected in a given event. Unlike olive:affects, this property is intended to specifically relate an event to an object playing the \"affected\" role in that event."""^^xsd:string ;
    olive:exampleTriple ":NicksHunger olive:affectedObject :Nick"^^xsd:string ;
.

olive:affectedObject-Direct a owl:ObjectProperty ;
	rdfs:label "directly affected object"^^xsd:string ;
    skos:prefLabel "directly affects"^^xsd:string ;
	rdfs:subPropertyOf olive:affectedObject ;
    rdfs:domain olive:Event ;
    rdfs:range owl:Thing ;
	rdfs:comment """(:Event1 olive:affectedObject-Direct :Thing1) means that Thing1 is an object directly affected by/in Event1. For example, (:NicksHunger olive:affectedObject-Direct :Nick) means that Nick is directly affected by Nick's hunger. Note that this property is not functional: there can be multiple objects that are directly affected in a given event."""^^xsd:string ;
    olive:exampleTriple ":NicksHunger olive:affectedObject-Direct :Nick"^^xsd:string ;
.

olive:affectedObject-Indirect a owl:ObjectProperty ;
	rdfs:label "indirectly affected object"^^xsd:string ;
	skos:prefLabel "indirectly affects"^^xsd:string ;
	rdfs:subPropertyOf olive:affectedObject ;
    rdfs:domain olive:Event ;
    rdfs:range owl:Thing ;
	rdfs:comment """(:Event1 olive:affectedObject-Indirect :Thing1) means that Thing1 is an object indirectly affected by/in Event1. For example, (:BreakingNicksWindow olive:affectedObject-Indirect :Nick) means that Nick is indirectly affected by the breaking of Nick's window (presumably Nick's window is directly affected). Note that this is not a functional property, as multiple objects may be directly affected by/in a given event. Note also that context will likely determine the scope of the \"indirect effects\" of a given event."""^^xsd:string ;
    olive:exampleTriple ":BreakingNicksWindow olive:affectedObject-Indirect :Nick"^^xsd:string ;
.

olive:affiliatedWith a owl:ObjectProperty, owl:SymmetricProperty ;
	rdfs:label "affiliated with"^^xsd:string ;
        skos:prefLabel "is affiliated with"^^xsd:string ;
        rdfs:domain olive:Agent ;
        rdfs:range olive:Agent ;
	rdfs:comment """(Person1 olive:affiliatedWith :Organization1) means that Person1 is affiliated with Organization1. This can be used to relate authors to organizations that funded the author during the production of some content. For example, (:CarolSwinburne olive:affiliatedWith :YaleUniversity) indicates that Yale provided financial support to Carol Swinburne, and as such would receive some credit for her publications during her time there.

Other common uses (see subproperties) include employment, being a student of/at, and being partnered with.

It is a symmetric relation. The author is affiliated with the organization and vice-versa. Note that not all the subproperties will be symmetric. An employee is affiliated with their empoloyer, and vice-versa. But the employee does not employ their employer."""^^xsd:string ;
        olive:exampleSubproperty olive:employs;
        olive:exampleTriple ":CarolSwinburne olive:affiliatedWith :YaleUniversity"^^xsd:string ;
.

olive:age a owl:DatatypeProperty ;
	rdfs:label "age"^^xsd:string ;
        skos:prefLabel "has been alive for (in years):"@en ;
	rdfs:domain olive:LivingThing ;
        rdfs:range xsd:decimal ;
	rdfs:comment """(:LivingThing1 olive:age \"DECIMAL\"xsd:decimal) means that LivingThing1 has been alive for (in years): DECIMAL. For example, (: olive:age \"\"^^xsd:decimal)."""^^xsd:string ;
        olive:exampleTriple ""^^xsd:string ;
.

olive:agentCreates a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:creates ;
	rdfs:label "creates"^^xsd:string ;
        skos:prefLabel "creates"^^xsd:string ;
        rdfs:domain olive:Agent ;
        rdfs:range olive:Artifact ;
	rdfs:comment """(:Agent_1 olive:agentCreates :Artifact1) means that Agent1 is the creator of Artifact1. For example, (:AppleInc olive:agentCreates :MyMacbookPro)."""^^xsd:string ;
        olive:exampleSubproperty  olive:createsID ;
        olive:exampleTriple ":AppleInc olive:agentCreates :MyMacbookPro"^^xsd:string ;
	olive:formerName "olive:creates"^^xsd:string;
.

olive:agentDoes a owl:ObjectProperty ;
	rdfs:label "agent does"^^xsd:string ;
        skos:prefLabel "does"@en ;
	rdfs:subPropertyOf olive:does ;
        rdfs:domain olive:Agent ;
        rdfs:range olive:Event ;
	rdfs:comment """This is the subproperty of olive:does where the doer is an agent. This does not require intentionality."""^^xsd:string ;
.

olive:agentUses a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:uses ;
	rdfs:label "agent uses"^^xsd:string ;
        skos:prefLabel "uses"^^xsd:string ;
        rdfs:domain olive:Agent ;
        rdfs:range owl:Thing ;
	rdfs:comment """This is the specialization of olive:uses where the subject is an instance of olive:Agent. For example, (:NovakDjokovic olive:agentUses :HeadPT113B_1) can denote that Novak uses that particular racquet."""^^xsd:string ;
        olive:exampleTriple ":NovakDjokovic olive:agentUses :HeadPT113B_1"^^xsd:string ;
.

olive:allows
	a owl:ObjectProperty ;
	rdfs:label "allows"^^xsd:string ;
	skos:prefLabel "allows"@en ;
	rdfs:subPropertyOf olive:consistentWithSituation ;
	rdfs:comment "(:Commitment1 olive:allows :Situation1) means that Commitment1 normatively allows/permits Situation1 to occur as it is. For example, (:TheFifthAmendmentToTheUSConstitution olive:allows :MyRefusingToIncriminateMyself) means that the content of the fifth amendement to the US Constitution normatively permits a particular case in which I refuse to incriminate myself."^^xsd:string ;
	rdfs:domain olive:Commitment ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range olive:Situation  ;
	olive:formerName "gist:allows"^^xsd:string;
.

olive:alphaSuiteLink a owl:DatatypeProperty ;
	rdfs:subPropertyOf rdfs:seeAlso , olive:url-general ;
	rdfs:label "alpha suite link"^^xsd:string ;
        skos:prefLabel "can be viewed on alpha suite at"@en ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Thing1 olive:alphaSuiteLink ) means that . For example, (:MemorialCare olive:alphasSuiteLink \"http://www.alphasuite.secure.com/org\"^^xsd:string).

Often used for improving display in the Careminer search UI."""^^xsd:string ;
        olive:exampleTriple ":MemorialCare olive:alphasSuiteLink \"http://www.alphasuite.secure.com/org\"^^xsd:string"^^xsd:string ;
.

olive:ansiCode a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:identifyingText, olive:mapsTo ;
	rdfs:label "ANSI code"^^xsd:string ;
	skos:prefLabel "has the following ANSI code:"@en ;
	skos:altLabel "has the following American National Standards Institute (ANSI) code:"@en ;
	rdfs:domain olive:Region ;
	rdfs:range xsd:string ;
	rdfs:comment """(:Region1 olive:ansiCode \"STRING\"^^xsd:string) means that :Region1 has the ANSI (American National Standards Institute) code STRING."""^^xsd:string ;
	olive:exampleTriple "olive:Texas olive:ansiCode \"TX\"^^xsd:string"^^xsd:string ;
.

olive:assertibility a owl:AnnotationProperty ;
	rdfs:label "assertibility"^^xsd:string ;
	skos:prefLabel "has the following assertibility status:"@en ;
	rdfs:domain owl:Thing ;
	rdfs:range olive:AssertibilityStatus ;
	rdfs:comment """(:Thing1 olive:assertibility :AssertibilityStatus) means that :Thing1 has the assertibility status of :AssertibilityStatus. For example, (olive:url-general olive:assertbility olive:NotAssertible) means that the property olive:url-general should not be used to make assertions. This is designed to be primarily used for declaring that a given property or class should not be used to make assertions (olive:NotAssertible).""" ;	olive:exampleTriple "olive:url-general olive:assertbility olive:NotAssertible" ;
.

olive:assignedSex a owl:ObjectProperty ;
	rdfs:label "assigned sex"^^xsd:string ;
        skos:prefLabel "is"@en ;
	rdfs:subPropertyOf olive:categorizedBy ;
        rdfs:domain olive:LivingThing ;
        rdfs:range olive:Sex-Category ;
	rdfs:comment """(:LivingThing1 olive:assignedSex :Sex-Category1) means that LivingThing1 is Sex-Category1. For example, (:BarackObama olive:assignedSex olive:Male-Sex). Note that this is different from their identified gender or gender expression (see olive:identifiesAs and olive:genderExpression)."""^^xsd:string ;
        olive:exampleTriple ":BarackObama olive:assignedSex olive:Male-Sex"^^xsd:string ;
.

olive:assignedSexText a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:genderOrSexText ;
	rdfs:label "sex text"^^xsd:string ;
    skos:prefLabel "is associated with the following text indicating sex:"^^xsd:string ;
    rdfs:domain olive:LivingThing ;
    rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:assignedSexText \"STRING\"^^xsd:string) means that STRING is a code indicating the sex of LivingThing1. For example, (:ClintEastwood olive:assignedSexText \"M\"^^xsd:string) means that the string \"M\" can be interpreted as indicating the sex associated with Clint Eastwood. The appropriate interpretation of the string may enable the deduction of a new olive:assignedSex triple."""^^xsd:string ;
    olive:exampleTriple ":ClintEastwood olive:assignedSexText \"M\"^^xsd:string"^^xsd:string ;
	olive:datatypePropertyUsesMappingProperty olive:mapsTo-assignedSexText ;
	olive:datatypePropertyTranslatesToProperty olive:assignedSex ;
.

olive:associatedCount a owl:DatatypeProperty ;
	rdfs:label "associated count"^^xsd:string ;
	skos:prefLabel "is associated in some way with a count of"@en ;
	rdfs:domain owl:Thing ;
	rdfs:range xsd:integer ;
	olive:assertibility olive:NotAssertible ;
	rdfs:comment """(:Thing1 olive:associatedCount "N"^^xsd:integer) means that :Thing1 is somehow associated with a count of N items, e.g. via having N parts of a certain kind or via being related to N things in some way. For example, (:CaseysGradebook olive:associatedCount \"10\"^^xsd:integer) means that Casey's gradebook is in some way associated with a count of 10. This is a very general property, primarily useful as a super-property for all of the more specific (and more useful) count-relevant properties."""^^xsd:string ;
		olive:exampleTriple ":CaseysGradebook olive:associatedCount \"10\"^^xsd:integer"^^xsd:string ;
.

olive:attends a owl:ObjectProperty ;
	rdfs:label "attends"^^xsd:string ;
        skos:prefLabel "attended"@en ;
	rdfs:subPropertyOf olive:affiliatedWith ;
        rdfs:domain olive:Person ;
        rdfs:range olive:School ;
	rdfs:comment """(:Person1 olive:attends :School1) means that Person1 attends/ed School1, whether or not they ultimately completed their education there. For example, (:Sarah olive:attends :Harvard) is true if Sarah is currently enrolled at Harvard, or if she is an alumnus. This property is timeless: once you stand in the attends relationship with a school, you do so forever. So, queries to determine whether someone is actively attending a given school may need to create/use a subproperty or search for additional facts about the related olive:Education event."""^^xsd:string ;
        olive:exampleTriple ":Sarah olive:attends :Harvard"^^xsd:string ;
.

olive:authorOf a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:agentCreates, olive:contentContributor, [owl:inverseOf olive:fromAgent] ;
	rdfs:label "author of"^^xsd:string ;
        skos:prefLabel "is the author of"^^xsd:string ;
        rdfs:domain olive:Agent ;
        rdfs:range olive:Content ;
	rdfs:comment """(:Agent1 olive:authorOf :Content1) means that Agent1 authored Content1. For example, (:JDSalinger olive:authorOf :CatcherInTheRye). Since it makes as much sense to say that Salinger wrote the abstract story as that he wrote any particular copy of (see olive:instantiationOf) the story, we can also say (:JDSalinger olive:authorOf :MyCopyOfCatcherInTheRye).

Note that while 'author of' often indicates written content, the notion here is broader. A composer is an author of music, and an extemporaneous speaker is the author of their speech, even if said content is never written down."""^^xsd:string ;
        olive:exampleSubproperty olive:firstAuthor, olive:secondAuthor ;
        olive:exampleTriple ":JDSalinger olive:authorOf :CatcherInTheRye"^^xsd:string, ":JDSalinger olive:authorOf :MyCopyOfCatcherInTheRye"^^xsd:string ;
.

olive:baseConversionFactor a owl:DatatypeProperty ;
	rdfs:label "base conversion factor"^^xsd:string ;
	skos:prefLabel "can be converted to the base unit by multiplying by"@en ;
	rdfs:comment """The conversion factor used to get to the base unit.  E.g., multiplying by 0.0254 gets you from inches to meters. Divide by this number to go the other way. Used in conjunction with conversionOffset to convert from one unit to another. 
Degrees K =  (Degrees F - conversionOffset) * convertToBase. Or K = (F-(-469.67)) * (5/9).  To go the other way: F = (K * 9/5) -469.67.  Try it on Google."""^^xsd:string ;
	rdfs:domain olive:UnitOfMeasure ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range xsd:double ;
	olive:formerName "gist:convertToBase"^^xsd:string;
.

olive:baseStandardConversionFactor a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:baseConversionFactor ;
	rdfs:label "base standard conversion factor"^^xsd:string ;
	skos:prefLabel "can be converted to the base unit by multiplying by"@en ;
	rdfs:comment "Note this kind of conversion will only work with temperatures if they are in Kelvin or Rankine (with a true 0).  You multiply to get to the base, divide to go from the base. mph to mps is .44704.  The multiple from kph to mps is .277778 .  To convert 60 mph to kph is (60 * .44704 / .277778 or 96.56056 kph"^^xsd:string ;
	rdfs:domain olive:UnitOfMeasure ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range xsd:double ;
	olive:formerName "gist:convertToStandard"^^xsd:string;
.

olive:basisFor
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:causes-general ;
	rdfs:label "basis for"^^xsd:string ;
	skos:prefLabel "is the basis for"@en ;
	rdfs:comment """(:Thing1 olive:basisFor :Thing2) means that Thing1 is the reason, or essential to the reason, for Thing2 happening/coming to be. For example, (:MyDoctorAppt olive:basisFor :InsuranceClaimLineItem) indicates that the line item on my insurance claim refers to, and is based on, my doctor visit."""^^xsd:string ;
	rdfs:domain owl:Thing ;
	rdfs:range owl:Thing ;
	olive:exampleTriple ":MyDoctorAppt olive:basisFor :InsuranceClaimLineItem"^^xsd:string ;
	olive:formerName "gist:basisFor"^^xsd:string ;
	.

olive:beginningSubevent a owl:ObjectProperty ;
	rdfs:label "beginning subevent"^^xsd:string ;
        skos:prefLabel "began with"@en ;
	rdfs:subPropertyOf olive:hasSubevent ;
        rdfs:domain olive:Event ;
        rdfs:range olive:Situation ;
	rdfs:comment """(:Event1 olive:beginningSubevent :Event1) means that Event1 began with Event1. For example, (:SuperBowlXXIII olive:beginningSubevent :KickoffOfSuperBowlXXIII).

This property is not functional. We can have events of various granularities. So, the kickoff started the football game, but so did the kickoff and return and opening drive. In those cases, when multiple events start some superevent, one of the starting events is a subevent of the other."""^^xsd:string ;
        olive:exampleTriple ":SuperBowlXXIII olive:beginningSubevent :KickoffOfSuperBowlXXIII"^^xsd:string ;
.

olive:bibliographicInformation a owl:DatatypeProperty ;
	rdfs:label "bibliographic information"^^xsd:string ;
        skos:prefLabel "can be cited as"@en ;
	rdfs:domain olive:Content ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Content1 olive:bibliographicInformation \"STRING\"xsd:string) means that Content1 can be cited as STRING. For example, (:UMLS olive:bibliographicInformation \"Bodenreider O. The Unified Medical Language System (UMLS): integrating biomedical terminology. Nucleic Acids Res. 2004 Jan 1;32(Database issue):D267-70. doi: 10.1093/nar/gkh061. PubMed PMID: 14681409; PubMed Central PMCID: PMC308795.\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":UMLS olive:bibliographicInformation \"Bodenreider O. The Unified Medical Language System (UMLS): integrating biomedical terminology. Nucleic Acids Res. 2004 Jan 1;32(Database issue):D267-70. doi: 10.1093/nar/gkh061. PubMed PMID: 14681409; PubMed Central PMCID: PMC308795.\"^^xsd:string"^^xsd:string ;
.

olive:bindingForAgent a owl:ObjectProperty ;
        rdfs:subPropertyOf olive:regulates ;
	rdfs:label "binding for agent"^^xsd:string ;
        skos:prefLabel "is normatively binding for"^^xsd:string ;
        rdfs:domain  [a owl:Class ;
		     owl:unionOf (olive:Intention olive:Commitment)] ;
        rdfs:range olive:Agent ;
	rdfs:comment """(:Intention_or_Commitment1 olive:bindingForAgent :Agent1) means that Intention/Commitment1 is binding for Agent1. For example, (:KosherDiet olive:bindingForAgent :SarahFranzi) means that Sarah Franzi is obligated to follow the Kosher diet.

This can be used to indicate which laws, norms, morals, etc. apply to given persons or organizations. It also indicates which goals apply to an agent. While agents are not required to satisfy their goals, one is 'on the hook' for failing to meet goals that are binding for themselves."""^^xsd:string ;
        olive:exampleTriple ":KosherDiet olive:bindingForAgent :SarahFranzi"^^xsd:string ;
.

olive:bodyMassIndex a owl:ObjectProperty ;
	rdfs:label "body mass index"^^xsd:string ;
        skos:prefLabel "has a BMI of"@en ;
	rdfs:subPropertyOf olive:hasMagnitude ;
        rdfs:domain olive:Person ;
        rdfs:range olive:RatioMagnitude ;
	rdfs:comment """(:Person1 olive:bodyMassIndex :RatioMagnitude1) means that Person1 has a BMI of RatioMagnitude1. For example, (:AlbertPujols olive:bodyMassIndex [olive:decimalValue \"240\"^^xsd:decimal ; olive:hasUoM olive:_kg_per_square_meter])."""^^xsd:string ;
        olive:exampleTriple ":AlbertPujols olive:bodyMassIndex [olive:decimalValue \"240\"^^xsd:decimal ; olive:hasUoM olive:_kg_per_square_meter])"^^xsd:string ;
.

olive:boughtFor a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:thingTransferred ;
	rdfs:label "bought for" ;
	skos:prefLabel "is an event in which the thing that is bought is bought for"@en ;
	rdfs:domain olive:BuyingAndSelling ;
	rdfs:range owl:Thing ;
	rdfs:comment """(:BuyingAndSelling1 olive:boughtFor :Thing1) means that the thing that is bought in BuyingAndSelling1 (see olive:sold) is bought for Thing1. Thing1 will often be an instance of olive:Currency (or some other medium of exchange, since items that are bought are typically not acquired via barter), but it may be something else altogether - indeed, it could be an event (as when a person pays for their dinner by washing dishes). For example, (:BobsBuyingNewShoes olive:boughtFor [a olive:Currency ; olive:hasMonetaryValue [ olive:decimalValue \"39.99\"^^xsd:double ; olive:hasUoM olive:_USDollar]]) means that the focal thing purchased in the event of Bob buying new shoes was purchased for $39.99 in cash.""" ;
	olive:exampleTriple ":BobsBuyingNewShoes olive:boughtFor [a olive:Currency ; olive:hasMonetaryValue [ olive:decimalValue \"39.99\"^^xsd:double ; olive:hasUoM olive:_USDollar]]" ;
	rdfs:seeAlso olive:BuyingAndSelling, olive:sold, olive:buyer, olive:seller, olive:TransferEvent ;
.

olive:buyer a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:doneByAgent ;
	rdfs:label "buyer" ;
	skos:prefLabel "involves (as the buyer)"@en ;
	rdfs:domain olive:BuyingAndSelling ;
	rdfs:range olive:Agent ;
	rdfs:comment """(:BuyingAndSelling1 olive:buyer :Agent1) means that Agent1 plays the buyer role in BuyingAndSelling1. For example, (:NickBuyingANewCar olive:buyer :Nick) means that Nick is the buyer in the event in which he buys a new car.

	Note that in cases in which the subject has no clear distinction between buyer and seller (as in a non-monetary trade), one can still make use of olive:buyer to represent one of the role players in the exchange.""" ;
	olive:exampleTriple ":NickBuyingANewCar olive:buyer :Nick" ;
	rdfs:seeAlso olive:BuyingAndSelling, olive:boughtFor, olive:seller, olive:sold ;
.

olive:businessPartners a owl:ObjectProperty, owl:SymmetricProperty ;
    rdfs:subPropertyOf olive:partners ;
    rdfs:label "business partners"^^xsd:string ;
    skos:prefLabel "is a business partner of"@en ;
    rdfs:domain olive:Agent ;
    rdfs:range olive:Agent ;
    rdfs:comment """(:BillGates olive:businessPartners :PaulAllen) means that Agent1 and Agent2 are business partners. For example, (:BillGates olive:partners :PaulAllen) means that Bill Gates and Paul Allen are business partners."""^^xsd:string ;
    olive:exampleTriple "BillGates: olive:businessPartners :PaulAllen"^^xsd:string ;
.

olive:canonicalGraphFor a owl:ObjectProperty ;
	rdfs:label "canonical graph for"^^xsd:string ;
        skos:prefLabel "is, when current, the canonical graph for information about"@en ;
	rdfs:subPropertyOf olive:about ;
        rdfs:domain olive:KnowledgeGraph ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:KnowledgeGraph1 olive:canonicalGraphFor :Thing1) means that KnowledgeGraph1 is, when current, the canonical graph for information about Thing1. For example, (:UMLSGraph olive:canonicalGraphFor olive:UMLS).

This is neither functional nor inversely functional. It is not functional because a given graph might be the canonical source for multiple things (may an HR graph is the canonical source for salary information for every employee, for instance). It is not inversely functional for temporal reasons. At any time, there can only be one most-recent canonical graph for a given topic.

As such, a common query pattern is to find all canonical graphs for a given topic and query the most recent one. We retain older canonical graphs if someone needs to get information that applies to older points in time. CPT codes, for instance, might shift over time, and if one looks up a medical record from '94, they should use the canonical graph that is in force"""^^xsd:string ;
        olive:exampleTriple ":UMLSGraph olive:canonicalGraphFor olive:UMLS"^^xsd:string ;
.

olive:canonicalGraphForProperty a owl:AnnotationProperty ;
	rdfs:label "canonical graph for property"^^xsd:string ;
        skos:prefLabel "is, when current, the canonical graph for information about"@en ;
	rdfs:subPropertyOf olive:aboutProperty ;
        rdfs:domain olive:KnowledgeGraph ;
        rdfs:range rdf:Property ;
	rdfs:comment """(:KnowledgeGraph1 olive:canonicalGraphForProperty :Property1) means that KnowledgeGraph1 is, when current, the canonical graph for information about Property1. This is similar to folive:canonicalGraphFor. For example, (:RibbonHealthGraph olive:canonicalGraphForProperty olive:npi) would mean that npis are canonically provided in the Ribbon Health graph."""^^xsd:string ;
        olive:exampleTriple ":RibbonHealthGraph olive:canonicalGraphForProperty olive:npi"^^xsd:string ;
.

olive:canonicalGraphForType a owl:AnnotationProperty ;
	rdfs:label "canonical graph for type"^^xsd:string ;
        skos:prefLabel "is, when current, the canonical graph for information about"@en ;
	rdfs:subPropertyOf olive:aboutClass ;
        rdfs:domain olive:KnowledgeGraph ;
        rdfs:range owl:Class ;
	rdfs:comment """(:KnowledgeGraph1 olive:canonicalGraphForType :Class1) means that KnowledgeGraph1 is, when current, the canonical graph for information about Class1. This is the type level equivalent to folive:canonicalGraphFor. For example, (:AlphaSuiteGraph olive:canonicalGraphForType olive:CPA) would mean that CPAs are canonically described in the Alpha Suite graph."""^^xsd:string ;
        olive:exampleTriple ":AlphaSuiteGraph olive:canonicalGraphForType olive:CPA"^^xsd:string ;
.

olive:carrierFor a owl:ObjectProperty ;
	rdfs:label "carrier for"^^xsd:string ;
        skos:prefLabel "is the carrier for"@en ;
	rdfs:subPropertyOf olive:governs ;
        rdfs:domain olive:InsuranceCompany ;
        rdfs:range olive:InsurancePlan ;
	rdfs:comment """(:InsuranceCompany1 olive:carrierFor :InsurancePlan1) means that InsuranceCompany1 is the carrier for InsurancePlan1. For example, (:Cigna olive:carrierFor :CignaRedTopazPlan)."""^^xsd:string ;
        olive:exampleTriple ":Cigna olive:carrierFor :CignaRedTopazPlan"^^xsd:string ;
.

olive:categorizedBy a owl:ObjectProperty ;
	rdfs:label "categorized by"^^xsd:string ;
	skos:prefLabel "is categorized as"@en ;
	skos:altLabel "is tagged as"@en ;
	rdfs:comment """See the comment on olive:Category for deeper discussion. But in short, we use olive:Category as a way of instance-ifying a class so that we can get around the limitations in OWL/RDF of not having metaclasses. As such, we have a category, we still need an analogue of rdf:type to classify (and here, 'categorize') individuals that fall under that label. olive:categorizedBy is that analogous property.

You can think of this property as a way of relating an individual to reified tags for that individual. In other words, it's a slighly more semantic way to approach labelling in many cases."""^^xsd:string ;
	rdfs:domain owl:Thing ;
	rdfs:range olive:Category ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:categorizedBy"^^xsd:string;
	olive:typedSubPropertyOf olive:dataSensitivityDefaultLevel ;
.

olive:categoryCorrespondsToClass a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:relatedToClass ;
	rdfs:label "category corresponds to"^^xsd:string ;
	skos:prefLabel "is the category version of the class"@en ;
	rdfs:comment """(:Category1 olive:categoryCorrespondsToClass :Class1) means that Category1, an instance of olive:Category, is a category-style representation of Class1, a class. This will be most often useful in stating equivalences between two different ontologies that rely on different modes of representation for the same concept. For example, (olive:Oncology-FieldCategory olive:categoryCorrespondsToClass wd:Q162555) means that olive:Oncology-FieldCategory is an instance of olive:Category that corresponds to the class Q162555 in the Wikidata ontology."""^^xsd:string ;
	olive:exampleTriple "olive:Oncology-FieldCategory olive:categoryCorrespondsToClass wd:Q162555"
.

olive:causes-general a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:affects ;
	rdfs:label "causes"^^xsd:string ;
        skos:prefLabel "causally contributes to"@en ;
        rdfs:domain owl:Thing ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:Thing1 olive:causes-general :Thing2) means that, in a very general sense, Thing1 causes Thing2. While the primary notion of causation is event-based (see olive:causes-events), we often speak of particular objects being causes, or being effects. For example, Bob's twisted ankle caused him to finish last in the race. We could express this as (:BobsAnkle olive:causes-general :BobsRaceFinish). This makes an object, Bob's ankle, the cause for an event, Bob's finishing the race in the way that he did. While we could redescribe this as a purely event-based relation ('The event of Bob twisting his ankle...'), this loose sense of causation that involves objects is intuitive enough to warrant having its own object property.

Notable subproperties include olive:agentCreates."""^^xsd:string ;
        olive:exampleSubproperty olive:agentCreates ;
        olive:exampleTriple ":BobsAnkle olive:causes-general :BobsRaceFinish"^^xsd:string ;
.

olive:causes-events a owl:ObjectProperty, owl:TransitiveProperty ;
	rdfs:subPropertyOf olive:causes-general, olive:precedes ;
	rdfs:label "causes"^^xsd:string ;
	skos:altLabel "causally contributes to"@en ;
        skos:prefLabel "caused"^^xsd:string ;
        rdfs:domain olive:Event ;
        rdfs:range olive:Event ;
	rdfs:comment """(:Event1 olive:causes :Event2) means that Event1 causes Event2. While causation is a complex issue, the goal of this property is to capture the intuitive sense of 'cause'. For example, (:BillBreakingHisLeg olive:causes :BillsDoctorVisit) indicates that Bill went to the doctor because he broke his leg.

Causation here means (at least) partial causation. Striking a match causes it to light. But this isn't the whole story, as we needed to strike the match in a sufficiently oxygen-rich environment, and the match needed to not be wet, and so on.

Notice that the domain and range are events. The more general notion without these constraints is given by olive:causes-general. We often talk about objects being causes or caused by things, though. For example, 'The baby caused me to get no sleep last night'. We can translate this into event language: 'The baby crying all night caused me to get no sleep.' Similarly, we can talk about objects being effects, but this usually means that the creation of the object was the effect, as in 'The medical procedure caused the insurance claim'."""^^xsd:string ;
        olive:exampleTriple ":BillBreakingHisLeg olive:causes :BillsDoctorVisit"^^xsd:string ;
.

olive:cdr a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasPart ;
	rdfs:label "cdr"^^xsd:string ;
        skos:prefLabel "has a cdr of"@en ;
	skos:altLabel "ends with"@en ;
        rdfs:domain rdf:List ;
        rdfs:range rdf:List ;
	rdfs:comment """(:ListA olive:cdr :ListB) means that ListB is the list that contains all of ListA except for its first element. For example, if A = (1, 2, 3) and (:ListA olive:cdr :ListB), then B = (2, 3)."""^^xsd:string ;
        olive:exampleTriple ":ListA olive:cdr :ListB"^^xsd:string ;
.

olive:certificationInField a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:certificationForType ;
	rdfs:label "certification in field"^^xsd:string ;
    skos:prefLabel "is a certification in"@en ;
    rdfs:domain olive:Certification ;
    rdfs:range olive:Class ;
	rdfs:comment """(:Certification olive:certificationInType :Field) means that Certification is a certification in the field of study Field. For example, (BobsMS olive:certificationInField Nursing) means that BobsMS is in the field of nursing."""^^xsd:string ;
    olive:exampleTriple ":BobsMS olive:certificationInField Nursing"^^xsd:string ;
.

olive:certificationForType a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:relatedToClass ;
	rdfs:label "certification for type"^^xsd:string ;
	skos:prefLabel "is a certification for"@en ;
	rdfs:domain olive:Certification ;
	rdfs:range olive:Class ;
	rdfs:comment """(:Certification1 olive:certificationForType :Class1) means that Certification1 certifies the possessor in some way with respect to Class1 - the object of the triple will help to determine the nature of the relationship. For example, (Certification1 olive:certificationForType olive:Dentist) means that Certification1 certifies its possessor with respect to being a dentist; (Certification1 olive:certificationForType olive:Fishing) means that Certification1 certifies its possessor with respect to the activity of fishing. And (Certification1 olive:certificationForType Nursing) means that Certification1 certifies in the field of nursing (note, though, that in this case there is a more specific property - olive:certificationInField - that would be more appropriate to use)."""^^xsd:string ;
	olive:exampleTriple ":Certification1 olive:certificationForType olive:Dentist" ;
.

olive:certificationText a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name-associatedText ;
	rdfs:label "certification text"^^xsd:string ;
	skos:prefLabel "has a certification identified by the following:"@en ;
	rdfs:domain olive:Agent ;
	rdfs:range xsd:string ;
	rdfs:comment """(:Agent1 olive:certificationText \"STRING\"^^xsd:string) means that Agent1 has a certification commonly identified by STRING. For example, (:Nick olive:certificationText \"Ph.D\"^^xsd:string) means that Nick has a certification commonly identified by the string \"Ph.D.\". It is preferable whenever possible to use olive:hasCertification instead (or to leverage the information stored using olive:certificationText to generate an olive:hasCertification triple)."""^^xsd:string ;
	olive:exampleTriple ":Nick olive:certificationText \"Ph.D\"^^xsd:string"^^xsd:string ;
.

olive:certificationText-full a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:certificationText ;
	rdfs:label "full certification text"^^xsd:string ;
	skos:prefLabel "has certification(s) identified by the following:"@en ;
	rdfs:domain olive:Agent ;
	rdfs:range xsd:string ;
	rdfs:comment """(:Agent1 olive:certificationText-full \"STRING\"^^xsd:string) means that Agent1 has one or more certifications enumerated by STRING. For example, (:Nick olive:certificationText-full \"RN,MA\"^^xsd:string) means that Nick has certifications that may be identified by the string \"RN,MA\". It is preferable whenever possible to use olive:hasCertification instead (or to leverage the information stored using olive:certificationText-full to generate one or more olive:hasCertification triple)."""^^xsd:string ;
	olive:exampleTriple ":Nick olive:certificationText-full \"RN,MA\"^^xsd:string"^^xsd:string ;
.

olive:changedProperty a owl:ObjectProperty ;
	rdfs:label "changed property"^^xsd:string ;
        skos:prefLabel "changes the feature of the subject as follows:"@en ;
	rdfs:subPropertyOf olive:eventInvolves ;
        rdfs:domain olive:ChangeEvent ;
        rdfs:range rdf:List ;
	rdfs:comment """(:ChangeEvent1 olive:changedProperty :List1) means that ChangeEvent1 changes the feature of the subject as follows: List1. The list will have three members: the property, the old value of the property, and the new value of the property. So, (:C olive:changedProperty (prop val1 val2)) means that it used to be true of the subject that (subject prop val1), but after change event :C, (subject prop val2) was true instead. For example, (:PaintingMyWall olive:changedProperty (:hasColor :Red :Blue)) would mean that the painting event changed the color from red to blue of the focal subject (see olive:changedThing), which is probably the wall in this case.

This only captures cases where an attribute is changed from one value to another. In a case where an attribute is added, see olive:changeAdds. In a case where an attribute is removed, see olive:changeRemoves."""^^xsd:string ;
        olive:exampleTriple ":PaintingMyWall olive:changedProperty (:hasColor :Red :Blue)"^^xsd:string ;
.

olive:changedThing a owl:ObjectProperty ;
	rdfs:label "changed thing"^^xsd:string ;
        skos:prefLabel "changed"@en ;
	rdfs:subPropertyOf olive:affectedObject ;
        rdfs:domain olive:ChangeEvent ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:ChangeEvent1 olive:changedThing :Thing1) means that ChangeEvent1 changed Thing1. For example, (:EditingMyDissertation olive:changedThing :MyDissertation)."""^^xsd:string ;
        olive:exampleTriple ":EditingMyDissertation olive:changedThing :MyDissertation";
.

olive:checkNumber a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:text ;
	rdfs:label "check number"^^xsd:string ;
        skos:prefLabel "is check number"@en ;
        rdfs:domain olive:Check ;
        rdfs:range xsd:string ;
	rdfs:comment """Relates a check to the check number (not the routing number--olive:routingNumber--or account number--olive:accountNumber)."""^^xsd:string ;
        olive:exampleTriple ":MyCheck olive:checkNumber \"123451\"^^xsd:string"^^xsd:string ;
.

olive:citedBy a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:affects ;
	rdfs:label "cited by"^^xsd:string ;
        skos:prefLabel "is cited by"^^xsd:string ;
        rdfs:range olive:Content ;
        rdfs:domain olive:Content ;
	rdfs:comment """(:Content1 olive:citedBy :Content2) means that Content1 is cited by Content2, or equivalently that Content2 cites Content1. For example, (:Wikipedia olive:citedBy :MyBookReport) means that my book report cites Wikipedia.

Note that sometimes it feels natural to cite an agent rather than conent. For example, 'She cited the weatherman in her email, concluding that we should push the picnic back a day.' But in this case, we can interpret the citing a person as a loose way of speaking, shorthand for citing the person's testimony."""^^xsd:string ;
        olive:exampleTriple ":Wikipedia olive:citedBy :MyBookReport"^^xsd:string ;
.

olive:citedContent a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:causes-general ;
	rdfs:label "cited content"^^xsd:string ;
        skos:prefLabel "references"@en ;
	skos:altLabel "cites"@en ;
        rdfs:domain olive:Citation;
        rdfs:range olive:Content ;
	rdfs:comment """(:Citation_1 olive:citedContent :Content_1) means that Citation1 is referencing the cited content, Content1. For example, (:Footnote3Citation olive:citedContent :NamingAndNecessity) means that footnote three's citation is referencing Naming and Necessity.

See olive:citedBy for the property that relates to the two pieces of content directly."""^^xsd:string ;
        olive:exampleTriple ":Footnote3Citation olive:citedContent :NamingAndNecessity"^^xsd:string ;
.

olive:claimNumber a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:text ;
	rdfs:label "claim number"^^xsd:string ;
        skos:prefLabel "has claim number"@en ;
        rdfs:domain olive:InsuranceClaim ;
        rdfs:range xsd:string ;
	rdfs:comment """Relates an instance of olive:InsuranceClaim to the claim number. Despite the name, the domain is a string.

Note: this property is not asserted to be functional, though in practice we probably think of claim numbers as uniquely identifying. The unique identifier is probably a combination of insurance company and claim number, or perhaps claimant and claim number. Subproperties can be created as needed to get unique identification."""^^xsd:string ;
        olive:exampleTriple ":MyClaim olive:claimNumber \"1199324040235018\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:claimNumber-Original a owl:DatatypeProperty ;
	rdfs:label "claimNumber-original"^^xsd:string ;
        skos:prefLabel "has original claim number"@en ;
	rdfs:subPropertyOf olive:claimNumber ;
	rdfs:comment """(:InsuranceClaim1 olive:claimNumber-Original \"STRING\"xsd:string) means that InsuranceClaim1 has original claim number STRING. For example, (:MyClaim olive:claimNumber-Original \"7\"^^xsd:string) means that my claim's original number was 7."""^^xsd:string ;
        olive:exampleTriple ":MyClaim olive:claimNumber-Original \"7\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;	
.

olive:classCount a owl:DatatypeProperty ;
	rdfs:label "class count"^^xsd:string ;
        skos:prefLabel "has the following number of classes:"@en ;
	rdfs:domain olive:KnowledgeGraph ;
        rdfs:range xsd:integer ;
	rdfs:comment """(:KnowledgeGraph1 olive:classCount \"INTEGER\"xsd:integer) means that KnowledgeGraph1 has the following number of classes: INTEGER. For example, (:Graph21 olive:classCount \"75\"^^xsd:integer) means that Graph21 includes 75 classes."""^^xsd:string ;
        olive:exampleTriple ":Graph21 olive:classCount \"75\"^^xsd:integer"^^xsd:string ;
.

olive:classIdentifyingProperty a owl:AnnotationProperty ;
	rdfs:label "class identifying property"^^xsd:string ;
        skos:prefLabel "has instances who are partly individuated by"@en ;
        rdfs:domain owl:Class ;
        rdfs:range owl:FunctionalProperty;
	rdfs:comment """(:Class1 olive:classIdentifyingProperty :Property1) means that instances of Class1 can be uniquely identified by the triples that involve that instance and all of the properties, such as :Property1, that stand in the olive:classIdentifyingProperty relation to Class1. In this sense we enforce a closed world assumption about olive:classIdentifyingProperty; at any time we assume that if any assertions have been made for some class using this property, the complete extent of those assertions have been made. So, if there are two class identifying properties for a class, then entity resolution should be possible for that class for any instance that have assertions using all of said properties.

For example, suppose (olive:Person olive:classIdentifyingProperty olive:hasSSN) and (olive:Person olive:classIdentifyingProperty :DOB), but there are no other class identifying properties asserted for olive:Person. Then, if we know both Bob and Susan's SSNs and DOBs, we can conclude definitively whether those names refer to the same or different individuals; they are the same exactly when they have the same SSN and DOB.

The extent of this property for a given class will likely go hand in hand with the structure for URIs that we use for instance data. See olive:uriTemplate."""^^xsd:string ;
        olive:exampleTriple "olive:Person olive:classIdentifyingProperty olive:hasSSN"^^xsd:string ;
.

olive:classIsPartOf a owl:AnnotationProperty ;
	rdfs:label "class is part of"^^xsd:string ;
	skos:prefLabel "is part of"@en ;
	rdfs:domain owl:Class ;
	rdfs:range owl:Thing ;
	rdfs:comment """(:Class1 olive:classIsPartOf :Thing1) means that some sort of abstract partonomic relationship holds between Class1 and Thing1 (a non-class) such that Class1 may be said to be part of Thing1. An example would be a tier of classes in a taxonomy (see olive:Tier): those classes are in some sense part of a given tier, but the tiers themselves are (abstract) individuals."""^^xsd:string ;
	olive:exampleTriple "olive:MedicalImplant olive:classIsPartOf Tier1InSomeMedicalSupplyTaxonomy"^^xsd:string ;
.

olive:collectionOfType a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:relatedToClass ;
	rdfs:label "collection of type"^^xsd:string ;
        skos:prefLabel "is a collection composed of"^^xsd:string ;
        rdfs:domain olive:Collection ;
        rdfs:range owl:Class ;
	rdfs:comment """(:Collection1 olive:collectionOfType :Class1) means that every member of Collection1 is a member of Class1. For example, (:TrialJury32 olive:collectionOfType olive:Person) means that the jury in question is composed of people.
Note that this is an annotation property, and so while useful for readers will be of limited use inferentially."""^^xsd:string ;
        olive:exampleTriple ":TrialJury32 olive:collectionOfType olive:Person"^^xsd:string ;
.

olive:communicatedContent a owl:ObjectProperty ;
	rdfs:label "communicated content"^^xsd:string ;
        skos:prefLabel "conveyed"@en ;
	skos:altLabel "communicated"@en ;
	rdfs:subPropertyOf olive:conveyedThing ;
        rdfs:domain olive:CommunicationEvent ;
        rdfs:range olive:Content ;
	rdfs:comment """(:CommunicationEvent1 olive:communicatedContent :Content1) means that CommunicationEvent1 conveyed Content1. For example, (:OthelloPerformance223 olive:communicatedContent :Othello-Story)."""^^xsd:string ;
        olive:exampleTriple ":OthelloPerformance223 olive:communicatedContent :Othello-Story";
.

olive:comparedThing a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:about ;
	rdfs:label "compared thing"^^xsd:string ;
        skos:prefLabel "compares"@en ;
        rdfs:domain olive:Comparison ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:Comparison1 olive:comparedThing :Thing1) means that Thing1 is one of the things being compared in Comparison1. See olive:Comparison's comment for more detail."""^^xsd:string ;
        olive:exampleTriple "Comparison1 olive:comparedThing :Thing1"^^xsd:string ;
.

olive:connectedTo
	a owl:ObjectProperty ;
	a owl:SymmetricProperty ;
	rdfs:label "connected to"^^xsd:string ;
	skos:prefLabel "has a relationship with/to"@en ;
	rdfs:domain owl:Thing ;
	rdfs:range owl:Thing ;
	rdfs:comment """(:Thing1 olive:connectedTo :Thing2) means that Thing1 and Thing2 are connected. This is a painfully vague relationship. However, sometimes we just want to note that there's something important to say about the connection between two things despite not having any other vocabulary to say it. For that reason, any usage of this property should be seen as a cry out for precisification; either one should find the existing vocabulary that makes the right edge or someone should create new vocabulary to make the right edge.

Technically you could view a property like olive:connectedTo as equivalent to owl:topObjectProperty, since whenver (:s :p :o) is true, (:s olive:connectedTo :o) would seem to be true. However, olive:connectedTo means that 'something holds between these two objects that we can't presently be more precise about', and therefore the above entailment doesn't hold. This has the added benefit of not generating tons of trivial triples, since without treating olive:connectedTo as a separate 'branch' of our property ontology, every triple would get a corresponding 'connected to' triple."""^^xsd:string ;
	olive:exampleTriple ":Thing1 olive:connectedTo :Thing2"^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:connectedTo"^^xsd:string;
.

olive:consistentWithSituation a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:governsBehavior ;
	rdfs:label "consistent with situation"^^xsd:string ;
	skos:prefLabel "is consistent with"@en ;
	skos:altLabel "logically permits"@en , "logically allows"@en , "allows"@en , "permits"@en , "is logically consistent with"@en ;
	rdfs:domain [owl:unionOf (olive:Commitment olive:Intention)] ;
	rdfs:range olive:Situation ;
	rdfs:comment """(:CommitmentOrIntention1 olive:consistentWithSituation :Situation1) means that CommitmentOrIntention1 is logically consistent with Situation1. For example, (:MyDesireToLoseWeight olive:consistentWithSituation :MyEatingASalad) means that the content of my desire to lose weight is logically consistent with the occurrence of an event in which I eat a salad.

Note that, in general, instances of olive:Intention are the proper candidates to serve as the subject of olive:consistentWithSituation, since the content of an intention, such as my desire to lose weight, is primarily descriptive in nature (it is my attitude toward this content that carries the modal/prescriptive content). In contrast, instances of olive:Commitment - i.e. the content of obligations, duties, laws, etc. - are essentially normative/prescriptive while also containing descriptive content (i.e. the content describes a state while also expressing that it ought to be the case). Thus, instances of olive:Commitment are better suited as the subjects of a subproperty of olive:consistentWithSituation that has normative force, even though they can also (as a result) be conceived of as being logically consistent with the relevant object."""^^xsd:string ;
.

olive:contentContributor a owl:ObjectProperty ;
	rdfs:subPropertyOf  olive:causes-general;
	rdfs:label "content contributor"^^xsd:string ;
        skos:prefLabel "contributed to"^^xsd:string ;
        rdfs:domain olive:Agent ;
        rdfs:range olive:Content ;
	rdfs:comment """(:Agent1 olive:contentContributor olive:Content1) means that Agent1 contributed to Content1. A more specific property should almost always be used, such as olive:authorOf or olive:publisherOf. For example, (:OxfordUniversityPress olive:contentContributor :Philosophy101Textbook) may be true in virtue of Oxford being the publisher for the textbook in question."""^^xsd:string ;
        olive:exampleSubproperty olive:authorOf, olive:editorOf, olive:publisherOf ;
        olive:exampleTriple ":OxfordUniversityPress olive:contentContributor :Philosophy101Textbook"^^xsd:string ;
.

olive:contactInformation a owl:DatatypeProperty ;
	rdfs:label "contact information"^^xsd:string ;
        skos:prefLabel "can be contacted at"^^xsd:string ;
        rdfs:domain [a owl:Class ;
		     owl:unionOf (olive:Agent olive:Address)] ;
        rdfs:range xsd:string ;
	rdfs:comment """This is the 'string version' of olive:hasCommunicationAddress. It relates an address or an agent to a string that represents some address that the person is reachable at.

Consider using the more precise subproperties: olive:phoneNumber, olive:address, or olive:emailAddress."""^^xsd:string ;
        olive:exampleSubproperty olive:phoneNumber, olive:address, olive:emailAddress ;
.

olive:contactPerson a owl:ObjectProperty ;
	rdfs:label "contact person"^^xsd:string ;
        skos:prefLabel "has the contact person"@en ;
	rdfs:subPropertyOf olive:affiliatedWith ;
        rdfs:domain olive:Agent ;
        rdfs:range olive:Person ;
	rdfs:comment """(:Agent1 olive:contactPerson :Person1) means that Agent1 has the contact person Person1. For example, (:KevinDurant olive:contactPerson :RichKleiman)."""^^xsd:string ;
        olive:exampleTriple ":KevinDurant olive:contactPerson :RichKleiman"^^xsd:string ;
	rdfs:seeAlso "https://web.archive.org/web/20200219055431/http://ecomgx17.ecomtoday.com/edi/EDI_4010/el366.htm"^^xsd:string;
.

olive:contains a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:spatiallyRelatedTo ;
	rdfs:label "contains"^^xsd:string ;
        skos:prefLabel "contains"@en ;
        rdfs:domain [a owl:Class;
		     owl:unionOf (olive:Place olive:PhysicalThing) ];
        rdfs:range owl:Thing ;
	rdfs:comment """(:PhysicalThing1 olive:contains :Thing2) means that Thing1 physically contains Thing2. For example, (:WashingMachine olive:contains :FluffyTheCat) tells us that Fluffy is in the washing machine. This is usually used for relating a container to contained thing or for locating something in a geographic region. For an example of the latter, (:France olive:contains :Casey) means that Casey is in France.

Feel free to create or use more specific properties if we want to specify the domain or range more carefully. Also, since 'contains' is often as natural as 'was contained in', we use both this and its inverse propert, olive:containedIn."""^^xsd:string ;
        olive:exampleTriple ":WashingMachine olive:contains :FluffyTheCat"^^xsd:string,  ":France olive:contains :Casey"^^xsd:string ;
.

olive:containsLineItem a owl:ObjectProperty ;
	rdfs:subPropertyOf  olive:hasPart ;
	rdfs:label "contains line item"^^xsd:string ;
        skos:prefLabel "contains"^^xsd:string ;
        rdfs:domain olive:Commitment ;
        rdfs:range olive:LineItem ;
	rdfs:comment """(:Commitment1 olive:containsLineItem :LineItem1) means that Commitment1 . For example, (:InsuranceClaim2 olive:containsLineItem :VaccinationForJames) indicates that a line item in Insurance Claim 2 is James' vaccination."""^^xsd:string ;
        olive:exampleTriple ":InsuranceClaim2 olive:containsLineItem :VaccinationForJames"^^xsd:string ;
.

olive:containsSensitiveInformationType a owl:ObjectProperty ;
	rdfs:label "contains sensitive information type"^^xsd:string ;
        skos:prefLabel "contains"@en ;
	rdfs:subPropertyOf olive:categorizedBy ;
        rdfs:domain olive:Content ;
        rdfs:range olive:SensitiveInformationType ;
	rdfs:comment """(:Content1 olive:containsSensitiveInformationType :SensitiveInformationType1) means that Content1 contains SensitiveInformationType1. For example, (:NamedGraph21 olive:containsSensitiveInformationType olive:SensitiveInfo-PHI) means that Named Graph 21 has PHI in it."""^^xsd:string ;
        olive:exampleTriple ":NamedGraph21 olive:containsSensitiveInformationType olive:SensitiveInfo-PHI"^^xsd:string ;
.

olive:contentIsCurrent a owl:DatatypeProperty ;
	rdfs:label "content is current"^^xsd:string ;
        skos:prefLabel "has a currency boolean of:"@en ;
	rdfs:domain olive:Content ;
        rdfs:range xsd:boolean ;
	rdfs:comment """(:Content1 :contentIsCurrent \"BOOLEAN\"xsd:boolean) means that Content1 has a currency boolean of: BOOLEAN. For example, (:GradebookForPhil204 :contentIsCurrent \"false\"^^xsd:boolean) means that the gradebook is not up to date.

If some content has a value of false, that means that at least some of the data is false in virtue of it being out of date. This is a sign of data being unreliable. Note that not every piece of content will ever go out of date. Often content is written in a way that is timeless, and therefore will be immune from becoming obsolete due to the passage of time."""^^xsd:string ;
        olive:exampleTriple ":GradebookForPhil204 :contentIsCurrent \"false\"^^xsd:boolean"^^xsd:string ;
.

olive:contractValue a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasMagnitude ;
	rdfs:label "contract value"^^xsd:string ;
        skos:prefLabel "is for"@en ;
	skos:altLabel "is valued at"@en ;
        rdfs:domain olive:Contract ;
        rdfs:range olive:Monetary ;
	rdfs:comment """(:Contract_1 olive:contractValue :MonetaryValue_1) means that Contract1 is valued at MonetaryValue_1. For example, (:MedstarContract olive:contractValue [a olive:Monetary; olive:hasUoM olive:_USDollar; olive:decimalValue \"150000\"^^xsd:decimal]) means that the MedStar contract is for $150,000.

Note that this reifies the value as a olive:Magnitude rather than going straight from the contract to a custom datatype for, say, US dollars. We could do a more direct property if needed. Such a direct property would be more specialized for that use, but specialization has drawbacks in requiring more specialized support and requiring users to learn more ontology terms."""^^xsd:string ;
        olive:exampleTriple ":MedstarContract olive:contractValue [a olive:Monetary; olive:hasUoM olive:_USDollar; olive:decimalValue \"150000\"^^xsd:decimal]"^^xsd:string ;
.

olive:controls a owl:ObjectProperty ;
	rdfs:label "controls"^^xsd:string ;
	rdfs:subPropertyOf olive:regulates ;
        skos:prefLabel "controls"@en ;
        rdfs:domain olive:Agent ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:Agent1 olive:controls :Thing1) means that Agent1 has (partial) control over Thing1. This might be physical control, such as operating a machine or holding an object. Or it might be having authority over something, as when a government organization has jurisdiction over some region or person. For example, (:USFDA olive:controls :Pfizer) means that the US FDA has jurisdiction over Pfizer."""^^xsd:string ;
        olive:exampleSubproperty olive:owns ;
        olive:exampleTriple ":USFDA olive:controls :Pfizer"^^xsd:string ;
.

olive:controlsAccount a owl:ObjectProperty ;
	rdfs:label "controls account"^^xsd:string ;
        skos:prefLabel "is a user of"@en ;
	rdfs:subPropertyOf olive:owns ;
        rdfs:domain olive:Agent ;
        rdfs:range olive:VirtualProfile ;
	rdfs:comment """(:Agent1 olive:controlsAccount :VirtualProfile1) means that Agent1 is a user of VirtualProfile1. For example, (:Casey olive:controlsAccount :XboxLiveTempestuousDuke) means that Casey oversees/owns/uses the Tempestuous Duke profile on Xbox Live."""^^xsd:string ;
        olive:exampleTriple ":Casey olive:controlsAccount :XboxLiveTempestuousDuke"^^xsd:string ;
.

olive:conversionOffset a owl:DatatypeProperty ;
	rdfs:label "conversion offset"^^xsd:string ;
	skos:prefLabel "is offset from the base unit by"@en ;
	rdfs:comment "Add this number to get to the zero point.  On the Celsius scale, the conversionOffset is -273.15 degrees C. On the Fahrenheit scale it is -459.67 degrees.  Is equal to 0 when the unit has the same zero point as the base unit. e.g. inch, meter."^^xsd:string ;
	rdfs:domain olive:UnitOfMeasure ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range xsd:double ;
	olive:formerName "gist:conversionOffset"^^xsd:string;
.

olive:conveyedThing a owl:ObjectProperty ;
	rdfs:label "conveyed thing"^^xsd:string ;
	skos:prefLabel "involves a conveyance of"@en ;
	rdfs:subPropertyOf olive:affectedObject ;
	rdfs:domain olive:Event ;
	rdfs:range owl:Thing ;
	rdfs:comment """(:Event1 olive:conveyedThing :Thing1) means that Event1 involves some sort of conveyance of Thing1. This is a very general notion, such that the particular sort of conveyance - transfer, movement, etc. - depends on the type of event. For example, (:MyRunThisMorning olive:conveyedThing :MyBody) means that my body is the thing that is physically moved during my morning run. Given the generality of this property, there may be different levels of granularity at which the conveyed item might be specified, depending on one's modeling purposes."""^^xsd:string ;
	olive:exampleTriple ":MyRunThisMorning olive:conveyedThing :MyBody"^^xsd:string ;
.

olive:conveysFrom a owl:ObjectProperty ;
	rdfs:label "conveys from"^^xsd:string ;
        skos:prefLabel "conveys from"@en ;
	rdfs:subPropertyOf olive:eventInvolves ;
        rdfs:domain olive:Event ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:Event1 olive:conveysTo :Thing1) means that Event1 conveys from Thing1. For example, (:MyRunThisMorning olive:conveysFrom :BoylstonStreet). This means that my run begins at Boylston Street. Of course, we could be more precise here: the location of my body at the beginning of the event in question is Boylston Street. When possible, we want to use subproperties to express more nuanced relationships.

This is a very general role property that tells us where something focal in the event begins. It could be a movement event, where a basketball is shot at a basket. It could be a request or other communication event where the message is transferred from some agent or location. It could be a transfer event in which the thing being bought begins in the possession of some agent. Be careful when representing transactions, since usually there will be at least two focal conveyances, as there are usually at least two things being exchanged; I might get the money while you get the expensive vase I sold you."""^^xsd:string ;
        olive:exampleTriple ":MyRunThisMorning olive:conveysFrom :BoylstonStreet"^^xsd:string ;
.

olive:conveysTo a owl:ObjectProperty ;
	rdfs:label "conveys to"^^xsd:string ;
        skos:prefLabel "conveys to"@en ;
	rdfs:subPropertyOf olive:eventInvolves ;
        rdfs:domain olive:Event ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:Event1 olive:conveysTo :Thing1) means that Event1 conveys to Thing1. For example, (:MyRunThisMorning olive:conveysTo :BoylstonStreet). This means that my run ends up at Boylston Street. Of course, we could be more precise here: my body ends up located on Boylston Street at the end of the event in question. When possible, we want to use subproperties to express more nuanced relationships.

This is a very general role property that tells us where something focal in the event ends up. It could be a movement event, where a ball ends up at the basket. It could be a request or other communication event where the message is transferred to some agent or location (e.g. a message queue). It could be a transfer event in which the thing being bought ends up 'at' its new owner. Be careful when representing transactions, since usually there will be at least two focal conveyances, as there are usually at least two things being exchanged; I might get the money while you get the expensive vase I sold you."""^^xsd:string ;
        olive:exampleTriple ":MyRunThisMorning olive:conveysTo :BoylstonStreet"^^xsd:string ;
.

olive:copayCost a owl:ObjectProperty ;
	rdfs:label "copay cost"^^xsd:string ;
        skos:prefLabel "has a copay of"@en ;
	rdfs:subPropertyOf olive:hasMonetaryValue ;
        rdfs:domain olive:InsuranceClaim ;
        rdfs:range olive:Monetary ;
	rdfs:comment """(:InsuranceClaim1 olive:copayCost :Monetary1) means that InsuranceClaim1 has a copay of Monetary1. For example, (:MyApptClaim olive:copayCost [olive:decimalValue \"15\"^^xsd:decimal; olive:hasUoM olive:_USDollar]) means the copay associated with my claim is $15."""^^xsd:string ;
        olive:exampleTriple ":MyApptClaim olive:copayCost [olive:decimalValue \"15\"^^xsd:decimal; olive:hasUoM olive:_USDollar]"^^xsd:string ;
.

olive:cost-Patient a owl:ObjectProperty ;
	rdfs:label "cost-patient"^^xsd:string ;
        skos:prefLabel "is personally responsible for"@en ;
	rdfs:subPropertyOf olive:hasMonetaryValue ;
        rdfs:domain owl:Thing ;
        rdfs:range olive:Monetary ;
	rdfs:comment """(:Thing1 olive:cost-Patient :Monetary1) means that Thing1 is personally responsible for Monetary1. For example, (:MyInsClaim olive:cost-Patient [olive:decimalValue \"70\"^^xsd:decimal; olive:hasUoM olive:_USDollar]) means that I personally owe $70 for the event that my claim is based on, as opposed to the total amount owed, which includes the payer's obligation as well.."""^^xsd:string ;
        olive:exampleTriple ":MyInsClaim olive:cost-Patient [olive:decimalValue \"70\"^^xsd:decimal; olive:hasUoM olive:_USDollar]"^^xsd:string ;
.

olive:coversAgent a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:bindingForAgent ;
	rdfs:label "covers agent"^^xsd:string ;
        skos:prefLabel "is covered by"@en ;
	skos:altLabel "is bound to"@en ;
        rdfs:range olive:Agent ;
	rdfs:comment """(:Commitment_1 olive:coversAgent :Agent_1) means that Agent1 is 'covered' by Commitment1. For example, (:InsurancePolicy123 olive:coversAgent :Alice) means that Alice is covered by said insurance policy. She may either be the policyholder (see olive:hasInsurancePolicy) or is, say, a dependent of the policyholder.

Note that this is not a subproperty of olive:hasParty, which would entail an active participation in the agreement. Dependents covered by their parents insurance stand in the 'covers agent' relation to the policy, but they are not parties of the agreement."""^^xsd:string ;
        olive:exampleTriple ":InsurancePolicy123 olive:coversAgent :Alice"^^xsd:string ;
.

olive:cptCode a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:serviceCode ;
	rdfs:label "cpt code"^^xsd:string ;
        skos:prefLabel "has the CPT code:"@en ;
	skos:altLabel "has the Current Procedural Terminology Code (CPT)"@en ;
        rdfs:domain olive:MedicalCareEvent ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Event1 olive:cptCode \"CODE\"^^xsd:string) means that Event1 is classified by the Current Procedural Terminology (CPT) Code CODE. For example, (:BillsAppt olive:cptCode \"47350\"^^xsd:string) would mean that Bills appointment was  for 'management of liver hemorrhage; simple suture of liver wound or injury.'

Of course, to make these connections we also need the class of events affiliated with the CPT code strings."""^^xsd:string ;
        olive:exampleTriple ":BillsAppt olive:cptCode \"47350\"^^xsd:string"^^xsd:string ;
	olive:mapsTo-ServiceCode "CJ"^^xsd:string ;
.

olive:creates a owl:ObjectProperty ;
	rdfs:label "creates"^^xsd:string ;
        skos:prefLabel "creates"@en ;
	rdfs:subPropertyOf olive:causes-general ;
        rdfs:domain owl:Thing ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:Thing1 olive:creates :Thing2) means that Thing1 creates Thing2. For example, (:Homer olive:creates :TheOdyssey). This is a general property; consider using more specific ones like olive:authorOf and olive:eventCreates when warranted."""^^xsd:string ;
        olive:exampleTriple ":Homer olive:creates :TheOdyssey"^^xsd:string ;
.

olive:createsID	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:creates, [owl:inverseOf olive:issuingAgent] ;
	rdfs:label "creates ID"^^xsd:string ;
	skos:prefLabel "assigns"@en ;
	rdfs:comment "Connection between an ID and the thing that minted the ID.  It may be a person or organization, or could be an algorithm (next available or random number generator)"^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:domain olive:Agent ;
	rdfs:range olive:ID ;
	olive:formerName "gist:allocates"^^xsd:string;
.

olive:creationTime a owl:ObjectProperty ;
	rdfs:subPropertyOf  olive:timeOf ;
	rdfs:label "creation time"^^xsd:string ;
        skos:prefLabel "was created at/on"^^xsd:string ;
        rdfs:domain [rdf:type owl:Class; owl:complementOf olive:Event] ;
        rdfs:range olive:TimeInstant ;
	rdfs:comment """(:_Thing_1 olive:creationTime :_Time_1) means that Thing1 came to exist at Time1. Thing1 can be any thing that is not an event; for events, use olive:startOfEvent. For example, (:MyCellphone olive:creationTime [a olive:TimeInstant; olive:universalDate \"2013-01-01\"^^xsd:date]) shows that my cell phone was made in 2013.

For specific types of creation, consider generating subproperties. Given the prevalence of birthdays in our data sets, it makes sense to have the subproperty olive:dateOfBirth. Similarly, you might want to create a subproperty for inventions, or for creating artistic works, and so on.

Whenever you discuss a thing's coming to exist, you get into tricky metaphysical issues. One might think that persons exist eternally before or after life; perhaps they have souls or essences. While this is interesting and important, we need not get hung up on it here. Instead, we can note that, whatever one's eternal metaphysical views are, there is an important change in ontological status when a person is born or dies, or when a particular statue is formed or crumbles."""^^xsd:string ;
        olive:exampleSubproperty olive:dateOfBirth, olive:recordedOn ;
        olive:exampleTriple ":MyCellphone olive:creationTime [a olive:TimeInstant; olive:universalDate \"2013-01-01\"^^xsd:date]"^^xsd:string ;
.

olive:currentAsOf a owl:ObjectProperty ;
	rdfs:label "current as Of"^^xsd:string ;
        skos:prefLabel "was current as of"@en ;
	rdfs:subPropertyOf olive:timeOf ;
        rdfs:domain olive:Content ;
        rdfs:range olive:TimeInstant ;
	rdfs:comment """(:Content1 olive:currentAsOf :TimeInstant1) means that Content1 was current as of TimeInstant1. For example, (:UMLSGraph2021AA olive:currentAsOf [olive:universalDate \"2020-01-01\"^^xsd:date]). This means that information from this source was up to date on Jan 1st, 2020. The information may still be current after that time, but the consumer of the content should be thoughtful about this.

Note that this is distinct from olive:creationTime. A source is created on its creation time, but that doesn't mean that its information is up to date at the time of creation. Consider a reprinting of Darwin's Origin of Species. The printing might be created in 2021, but the information was current as of 1859 (or so)."""^^xsd:string ;
        olive:exampleTriple ":UMLSGraph2021AA olive:currentAsOf [olive:universalDate \"2020-01-01\"^^xsd:date]"^^xsd:string ;
.

olive:dataSensitivityDefaultLevel a owl:ObjectProperty ;
	rdfs:label "data sensitivity default level"^^xsd:string ;
	skos:prefLabel "has the following default data sensitivity level:"@en ;
	rdfs:domain olive:DataClassificationType ;
	rdfs:range olive:DataSensitivityLevel ;
	rdfs:comment """(:DataClassificationType1 olive:dataSensitivityDefaultLevel :DataSensitivityLevel1) means that DataClassificationType1 has, as an overridable default, the sensitivity level of DataSensitivityLevel1. This property is designed to be useful in declaring overridable defaults for types of data. In general, this property should be used to represent facts of the sort \"If no specific sensitivity level is attributed to Dataset1, then, since Dataset1 is classified as DataClassificationType1, we should go ahead and assume that it has a sensitivity level of DataSensitivityLevel1\"."""^^xsd:string ;
.

olive:datatypePropertyUsesMappingProperty a owl:AnnotationProperty ;
	rdfs:label "datatype property uses mapping property"^^xsd:string ;
    skos:prefLabel "stores data that can be semantically transformed using"@en ;
	rdfs:domain owl:DatatypeProperty ;
    rdfs:range owl:Property ;
	rdfs:comment """(:DatatypeProperty1 olive:datatypePropertyUsesMappingProperty :MappingProperty1) means that DatatypeProperty1 stores data (in its object position) that can be semantically transformed into a resource using MappingProperty1. For example, (olive:npiEntityTypeCode olive:datatypePropertyUsesMappingProperty olive:mapsTo-NPIEntityTypeCode) means that the object values of olive:npiEntityTypeCode can be transformed into resources using olive:mapsTo-NPIEntityTypeCode."""^^xsd:string ;
    olive:exampleTriple "olive:npiEntityTypeCode olive:datatypePropertyUsesMappingProperty olive:mapsTo-NPIEntityTypeCode"^^xsd:string ;
.

olive:datatypePropertyTranslatesToProperty a owl:AnnotationProperty ;
    rdfs:label "datatype property translates to property"^^xsd:string ;
    skos:prefLabel "stores data that can be semantically translated into a triple with the property"@en ;
    rdfs:domain owl:DatatypeProperty ;
    rdfs:range owl:Property ;
    rdfs:comment """(:DatatypeProperty1 olive:datatypePropertyTranslatesToProperty :Property1) means that DatatypeProperty1 triples can be translated into Property1 triples given an appropriate decoding of the object of the DatatypeProperty1 triple (see olive:datatypePropertyUsesMappingProperty). For example, (olive:assignedSexText olive:datatypePropertyTranslatesToProperty olive:assignedSex) means that a triple of the form (SUBJ olive:assignedSexText CODE) can be translated into a triple of the form (SUBJ olive:assignedSex OBJ) given a suitable mapping between CODE and OBJ.."""^^xsd:string ;
    olive:exampleTriple "olive:assignedSexText olive:datatypePropertyTranslatesToProperty olive:assignedSex"^^xsd:string ;
.

olive:date a owl:DatatypeProperty ;
	rdfs:label "date"^^xsd:string ;
        skos:prefLabel "is related to"@en ;
	rdfs:domain owl:Thing ;
        rdfs:range xsd:date ;
	rdfs:comment """(:Thing1 olive:date \"DATE\"xsd:date) means that Thing1 is related to DATE. For example, (:MyParty olive:date \"2019-02-04\"^^xsd:date) means that my party is associated with February 4th, 2019. Of course, this is a pretty general relation to a date; often we prefer more specific properties like olive:startDate. However, it is useful to have a more general property for querying purposes."""^^xsd:string ;
        olive:exampleTriple ":MyParty olive:date \"2019-02-04\"^^xsd:date"^^xsd:string ;
.

olive:dateCertified a owl:ObjectProperty ;
	rdfs:label "date certified"^^xsd:string ;
        skos:prefLabel "was certified at/on"@en ;
	rdfs:subPropertyOf olive:timeOf ;
    rdfs:domain owl:Thing ;
    rdfs:range olive:TimeInstant ;
	rdfs:comment """(:Thing1 olive:dateCertified :TimeInstant1) means that Thing1 was certified at/on TimeInstant1. For example, (:Record1 olive:dateCertified [olive:universalDate \"2020-12-25\"^^xsd:date]) expresses that Record1 was certified on 2020-12-25."""^^xsd:string ;
    olive:exampleTriple ":Record1 olive:dateCertified [olive:universalDate \"2020-12-25\"^^xsd:date]"^^xsd:string ;
.

olive:dateOfBirth
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:personalInformation, olive:creationTime ;
	rdfs:label "has birthdate"^^xsd:string ;
	skos:prefLabel "was born on"@en ;
	rdfs:comment 'Date a living thing was "born" (or germinated, for plants).'^^xsd:string ;
	rdfs:domain olive:LivingThing ;
	rdfs:range olive:TimeInstant ;
	olive:formerName "gist:hasBirthDate"^^xsd:string;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:dateProcessed a owl:ObjectProperty ;
	rdfs:label "date processed"^^xsd:string ;
        skos:prefLabel "was processed on"@en ;
	rdfs:subPropertyOf olive:timeOf ;
        rdfs:domain olive:Commitment ;
        rdfs:range olive:TimeInstant ;
	rdfs:comment """(:Commitment1 olive:dateProcessed :Timeinstant1) means that Commitment1 was processed on Timeinstant1. For example, (:MyRaiseRequest olive:dateProcessed [olive:date \"2021-02-01\"^^xsd:date]) means that my raise request was processed on February 2nd, 2021."""^^xsd:string ;
        olive:exampleTriple ":MyRaiseRequest olive:dateProcessed [olive:date \"2021-02-01\"^^xsd:date]"^^xsd:string ;
.

olive:dateReceived a owl:ObjectProperty ;
	rdfs:label "date received"^^xsd:string ;
        skos:prefLabel "was received at/on"@en ;
	rdfs:subPropertyOf olive:timeOf ;
        rdfs:domain owl:Thing ;
        rdfs:range olive:TimeInstant ;
	rdfs:comment """(:Thing1 olive:dateReceived :TimeInstant1) means that Thing1 was received at/on TimeInstant1. For example, (:MyNewBike olive:dateReceived [olive:universalDate \"2020-12-25\"^^xsd:date]) expresses that I got my new bike last Christmas."""^^xsd:string ;
        olive:exampleTriple ":MyNewBike olive:dateReceived [olive:universalDate \"2020-12-25\"^^xsd:date]"^^xsd:string ;
.

olive:dateReceived-Olive a owl:ObjectProperty ;
	rdfs:label "dateReceived-olive"^^xsd:string ;
        skos:prefLabel "was received by Olive at/on"@en ;
	rdfs:subPropertyOf olive:dateReceived ;
        rdfs:domain owl:Thing ;
        rdfs:range olive:TimeInstant ;
	rdfs:comment """This is a subproperty of olive:dateReceived where the recipient (see olive:receives) of the thing in question is Olive. This might be used to show when Olive received the information about some insurance claim."""^^xsd:string ;
.

olive:dateSubmitted a owl:ObjectProperty ;
	rdfs:label "date submitted"^^xsd:string ;
        skos:prefLabel "was submitted on"@en ;
	rdfs:subPropertyOf olive:timeOf ;
        rdfs:domain olive:Commitment ;
        rdfs:range olive:TimeInstant ;
	rdfs:comment """(:Commitment1 olive:dateSubmitted :TimeInstant1) means that Commitment1 was submitted on TimeInstant1. For example, (: olive:dateSubmitted :)."""^^xsd:string ;
        olive:exampleTriple ""^^xsd:string ;
.

olive:deactivationDate a owl:ObjectProperty;
	rdfs:subPropertyOf olive:timeOf ;
	rdfs:label "deactivation date"^^xsd:string ;
    	skos:prefLabel "has the following deactivation date:"@en ;
    	rdfs:domain owl:Thing ;
    	rdfs:range olive:TimeInstant ;
	rdfs:comment """This links an individual with the date on which it was deactivated. For example (:DrRicesNPI olive:deactivationDate [olive:universalDate \"02-13-2021\"^^xsd:date])."""^^xsd:string ;
    	olive:exampleTriple ":DrRicesNPI olive:deactivationDate [olive:universalDate \"02-13-2021\"^^xsd:date]"^^xsd:string ;
.

olive:decimalValue a owl:DatatypeProperty, owl:FunctionalProperty ;
	rdfs:label "decimal value"^^xsd:string ;
	skos:prefLabel "has a decimal value of"@en ;
	rdfs:comment """[:_Magnitude_1 olive:decimalValue \"NUM\"^^xsd:double] means that the numeric value of magnitude1 is NUM. For example, [:ETHeight olive:decimalValue \"300\"^^xsd:string] means that the height of the Eiffel Tower is 300. Coupled with the assertion that [:ETHeight olive:hasUoM :_meter], we can conclude that the height of the Eiffel Tower is 300m.

This property is functional. See the discussion on the comment for olive:hasUoM for detailed discussion."""^^xsd:string ;
        olive:exampleTriple ":ETHeight olive:decimalValue \"300\"^^xsd:double"^^xsd:string ; 
	rdfs:domain olive:Magnitude ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range xsd:double ;
	olive:formerName "gist:decimalValue"^^xsd:string;
.

olive:denominator
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:unitComponent ;
	rdfs:label "denominator"^^xsd:string ;
	skos:prefLabel "has the denominator unit of"@en ;
	rdfs:comment "Relates a RatioUnit such as meters/second to the denominator Unit (e.g. second)."^^xsd:string ;
	rdfs:domain olive:RatioUnit ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range olive:UnitOfMeasure ;
	olive:formerName "gist:denominator"^^xsd:string;
.

olive:dependsOn a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:connectedTo ;
        owl:inverseOf olive:grounds ;
   	rdfs:label "depends on"^^xsd:string ;
   	skos:prefLabel "depends on"@en ;
   	skos:altLabel "is grounded by"@en, "is true in virtue of"@en ;.

olive:description a owl:DatatypeProperty ;
	rdfs:label "description"^^xsd:string ;
        skos:prefLabel "is described by"@en ;
	rdfs:subPropertyOf olive:note ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Thing1 olive:description \"DESC\"^^xsd:string) means that Thing1 is described by DESC. For example, (:MyPonySnowball olive:description \"Snowball is a Shetland pony with dark brown many and hindquarters, but is otherwise white.\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":MyPonySnowball olive:description \"Snowball is a Shetland pony with dark brown many and hindquarters, but is otherwise white.\"^^xsd:string"^^xsd:string ;
.

olive:description-long a owl:DatatypeProperty ;
	rdfs:label "long description"^^xsd:string ;
        skos:prefLabel "is described in depth by"@en ;
	rdfs:subPropertyOf olive:description ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string ;
	rdfs:comment """This is the 'long' version of olive:description. Contrast it with olive:description-short. There is no hard and fast line where something is a short description versus a normal versus a long one. Instead, it may be useful to distinguish these levels for certain usecases. For example, CPT codes are associated with multiple descriptions, and it will be useful to separate the short from the long ones."""^^xsd:string ;
.

olive:description-short a owl:DatatypeProperty ;
	rdfs:label "short description"^^xsd:string ;
        skos:prefLabel "is briefly described by"@en ;
	rdfs:subPropertyOf olive:description ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string ;
	rdfs:comment """This is the 'short' version of olive:description. Contrast it with olive:description-long. There is no hard and fast line where something is a short description versus a normal versus a long one. Instead, it may be useful to distinguish these levels for certain usecases. For example, CPT codes are associated with multiple descriptions, and it will be useful to separate the short from the long ones."""^^xsd:string ;
.

olive:destructionTime a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:timeOf ;
	rdfs:label "destruction time"^^xsd:string ;
        skos:prefLabel "was destroyed at/on"^^xsd:string ;
        rdfs:domain [rdf:type owl:Class; owl:complementOf olive:Event] ;
        rdfs:range olive:TimeInstant ;
	rdfs:comment """(:_Thing_1 olive:destructionTime :_Time_1) means that Thing1 ceased to exist at Time1. Thing1 can be any thing that is not an event; for events, use olive:endOfEvent. For example, (:MyCellphone olive:destructionTime [a olive:TimeInstant; olive:universalDate \"2025-09-17\"^^xsd:date]) shows that my cell phone will be destroyed on September 17, 2025.

For specific types of destruction, consider generating subproperties. Given the prevalence of humans in our datasets, it makes sense to have the subproperty olive:timeOfDeath.

Whenever you discuss a thing's coming to exist, you get into tricky metaphysical issues. One might think that persons exist eternally before or after life; perhaps they have souls or essences. While this is interesting and important, we need not get hung up on it here. Instead, we can note that, whatever one's eternal metaphysical views are, there is an important change in ontological status when a person is born or dies, or when a particular statue is formed or crumbles."""^^xsd:string ;
        olive:exampleSubproperty olive:timeOfDeath ;
        olive:exampleTriple ":MyCellphone olive:creationTime [a olive:TimeInstant; olive:universalDate \"2025-09-17\"^^xsd:date]"^^xsd:string ;
.

olive:directPartOf
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:partOf ;
	rdfs:label "direct part of"^^xsd:string ;
	skos:prefLabel "is directly a part of"@en ;
	rdfs:comment """(:Thing1 olive:directPartOf :Thing2) means that Thing1 is directly a part of Thing2. Parthood is transitive: if A is a part of B, and B is a part of C, then A is a part of C. But direct parthood is not transitive. While A may be a part of C, it is a part of C in virtue of B.

This property is not functional, as a given individual may directly be parts of different things. However, this property should be 'functional qua parthood chain'. Suppose some piece of equipment, E,  was part of two distinct machines, M1 and M2. Further, suppose that E is directly a part of M1a, which in turn is directly a part of M1. And E is directly a part of M2. This is fine, since E is only directly part of one whole in each of the two parthood chains in which it participates. E could not be a directly part of M1 in this scenario."""^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:directPartOf"^^xsd:string;
.

olive:dischargeDate a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:endOfEvent ;
	rdfs:label "discharge date"^^xsd:string ;
        skos:prefLabel "ended with a patient discharge date of"@en ;
        rdfs:domain olive:Admission ;
        rdfs:range olive:TimeInstant ;
	rdfs:comment """(:Admission1 olive:dischargeDate :Instant1) means that that the discharge date for Admission1 is Instant1. For example, (:MyHospitalStay olive:dischargeDate [a olive:TimeInstant; olive:universalDateTime \"2004-12-09\"^^xsd:date])."""^^xsd:string ;
        olive:exampleTriple ":MyHospitalStay olive:dischargeDate [a olive:TimeInstant; olive:universalDateTime \"2004-12-09\"^^xsd:date])"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:distributes a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:controls ;
	rdfs:label "distributes"^^xsd:string ;
	skos:altLabel "is the distributor of"@en ;
        skos:prefLabel "distributes"@en ;
        rdfs:domain olive:Agent ;
        rdfs:range [a owl:Class ;
		     owl:unionOf (olive:Content olive:PhysicalThing)] ;
	rdfs:comment """(:Agent1 olive:distributes :Thing1) means that Agent1 is the distributor of Thing1. For example, (:Pfizer olive:distributes :SampleOfXanax001).

While we do talk about being a distributor of a specific item, we more frequently talk about being a distributor of types. For example, 'Bill is in shipping autoparts', rather than specifying that 'Bill distributed spark plug 001'. At the writing of this comment, I prefer to represent relations to types via selecting a 'paradigm individual' from a class and relating to that. But this remains unresolved. TODO: implement the type level relationship and update this comment accordingly."""^^xsd:string ;
        olive:exampleTriple ":Pfizer olive:distributes :SampleOfXanax001"^^xsd:string ;
.

olive:does a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:causes-general, [owl:inverseOf olive:eventInvolves] ;
	rdfs:label "does"^^xsd:string ;
        skos:prefLabel "does"^^xsd:string ;
        rdfs:domain owl:Thing ;
        rdfs:range olive:Event;
	rdfs:comment """(:Thing1 olive:does :Event1) means that Thing1 is the 'doer', construed broadly, of Event1. For example, (:Casey olive:does :MakingMyCoffee) means that Casey is making my coffee.

This is a subproperty of olive:eventInvolves, as it relates an event to some aspect of the event. You may want to use or create subproperties for more specific roles that a doer may play in an event, especially when there are multiple doers that one might want to distinguish from one another.

This is obviously not functional; people and things can do multiple things. It's (perhaps less obviously) not inversely functinoal; the coffee pot may make my coffee as well as Casey."""^^xsd:string ;
        olive:exampleTriple ":Casey olive:does :MakingMyCoffee"^^xsd:string ;
.

olive:doneByAgent a owl:ObjectProperty ;
	rdfs:label "done by agent"^^xsd:string ;
        skos:prefLabel "is done by"@en ;
	rdfs:subPropertyOf olive:involvesAgent ;
        rdfs:domain olive:Event ;
        rdfs:range olive:Agent ;
	rdfs:comment """(:Event1 olive:doneByAgent :Agent1) means that Event1 is done by Agent1. For example, (:BakingCookies olive:doneByAgent :DianeHart) means that Diane did the baking. Note that this is not a functional property, as a single event could have multiple doers."""^^xsd:string ;
        olive:exampleTriple ":BakingCookies olive:doneByAgent :DianeHart"^^xsd:string ;
.

olive:doneForAgent a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:involvesAgent ;
	rdfs:label "done for agent"^^xsd:string ;
        skos:prefLabel "is done for"^^xsd:string ;
        rdfs:domain olive:Event ;
        rdfs:range olive:Agent ;
	rdfs:comment """(:Event1 olive:doneForAgent :Agent1) means that Event1 was done for, or because of, Agent1. For example, (:DiversitySeminar olive:doneForAgent :MichaelScott) means that the diversity seminar is designed for Michael Scott.

Often this can denote a beneficiary of some event, but it could also denote a maleficiary."""^^xsd:string ;
        olive:exampleTriple ":DiversitySeminar olive:doneForAgent :MichaelScott"^^xsd:string ;
.

olive:doneUsing a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:eventInvolves ;
	rdfs:label "done using" ;
	skos:prefLabel "is done via the use of"@en ;
	skos:altLabel "involves the use of"@en ;
	rdfs:domain olive:Event ;
	rdfs:range owl:Thing ;
	rdfs:comment """(:Event1 olive:doneUsing :Thing1) means that the Thing1 is used by a doer of Event1 (see olive:doneByAgent) in doing Event1. To put it another way, olive:doneUsing relates an event to something used instrumentally in making that event occur. So, for example, (:BreakingMyCarWindow0001 olive:doneUsing :Baseball0001) means that Baseball0001 was used to break my car window.""" ;
	olive:exampleTriple ":BreakingMyCarWindow0001 olive:doneUsing :Baseball0001" ;
.

olive:duration a owl:ObjectProperty ;
	rdfs:label "duration"^^xsd:string ;
        skos:prefLabel "lasted"@en ;
	rdfs:subPropertyOf olive:hasMagnitude ;
        rdfs:domain olive:Event ;
        rdfs:range olive:Duration ;
	rdfs:comment """(:Event1 olive:duration :Duration1) means that Event1 lasted Duration1. For example, (:COVIDPandemic olive:duration [olive:decimalValue \"18\"^^xsd:decimal ; olive:hasUoM :_Month]) would indicate that the COVID pandemic lasted 18 months (fingers crossed!)."""^^xsd:string ;
        olive:exampleTriple ":COVIDPandemic olive:duration [olive:decimalValue \"18\"^^xsd:decimal ; olive:hasUoM :_Month]"^^xsd:string ;
.

olive:editorOf a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:contentContributor ;
	rdfs:label "editor of"^^xsd:string ;
        skos:prefLabel "is the editor of"^^xsd:string ;
        rdfs:domain olive:Agent ;
        rdfs:range olive:Content ;
	rdfs:comment """(:Agent1 olive:editorOf :Content1) means that Agent1 edited Content1. For example, (:RobertGiroux olive:authorOf :CatcherInTheRye)."""^^xsd:string ;
        olive:exampleTriple ":RobertGiroux olive:authorOf :CatcherInTheRye"^^xsd:string ;
.

olive:educationInstitution a owl:ObjectProperty ;
	rdfs:label "education institution"^^xsd:string ;
        skos:prefLabel "was at"@en ;
	rdfs:subPropertyOf olive:doneByAgent ;
        rdfs:domain olive:Education ;
        rdfs:range olive:School ;
	rdfs:comment """(:Education1 olive:educationInstitution :School1) means that Education1 was at School1. For example, (:CaseysUndergradEducation olive:educationInstitution :PacificLutheranUniversity) indicates that Casey went to PLU for undergrad. Note that the direction assertion between student and school is olive:attends, whereas olive:educationInstitution goes through the intermediate node of the education event."""^^xsd:string ;
        olive:exampleTriple ":CaseysUndergradEducation olive:educationInstitution :PacificLutheranUniversity"^^xsd:string ;
.

olive:effectiveFrom a owl:ObjectProperty ;
	rdfs:label "effective from" ;
	skos:prefLabel "is effective from"@en ;
	skos:altLabel "takes effect on"@en ;
	rdfs:subPropertyOf olive:timeOf ;
	rdfs:domain olive:Content ;
	rdfs:range olive:TimeInstant ;
	rdfs:comment """(:Content1 olive:effectiveFrom :TimeInstant1) means that TimeInstant1 is the date (or time) at which Content1 goes into effect. Thus, TimeInstant1 can (and often does) differ from the date at which Content1 is created. For example, (:BobsEmploymentContractWithOlive olive:effectiveFrom [olive:universalDate \"2021-01-01\"^^xsd:date]) means that Bob's employment contract with Olive goes into effect on 1/1/2021.""" ;
	olive:exampleTriple ":BobsEmploymentContractWithOlive olive:effectiveFrom [olive:universalDate \"2021-01-01\"^^xsd:date]" ;
.

olive:effectiveUntil a owl:ObjectProperty ;
	rdfs:label "effective until" ;
	skos:prefLabel "is effective until"@en ;
	skos:altLabel "remains in effect until"@en ;
	rdfs:subPropertyOf olive:timeOf ;
	rdfs:domain olive:Content ;
	rdfs:range olive:TimeInstant ;
	rdfs:comment """(:Content1 olive:effectiveUntil :TimeInstant1) means that TimeInstant1 is the date (or time) at which Content1 ceases to be effective. This relationship is distinct from the date at which Content1 is destroyed (although destruction may end up causing something to cease to be effective, that thing need not be destroyed in order to cease to be effective). For example, (:BobsEmploymentContractWithOlive olive:effectiveUntil [olive:universalDate \"2021-01-01\"^^xsd:date]) means that Bob's employment contract with Olive ends (i.e. is no longer effective or binding) on 1/1/2021.""" ;
	olive:exampleTriple ":BobsEmploymentContractWithOlive olive:effectiveUntil [olive:universalDate \"2021-01-01\"^^xsd:date]" ;
.

olive:ehrProvider a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasContractWith ;
	rdfs:label "ehr provider"^^xsd:string ;
        skos:prefLabel "stores EHR using"@en ;
        rdfs:domain olive:Organization ;
        rdfs:range olive:Organization ;
	rdfs:comment """(:MeriterHospital olive:ehrProvider :EpicSystems) means that Epic Systems stores the EHR data for Meriter Hospital. Notice that this relates the organizations, and not the organization to the software specific to Epic."""^^xsd:string ;
        olive:exampleTriple ":MeriterHospital olive:ehrProvider :EpicSystems"^^xsd:string ;
.

olive:ein a owl:DatatypeProperty, owl:FunctionalProperty, owl:InverseFunctionalProperty ;
	rdfs:subPropertyOf olive:identifyingText ;
	rdfs:label "ein"^^xsd:string ;
    skos:prefLabel "has the following EIN:"@en ;
	skos:altLabel "has the following Employer Identification Number:"@en ;
    rdfs:domain olive:Agent ;
    rdfs:range xsd:string ;
	rdfs:comment """(:Agent olive:ein \"ID\"^^xsd:string) means that ID is the Employer Identification Number (EIN) for :Agent. For example, (:Olive olive:ein \"212121212\"^^xsd:string)."""^^xsd:string ;
    olive:exampleTriple ":Olive olive:ein \"212121212\"^^xsd:string"^^xsd:string ;
.

olive:element_1 a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasElement;
	rdfs:label "element 1"^^xsd:string ;
        skos:prefLabel "has a first element of"@en ;
	skos:altLabel "has a car of"@en ;
	rdfs:comment """(:List1 olive:element_1 :Item1) means that Item1 is the first item in List1."""^^xsd:string ;
        olive:exampleTriple ":List1 olive:element_1 :Item1"^^xsd:string ;
.

olive:element_2 a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasElement;
	rdfs:label "element 2"^^xsd:string ;
        skos:prefLabel "has a second element of"^^xsd:string ;
	rdfs:comment """(:List1 olive:element_2 :Item1) means that Item1 is the second item in List1."""^^xsd:string ;
        olive:exampleTriple ":List1 olive:element_2 :Item1"^^xsd:string ;
.

olive:element_3 a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasElement;
	rdfs:label "element 3"^^xsd:string ;
        skos:prefLabel "has a third element of"^^xsd:string ;
	rdfs:comment """(:List1 olive:element_3 :Item1) means that Item1 is the third item in List1."""^^xsd:string ;
        olive:exampleTriple ":List1 olive:element_3 :Item1"^^xsd:string ;
.

olive:emailAddress a owl:DatatypeProperty ;
        rdfs:subPropertyOf olive:contactInformation ;
        rdfs:subProperty olive:address ;
	rdfs:label "email address string"^^xsd:string ;
        skos:prefLabel "can be contacted via"^^xsd:string ;
        rdfs:domain [a owl:Class ;
	             owl:unionOf (olive:Agent olive:EmailAddress)] ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Agent1 olive:emailAddress \"\"^^xsd:string) means that . For example, (:OliveSales olive:emailAddress \"sales@oliveai.com\"^^xsd:string) would mean that you could contact Olive's sales department by sending an email to sales@oliveai.com.

Note that this is distinct from the olive:hasEmailAddress property."""^^xsd:string ;
        olive:exampleTriple ":OliveSales olive:emailAddress \"sales@oliveai.com\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:employeeCount a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:associatedCount ;
	rdfs:label "employee count"^^xsd:string ;
        skos:prefLabel "has the following number of employees:"@en ;
        rdfs:domain  olive:Organization ;
        rdfs:range xsd:integer ;
	rdfs:comment """(:Org1 olive:employeeCount \"NUM\"^^xsd:integer) means that Org1 has NUM employees. For example, (olive:Olive olive:employeeCount \"457\"^^xsd:string) means that Olive has 457 employees.

Beware of temporal qualification here! Very few companies will have a set number of employees for very long."""^^xsd:string ;
        olive:exampleTriple "olive:Olive olive:employeeCount \"457\"^^xsd:string"^^xsd:string ;
.

olive:employee a owl:ObjectProperty, owl:FunctionalProperty ;
	rdfs:label "employee"^^xsd:string ;
        skos:prefLabel "employed"@en ;
	rdfs:subPropertyOf olive:doneForAgent, olive:doneByAgent ;
        rdfs:domain olive:Employment ;
        rdfs:range olive:Agent ;
	rdfs:comment """(:Employment1 olive:employee :Agent1) means that Employment1 employed Agent1. For example, (:BillsEmploymentAtCigna olive:employee :Bill).

Note that this property is functional. If two agents are hired simultaneously, there are still distinct hiring events, or otherwise we should reconceptualize the case as the employment of an agent that is composed by those two subagents."""^^xsd:string ;
        olive:exampleTriple ":BillsEmploymentAtCigna olive:employee :Bill"^^xsd:string ;
.

olive:employer a owl:ObjectProperty ;
	rdfs:label "employer"^^xsd:string ;
        skos:prefLabel "was with"@en ;
	rdfs:subPropertyOf olive:doneForAgent, olive:doneByAgent ;
        rdfs:domain olive:Employment ;
        rdfs:range olive:Agent ;
	rdfs:comment """(:Employment1 olive:employer :Agent1) means that Employment1 was with Agent1. For example, (:BillsEmplomentAtCigna olive:employer :Cigna).

This is not asserted to be a functional property. The reason is that I am still entertaining the possibility that there coudl be an employment event in which two employers jointly hire someone. Maybe such a case would be if my neighbor and I together pay for someone to take care of a tree that straddles our properties. Of course, we could model this as two different concurrent employments, but that strikes me as a less natural representation."""^^xsd:string ;
        olive:exampleTriple ":BillsEmplomentAtCigna olive:employer :Cigna"^^xsd:string ;
.

olive:employs a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasPart, olive:affiliatedWith, olive:governs ;
	rdfs:label "employs"^^xsd:string ;
        skos:prefLabel "employs"^^xsd:string ;
        rdfs:domain olive:Organization ;
        rdfs:range olive:Person ;
	rdfs:comment """(:_Organzation_1 olive:employs :_Person_1) means that Organization1 employs Person1. For example, (:MeriterHospital olive:employs :DrRice) means that Meriter Hospital has Dr. Rice as an employee.

This is a subproperty of olive:hasPart; each employee is a part of the organization that employs them.

Note that this only applies to organizations in the subject role, meaning that olive:employs cannot be used to capture, say, when an individual person hires a babysitter. If we want to handle this case, we will either need to modify this property (make it hold between an agent and a person, and no longer make it a subproperty of olive:hasPart), or create a new property that is specific to individuals."""^^xsd:string ;
        olive:exampleTriple ":MeriterHospital olive:employs :DrRice"^^xsd:string ;
.

olive:endDate a owl:DatatypeProperty ;
	rdfs:label "end date"^^xsd:string ;
        skos:prefLabel "ends on/at"@en ;
	rdfs:subPropertyOf olive:date ;
	rdfs:domain olive:TimeInterval ;
        rdfs:range xsd:dateTime ;
	rdfs:comment """(:TimeInterval1 olive:endDate \"DATETIME\"xsd:dateTime) means that TimeInterval1 ends on/at DATETIME. For example, (:MiddleAges olive:endDate \"1517-01-01\"^^xsd:date) shows that the Middle Ages ended in 1517."""^^xsd:string ;
        olive:exampleTriple ":MiddleAges olive:endDate \"1517-01-01\"^^xsd:date"^^xsd:string ;
.

olive:endingSubevent a owl:ObjectProperty ;
	rdfs:label "ending subevent"^^xsd:string ;
        skos:prefLabel "ended with"@en ;
	rdfs:subPropertyOf olive:hasSubevent ;
        rdfs:domain olive:Event ;
        rdfs:range olive:Situation ;
	rdfs:comment """(:Event1 olive:endingSubevent :Event1) means that Event1 began with Event1. For example, (:SuperBowlXXIII olive:endingSubevent :FinalWhistle2391).

This property is not functional. We can have events of various granularities. See the comment on olive:beginningSubevent."""^^xsd:string ;
        olive:exampleTriple ":SuperBowlXXIII olive:endingSubevent :FinalWhistle2391"^^xsd:string ;
.

olive:endOfEvent a owl:ObjectProperty ;
	rdfs:subPropertyOf  olive:timeOfEvent ;
	rdfs:label "end of event"^^xsd:string ;
        skos:prefLabel "ends at/on"^^xsd:string ;
        rdfs:domain olive:Event ;
        rdfs:range olive:TimeInstant ;
	rdfs:comment """(:_Event_1 olive:endOfEvent :_Time_1) means that Event1 ends/ended at Time1. For example, (:_ThanksGivingDinner olive:startOfEvent [a olive:TimeInstant; olive:universalDateTime \"2020-11-26T19:30:00\"^^xsd:dateTime]) means that my Thanksgiving dinner ends at 7:30pm on November 26, 2020.

Note that unlike olive:timeOfEvent, one cannot use the granularity to infer the duration of the event. Adding a olive:hasPrecision assertion is a way to indicate some +/- error bounds; to say an event ends at 9:30pm with a precision of one minute indicates the event will end anywhere between 19:29 and 19:30. Absent precision information, we assume that the time instant is maximally precise--to the second for datetimes and to the day for dates."""^^xsd:string ;
        olive:exampleTriple ":_ThanksGivingDinner olive:startOfEvent [a olive:TimeInstant; olive:universalDateTime \"2020-11-26T19:30:00\"^^xsd:dateTime]"^^xsd:string ;
.

olive:endpointFor a owl:ObjectProperty, owl:InverseFunctionalProperty ;
	rdfs:subPropertyOf olive:affects ;
	rdfs:label "endpoint for"^^xsd:string ;
        skos:prefLabel "is an endpoint for"@en ;
        rdfs:domain olive:Endpoint ;
        rdfs:range olive:SoftwareApplication ;
	rdfs:comment """(:Endpoint1 olive:endpoint1 :SoftwareApplication1) means that Endpoint1 is an endpoint for SoftwareApplication1. For example, (:JenaEndpoint-Dev olive:endpointFor :OliveKG) might indicate that :JenaEndpoint-Dev is the (development) endpoint for Olive's knowledge graph."""^^xsd:string ;
        olive:exampleTriple ":JenaEndpoint-Dev olive:endpointFor :OliveKG"^^xsd:string ;
.

olive:entityTypeCode a owl:DatatypeProperty;
	rdfs:subPropertyOf olive:tag ;
	rdfs:label "entity type code"^^xsd:string ;
    skos:prefLabel "has the following entity type code:"@en ;
    rdfs:domain owl:Thing ;
    rdfs:range xsd:string ;
	rdfs:comment """This links an individual with some corresponding entity type code. For example (:DrRice olive:entityTypeCode \"1\"^^xsd:string). In general, the data stored using this property and its subproperties should, in principle, allow for placing of the relevant individual into an appropriate class, assuming that there is enough information available to perform the string-entity transformation (see also olive:datatypePropertyUsesMappingProperty)."""^^xsd:string ;
    olive:exampleTriple ":DrRice olive:entityTypeCode \"1\"^^xsd:string"^^xsd:string ;
.

olive:evaluatedThing a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:primarilyAbout, [owl:inverseOf olive:causes-general] ;
	rdfs:label "evaluated thing"^^xsd:string ;
        skos:prefLabel "evaluates"@en ;
        rdfs:domain olive:Evaluation ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:Evaluation1 olive:evaluatedThing :Thing1) means that Evaluation is an evaluation of Thing1. For example, (:BillysReportCard olive:evaluatedThing :Billy)."""^^xsd:string ;
        olive:exampleTriple ":BillysReportCard olive:evaluatedThing :Billy"^^xsd:string ;
.

olive:evaluator a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:authorOf ;
	rdfs:label "evaluator"^^xsd:string ;
        skos:prefLabel "performed"@en ;
        rdfs:domain olive:Agent ;
        rdfs:range olive:Evaluation ;
	rdfs:comment """(:Agent1 olive:evaluator :Evaluation1) means that Evaluation1 records Agent1's assessment of the subject in question (see olive:evaluatedThing). For example, (:CaseysManager olive:evaluator :CaseysPerformanceReview) indicates that Casey's manager was the 'author of' his performance review."""^^xsd:string ;
        olive:exampleTriple ":CaseysManager olive:evaluator :CaseysPerformanceReview"^^xsd:string ;
.

olive:eventCareProvider a owl:ObjectProperty ;
        rdfs:subPropertyOf olive:doneByAgent ;
	rdfs:label "event care provider" ;
	skos:prefLabel "was done by"@en ;
	rdfs:domain olive:MedicalCareEvent ;
	rdfs:range olive:MedicalCareProvider ;
	rdfs:comment """This relates a medical care event to the care provider in that event. For example, (:Visit01 olive:eventCareProvider :DrMartin) indicates that Dr Martin was the care provider in visit 01."""^^xsd:string ;
	olive:exampleTriple ":Visit01 olive:eventCareProvider :DrMartin"^^xsd:string ;
.

olive:eventCareProvider-admitting a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:eventCareProvider ;
	rdfs:label "admitting event care provider" ;
	skos:prefLabel "was done by attending provider"@en ;
	rdfs:comment """This is a subproperty of olive:eventCareProvider specific to range of admitting providers."""^^xsd:string ;
.

olive:eventCareProvider-attending a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:eventCareProvider ;
	rdfs:label "attending event care provider" ;
	skos:prefLabel "was done by attending provider"@en ;
	rdfs:comment """This is a subproperty of olive:eventCareProvider specific to range of attending providers."""^^xsd:string ;
.

olive:eventCareProvider-primaryCare a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:eventCareProvider ;
	rdfs:label "primary care event care provider" ;
	skos:prefLabel "was done by primary care provider"@en ;
	rdfs:comment """This is a subproperty of olive:eventCareProvider specific to range of primary care providers."""^^xsd:string ;
.

olive:eventClaim a owl:ObjectProperty ;
	rdfs:label "event claim"^^xsd:string ;
        skos:prefLabel "generates"@en ;
	rdfs:subPropertyOf olive:affectedObject-Indirect ;
        rdfs:domain olive:MedicalCareEvent ;
        rdfs:range olive:InsuranceClaim ;
	rdfs:comment """(:MedicalCareEvent1 olive:eventClaim :InsuranceClaim1) means that MedicalCareEvent1 generates InsuranceClaim1. For example, (:Surgery201 olive:eventClaim :ClaimForSurgery201) means that the surgery in question is included (if not the sole basis for) in the related insurance claim."""^^xsd:string ;
        olive:exampleTriple ":Surgery201 olive:eventClaim :ClaimForSurgery201"^^xsd:string ;
.

olive:eventCreates a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:creates, olive:eventOutputs ;
	rdfs:label "event creates"^^xsd:string ;
        skos:prefLabel "produces"@en ;
	skos:altLabel "creates"@en ;
        rdfs:domain olive:CreationEvent ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:Event1 olive:eventCreates :Thing1) means that Thing1 was created by/during Event1. For example, (:MyBakingParty olive:eventCreates :ThisPie) would indicate that this pie was created at my baking party. This property can be used to connect any creation event to the thing that is created.

The creation does not need to be intentional. Byproducts are created just as well as primary product."""^^xsd:string ;
        olive:exampleTriple ":MyBakingParty olive:eventCreates :ThisPie"^^xsd:string ;
.

olive:eventInvolves a owl:ObjectProperty ;
	rdfs:label "event involves"^^xsd:string ;
        skos:prefLabel "involves"^^xsd:string ;
        rdfs:domain olive:Situation;
        rdfs:range owl:Thing;
	rdfs:comment """(:Situation1 olive:eventInvolves :_Thing_1) means that Situation1 involves Thing1. This is the very loosest connection a thing can have to a given event. It applies to the doers, objects, location, equipment used, etc. that is somehow involved in a given event. For example, (:MyBirthdayParty olive:eventInvolves :MyIceCreamCake), since that cake was served at the party. But the event also involved myself, my guests, the table the cake was served on, my house in general (since it was held there), August 2, 2020 (the date the party was held), and so on. 

Since this property is so general, it should rarely be directly used. Instead, look at the subproperties, which will carry more specific meanings--and thus, inferential power. For example, while a given doctor's office is involved in a given doctor's visit, it's best to use olive:occursAt. This will ensure/infer that the office is a place where the visit happened. Contrast this with travelling to the doctor's office. That would also involve the office, but the office wouldn't be the location where the travelling occurs, but rather the destination.

Notice that not all important, more specific, ways of being involved are subproperties of olive:eventInvolves. Sometimes the appropriate property is a subproperty of [owl:inverseOf olive:eventInvolves]. For example, while a patient is involved (olive:eventInvolves) in their doctor's visit, it would be best to say the visit has them as the patient (olive:eventPatient). So, when searching for the appropriate relationship, make sure to consider properties where the event is subject AND properties where the event is the object.

Note that for legacy reasons the name of the property is \"eventInvolves\" despite the fact that its domain covers instances of olive:Situation."""^^xsd:string ;
        olive:exampleSubproperty olive:eventPatient, olive:occursAt;
        olive:exampleTriple ":MyBirthdayParty olive:eventInvolves :MyIceCreamCake"^^xsd:string ;
.

olive:eventOutputs a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:affectedObject-Direct ;
	rdfs:label "event outputs"^^xsd:string ;
	skos:prefLabe "has as an output"@en ;
	rdfs:domain olive:Event ;
	rdfs:range owl:Thing ;
	rdfs:comment """(:Event1 olive:eventOutputs :Thing1) means that Thing1 is in some sense an output of Event1. The notion of \"being an output\" used here presupposes that the output is affected by the event in some way (see olive:affectedObject-Direct) and that it is consequently conceived of as involved in the event in some way (see olive:eventInvolves). Thus, this relation is a \"role player\" relation and not an event-to-event relation (as is, say, olive:causes-events). Context and one's modeling purposes will determine the scope of the extent of this property.

	For example, (:Photosynthesis001 olive:eventOutputs :Glucose001) means that an output of the specific event Photosynthesis001 is the specific thing Glucose001. But note that there could be other objects that stand in olive:eventOutputs to :Photosynthesis001 (e.g. :Oxygen001); note also that the notion of an output involved can be far less of a direct one than in this example - e.g. (:CompanyXChangingTheUnitCostOfSomeProduct olive:eventOutputs :ANewCostSpecificationGoverningThatProduct). Again, context will help to determine how strict or loose the scope of an event is with regard to its outputs. Note also that distinguishing between olive:eventOutputs and olive:eventCreates allows for this sort of flexibility (changing the cost of something is not itself the creation of a new cost specification, but it might involve such a creation and thereby have the cost specification as an output).""" ;
	olive:exampleTriple ":Photosynthesis001 olive:eventOutputs :Glucose001" ;
.

olive:eventPatient a owl:ObjectProperty ;
	rdfs:label "event patient"^^xsd:string ;
        skos:prefLabel "has the patient"@en ;
	rdfs:subPropertyOf olive:doneForAgent ;
        rdfs:domain olive:MedicalCareEvent ;
        rdfs:range olive:Patient ;
	rdfs:comment """(:MedicalCareEvent1 olive:eventPatient :Patient1) means that MedicalCareEvent1 has the patient Patient1. For example, (:Visit01 olive:eventPatient :Casey) would mean that Casey was the patient in Visit01."""^^xsd:string ;
        olive:exampleTriple ":Visit01 olive:eventPatient :Casey"^^xsd:string ;
.

olive:example a owl:AnnotationProperty ;
	rdfs:label "example"^^xsd:string ;
	skos:prefLabel "has the example:"@en ;
	rdfs:domain rdfs:Resource ;
	rdfs:comment """An annotation property that allows ontologists to document the connection between a resource and illustrative examples. This property should almost never be directly asserted. Instead, use the subproperties such as olive:exampleTriple and olive:exampleSubclass."""^^xsd:string ;
.

olive:exampleBinding a owl:AnnotationProperty ;
	rdfs:label "example binding"^^xsd:string ;
        skos:prefLabel "might be bound to, for example,"@en ;
	rdfs:subPropertyOf olive:example ;
        rdfs:domain olive:Variable ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Variable1 olive:exampleBinding :string1) means that Variable1 might be bound to, for example, string1. For example, (:Var1 olive:exampleBinding \"<http://purl.bioontology.org/ontoloyg/STY/T121>\"^^xsd:string) tells us that we might want to run the query with that particular URI as a binding for Var1."""^^xsd:string ;
        olive:exampleTriple ":Var1 olive:exampleBinding \"<http://purl.bioontology.org/ontoloyg/STY/T121>\"^^xsd:string"^^xsd:string ;
.

olive:exampleInstance a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:example ;
        rdfs:label "example instance"^^xsd:string ;
	skos:prefLabel "has the example instance:"@en ;
        rdfs:domain owl:Class ;
        rdfs:comment "An annotation property that allows ontologists to document the connection between a class and some illustrative instances. Note that these don't need to be directly asserted: you might have a case where an instance of class is noteworthy, despite not being a direct instance (that is, it could be inferred). Further, it often makes sense to put an aspirational (that is, not even reified!) items here simply as strings. So, we omit the rdfs:range for this property; really you should either put in an owl:NamedIndividual or a xsd:string."^^xsd:string ;
	olive:exampleTriple ":Person olive:exampleInstance :BarackObama"^^xsd:string ;
.

olive:exampleSubclass a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:example ;
        rdfs:label "example subclass"^^xsd:string ;
	skos:prefLabel "has as a subclass, for example, "@en ;
        rdfs:domain owl:Class ;
        rdfs:range owl:Class ;
        rdfs:comment "An annotation property that allows ontologists to document the connection between a class and its most notable subclasses. Note that these don't need to be directly asserted: you might have a case where a subclass of a subclass is noteworthy, despite not being a direct subclass."^^xsd:string ;
	olive:exampleTriple ":HeadOfState olive:exampleSubclass :USPresident"^^xsd:string ;
.

olive:exampleSubproperty a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:example ;
        rdfs:label "example subproperty"^^xsd:string ;
	skos:prefLabel "has the example subproperty:"@en ;
        rdfs:domain rdf:Property ;
	rdfs:range rdf:Property ;
        rdfs:comment "An annotation property that allows ontologists to document the connection between a property and its most notable subproperties. Note that these don't need to be directly asserted: you might have a structure where [:p1 rdfs:subPropertyOf :p2], and [:p2 rdfs:subPropertyOf :p3], but nonetheless you might want to note that :p1 is a good example subproperty of :p3 using olive:exampleSubproperty."^^xsd:string ;
	olive:exampleTriple ":physicalPartOf olive:exampleSubproperty :bodyPartOf"^^xsd:string ;
.
    
olive:exampleTriple a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:example ;
        rdfs:label "example triple"^^xsd:string ;
	skos:prefLabel "can be used as follows, for example:"@en ;
	rdfs:range xsd:string ;
        rdfs:comment "An annotation property that allows ontologists to give an example triple using the relevant term. Note that this triple does not need to be actually asserted; it just needs to be illustrative of the sort of triples you will be making with the term in question."^^xsd:string ;
	olive:exampleTriple ":subRegion olive:exampleTriple \":NorthAmerica :subRegion :PacificNorthwest\"^^xsd:string"^^xsd:string ;
.

olive:exampleValue a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:example ;
	rdfs:label "example value"^^xsd:string ;
        skos:prefLabel "could be, for example:"@en ;
        rdfs:domain olive:Variable ;
	rdfs:comment """(:Variable1 olive:exampleValue :Thing1) means that Thing1 is an example value that could be substituted in for Variable1. For example, (:JSONVar olive:exampleValue \"{here: [is an example] }\"^^olive:json)."""^^xsd:string ;
        olive:exampleTriple ":JSONVar olive:exampleValue \"{here: [is an example] }\"^^olive:json"^^xsd:string ;
.

olive:executes a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:invokes ;
	rdfs:label "executes"^^xsd:string ;
        skos:prefLabel "runs"@en ;
	skos:altLabel "executes"@en, "partly consists in running"@en ;
        rdfs:domain olive:Event ;
        rdfs:range olive:Content ;
	rdfs:comment """(:Event1 olive:executes :Content1) means that Event1 (partly) consists in the execution of Content1. For example, (:MyPlayingMinesweeper olive:executes :MinsweeperApplication) means that my playing consisted in running the application."""^^xsd:string ;
        olive:exampleTriple ":MyPlayingMinesweeper olive:executes :MinsweeperApplication"^^xsd:string ;
.

olive:exemplarForClass a owl:AnnotationProperty, owl:FunctionalProperty ;
	rdfs:subPropertyOf olive:relatedToClass ;
	rdfs:label "exemplar for class"^^xsd:string ;
        skos:prefLabel "is the exemplar"@en ;
        rdfs:domain olive:ExemplarIndividual ;
        rdfs:range owl:Class ;
	rdfs:comment """(:ExemplarIndividual1 olive:exemplarForClass :Class1) means that ExemplarIndividual1 is the (unique) exemplar for Class1. The naming convention is that each :CLASS should have a corresponding :Exemplar_CLASS as its exemplar individual. See the comment on olive:ExemplarIndividual."""^^xsd:string ;
        olive:exampleTriple "(:Exemplar_Doctor olive:exemplarForClass olive:Doctor)"^^xsd:string ;
.

olive:expressedIn
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:uses ;
	rdfs:label "expressed in"^^xsd:string ;
	skos:prefLabel "is expressed using"@en ;
	rdfs:comment "The language something was expressed in"^^xsd:string ;
	rdfs:domain olive:ContentBearingThing ;
	rdfs:range olive:Language ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:expressedIn"^^xsd:string;
.

olive:equivalentTo a owl:ObjectProperty, owl:ReflexiveProperty, owl:SymmetricProperty, owl:TransitiveProperty ;
	rdfs:label "equivalent to"^^xsd:string ;
        skos:prefLabel "is equivalent to"@en ;
        rdfs:domain owl:Thing ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:Thing1 olive:equivalentTo :Thing2) means that Thing1 and Thing2 are the part of (at least) one equivalence class. For example, (:Superman olive:equivalentTo :ClarkKent) holds because they are the same individual. Every subproperty of olive:equivalentTo is an equivalence relation, meaning that it is reflexive, symmetric, and transitive. Example subproperties would include congruence (from geometry), being the same height as, or being the same time as (see olive:sameTimeAs)."""^^xsd:string ;
        olive:exampleSubproperty olive:sameTimeAs ;
        olive:exampleTriple ":Superman olive:equivalentTo :ClarkKent"^^xsd:string ;
.
owl:sameAs rdfs:subPropertyOf olive:equivalentTo .

olive:facetingOfClass a owl:AnnotationProperty ;
	rdfs:label "faceting of class"^^xsd:string ;
	rdfs:subPropertyOf olive:instancesAreSubclassesOf ;
	skos:prefLabel "represents a coherent way of subdividing"@en ;
	rdfs:domain olive:Class-HigherOrder ;
	rdfs:range owl:Class ;
	rdfs:comment """(:Class-HigherOrder1 olive:facetingOfClass :Class1) means that :Class-HigherOrder1 is a class that represents a specific way of grouping the instances of :Class1 into subclasses. For example, (ex:PersonTypeByOccupation olive:facetingOfClass olive:Person) means that ex:PersonTypeByOccupation is a class each instance of which is (1) a subclass of olive:Person, and (2) represents a subdivision of olive:Person based on the general organizing principle represented by ex:PersonTypeByOccupation."""^^xsd:string ;
	olive:exampleTriple "ex:PersonTypeByOccupation olive:facetingOfClass olive:Person" ;
.

olive:faxNumber a owl:DatatypeProperty ;
    rdfs:subPropertyOf olive:contactInformation ;
	rdfs:label "fax number"^^xsd:string ;
    skos:prefLabel "has the following fax number:"@en ;
    rdfs:domain [a owl:Class ;
	    owl:unionOf (olive:Address olive:Agent)] ;
    rdfs:range xsd:string ;
	rdfs:comment """(:AddressOrAgent1 olive:faxNumber  \"NUM\"^^xsd:string) means that \"NUM\" is the fax number associated with AddressOrAgent1. For example, (:Bill olive:faxNumber \"122345260982\"xsd:string) shows you what you might dial to reach Bill by fax."""^^xsd:string ;
    olive:exampleTriple ":Bill olive:faxNumber \"122345260982\"xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:fieldCount a owl:DatatypeProperty, owl:FunctionalProperty ;
	rdfs:subPropertyOf olive:associatedCount ;
	rdfs:label "field count"^^xsd:string ;
        skos:prefLabel "has the following number of fields:"^^xsd:string ;
        rdfs:domain olive:Table-Data ;
        rdfs:range xsd:integer ;
	rdfs:comment """(:_Table_1 olive:fieldCount INT) means that Table1 has INT fields/columns. For example, (:CaseysGradebook olive:fieldCount 10) means that there are 10 columns in Casey's gradebook."""^^xsd:string ;
        olive:exampleTriple ":CaseysGradebook olive:fieldCount 10"^^xsd:string ;
.

olive:fieldName a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name ;
	rdfs:label "field name"^^xsd:string ;
        skos:prefLabel "field name"^^xsd:string ;
        rdfs:domain olive:Field-Data ;
        rdfs:range xsd:string ;
	rdfs:comment """(:_Field_1 olive:fieldName \"NAME\"^^xsd:string) means that Field1 is named, or has the header, NAME. For example, (:ExField olive:fieldName \"cake_flavor\"xsd:string) would mean that :ExField is the field with header \"cake_flavor\".

Note that this field name is merely the string, and isn't semantic. For the actual meaning, see olive:fieldType."""^^xsd:string ;
        olive:exampleTriple ":ExField olive:fieldName \"cake_flavor\"xsd:string"^^xsd:string ;
.

olive:fieldType a owl:AnnotationProperty ;
	rdfs:label "field type"^^xsd:string ;
        skos:prefLabel "has cells containing instances of"^^xsd:string ;
        rdfs:domain olive:Field-Data ;
        rdfs:range owl:Class ;
	rdfs:comment """(:_Field_1 olive:fieldType :_Class_1) means that every non-null cell (see olive:Cell-Data) in Field1 represents an instance of Class1. For example, (:FieldA olive:fieldType olive:Person) indicates that only persons are legitinmate values of cells in FieldA, such as :BenjaminFranklin or :ArnoldPalmer.

Note that this is currently an annotation property. This means that it will serve for queries or documentaiton, but it will not enforce any typing via inference."""^^xsd:string ;
        olive:exampleTriple ":FieldA olive:fieldType olive:Person"^^xsd:string ;
.

olive:firstAuthor a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:authorOf ;
	rdfs:label "first author"^^xsd:string ;
        skos:prefLabel "is the first author of"^^xsd:string ;
        rdfs:domain olive:Agent ;
        rdfs:range olive:Content ;
	rdfs:comment """This is a subproperty of olive:authorOf, indicating first authorship."""^^xsd:string ;
.

olive:follows a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:temporallyRelatedTo ;
	rdfs:label "follows"^^xsd:string ;
   skos:prefLabel "follows"^^xsd:string ;
   rdfs:domain owl:Thing ;
   rdfs:range owl:Thing ;
   owl:inverseOf olive:precedes ;
   olive:exampleTriple ":MyCelebration olive:follows :MarinersClinchingALWestIn2001"^^xsd:string ;
.

olive:formerName a owl:AnnotationProperty ;
	rdfs:label "former name"^^xsd:string ;
        skos:prefLabel "was formerly called"^^xsd:string ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Resource1 olive:formerName \"OLDNAME\"^^xsd:string) means that the term Resource1 used to be called \"OLDNAME\" . For example, if I rename gist:actual to gist:timeOf, I would rename it and add the triple (gist:actual olive:formerName \"gist:timeOf\"^^xsd:string).

This is an optional documentation predicate, but it may be useful for those familiar with the old term. Just as important is to include former names as skos:altLabels if they are appropriate lexifications for the term in question. This will aid in search as well."""^^xsd:string ;
       olive:exampleTriple "gist:actual olive:formerName \"gist:timeOf\"^^xsd:string"^^xsd:string ;
.

olive:foundAtCharacter a owl:DatatypeProperty ;
	rdfs:label "found at character"^^xsd:string ;
        skos:prefLabel "is found at character"^^xsd:string ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:nonNegativeInteger ;
	rdfs:comment """(:Thing1 olive:foundAtCharacter \"INT\"^^xsd:nonNegativeInteger) means that Thing1 can be found at INT character in the text string in which it is located. For example, (:WikipediaCitation olive:foundAtCharacter \"17\"^^xsd:nonNegativeInteger) means that a given Wikipedia citation occurs (at least) on character 17 in some text. Obviously, more information is called for here: which text? For that, you should refer to the text that our :WikipediaCitation is directly a part of (see olive:directPartOf)."""^^xsd:string ;
        olive:exampleSubproperty olive:foundAtStartingCharacter, olive:foundAtEndingCharacter ;
        olive:exampleTriple ":WikipediaCitation olive:foundAtCharacter \"17\"^^xsd:nonNegativeInteger"^^xsd:string ;
.

olive:foundAtEndingCharacter a owl:DatatypeProperty ;
        rdfs:subPropertyOf olive:foundAtCharacter ;
	rdfs:label "found at character"^^xsd:string ;
        skos:prefLabel "is found at ending character"^^xsd:string ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:nonNegativeInteger ;
	rdfs:comment """(:Thing1 olive:foundAtEndingCharacter \"INT\"^^xsd:nonNegativeInteger) means that Thing1 ends at INT character in the text string in which it is located. For example, (:WikipediaCitation olive:foundAtEndingCharacter \"21\"^^xsd:nonNegativeInteger) means that a given Wikipedia citation ends on character 21 in some text. Obviously, more information is called for here: which text? For that, you should refer to the text that our :WikipediaCitation is directly a part of (see olive:directPartOf)."""^^xsd:string ;
        olive:exampleTriple ":WikipediaCitation olive:foundAtEndingCharacter \"21\"^^xsd:nonNegativeInteger"^^xsd:string ;
.

olive:foundAtStartingCharacter a owl:DatatypeProperty ;
        rdfs:subPropertyOf olive:foundAtCharacter ;
	rdfs:label "found at starting character"^^xsd:string ;
        skos:prefLabel "is found at character"^^xsd:string ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:nonNegativeInteger ;
	rdfs:comment """(:Thing1 olive:foundAtStartingCharacter \"INT\"^^xsd:nonNegativeInteger) means that Thing1 can be found starting at INT character in the text string in which it is located. For example, (:WikipediaCitation olive:foundAtStartingCharacter \"17\"^^xsd:nonNegativeInteger) means that a given Wikipedia citation starts on character 17 in some text. Obviously, more information is called for here: which text? For that, you should refer to the text that our :WikipediaCitation is directly a part of (see olive:directPartOf)."""^^xsd:string ;
        olive:exampleTriple ":WikipediaCitation olive:foundAtStartingCharacter \"17\"^^xsd:nonNegativeInteger"^^xsd:string ;
.

olive:foundOnPage a owl:DatatypeProperty ;
	rdfs:label "found on page"^^xsd:string ;
        skos:prefLabel "is found on page"^^xsd:string ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:nonNegativeInteger ;
	rdfs:comment """(:Thing1 olive:foundOnPage \"INT\"^^xsd:nonNegativeInteger) means that Thing1 can be found on the INT page in the content in which it is located. For example, (:Chapter3 olive:foundOnPage \"17\"^^xsd:nonNegativeInteger) means that chapter 3 occurs (at least) on page 17 of some text. Obviously, more information is called for here: which text? For that, you should refer to the text that our :Chapter3 is directly a part of (see olive:directPartOf)."""^^xsd:string ;
        olive:exampleSubproperty olive:foundAtStartingCharacter, olive:foundAtEndingCharacter ;
        olive:exampleTriple ":Chapter3 olive:foundOnPage \"17\"^^xsd:nonNegativeInteger"^^xsd:string ;
.

olive:foundEndingOnPage a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:foundOnPage ;
	rdfs:label "found ending on page"^^xsd:string ;
        skos:prefLabel "ends on page"^^xsd:string ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:nonNegativeInteger ;
	rdfs:comment """(:Thing1 olive:foundEndingOnPage \"INT\"^^xsd:nonNegativeInteger) means that Thing1 can be found ending on the INT page in the content in which it is located. For example, (:Chapter3 olive:foundEndingOnPage \"25\"^^xsd:nonNegativeInteger) means that chapter 3 ends on page 25 of some text. Obviously, more information is called for here: which text? For that, you should refer to the text that our :Chapter3 is directly a part of (see olive:directPartOf)."""^^xsd:string ;
        olive:exampleSubproperty olive:foundAtStartingCharacter, olive:foundAtEndingCharacter ;
        olive:exampleTriple ":Chapter3 olive:foundEndingOnPage \"25\"^^xsd:nonNegativeInteger"^^xsd:string ;
.

olive:foundStartingOnPage a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:foundOnPage ;
	rdfs:label "found starting on page"^^xsd:string ;
        skos:prefLabel "starts on page"^^xsd:string ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:nonNegativeInteger ;
	rdfs:comment """(:Thing1 olive:foundStartingOnPage \"INT\"^^xsd:nonNegativeInteger) means that Thing1 can be found starting on the INT page in the content in which it is located. For example, (:Chapter3 olive:foundStartingOnPage \"17\"^^xsd:nonNegativeInteger) means that chapter 3 starts on page 17 of some text. Obviously, more information is called for here: which text? For that, you should refer to the text that our :Chapter3 is directly a part of (see olive:directPartOf)."""^^xsd:string ;
        olive:exampleSubproperty olive:foundAtStartingCharacter, olive:foundAtEndingCharacter ;
        olive:exampleTriple ":Chapter3 olive:foundStartingOnPage \"17\"^^xsd:nonNegativeInteger"^^xsd:string ;
.

olive:fromAddress
	a owl:ObjectProperty ;
	rdfs:label "from address"^^xsd:string ;
	skos:prefLabel "is from"@en ;
	rdfs:subPropertyOf olive:fromPlace ;
	rdfs:comment "The address source of some item or content."^^xsd:string ;
	rdfs:range olive:Address ;
	olive:formerName "gist:fromAddress"^^xsd:string;
.

olive:fromAgent
	a owl:ObjectProperty ;
	rdfs:label "from agent"^^xsd:string ;
	skos:prefLabel "is from"@en ;
	rdfs:subPropertyOf olive:isFrom ;
	rdfs:comment "The agential source of something. This can "^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range olive:Agent ;
	olive:formerName "gist:fromAgent"^^xsd:string;
.

olive:fromPlace
	a owl:ObjectProperty ;
	rdfs:label "from place"^^xsd:string ;
	skos:prefLabel "is from"@en ;
	rdfs:subPropertyOf olive:isFrom ;
	rdfs:comment "origin"^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range olive:Place ;
	olive:formerName "gist:fromPlace"^^xsd:string;
.

olive:functionArguments a rdf:Property ;
        rdfs:label "function arguments" ;
        skos:prefLabel "function arguments" ;
        rdfs:domain olive:FunctionCall ;
        rdfs:range rdf:List ;
        rdfs:comment """Asserts a list of values describing arguments provided for a specific function call. These values may be either literals or resources referring to object descriptions. Note that we should be able to query for the ith argument using `?fnCall olive:functionArguments/rdf:rest{i}/rdf:first ?ith-arg.`"""^^xsd:string ;
        olive:exampleTriple ":MyFunctionCall olive:functionArguments ('arg1' 'arg2' ...)"^^xsd:string ;
        .

olive:functionImplies a owl:AnnotationProperty ;
	rdfs:label "function implies"^^xsd:string ;
        skos:prefLabel "holds between input and output akin to"@en ;
        rdfs:domain olive:Function ;
        rdfs:range owl:Property ;
	rdfs:comment """(:Function1 olive:functionImplies :Property1) means that Function1(input) = output iff (:input :Property1 :output) holds. For example, (:SSNLookupFn olive:functionImplies olive:ssn) is true because whenever you get 123-45-6789 as an output of John Doe in our SSN Lookup Function, it will also be true that (:JohnDoe olive:ssn \"123-45-6789\"^^xsd:string).

Note that this assertion maps the input variable from the function to the subject of the resulting assertion, and the output variable to the object. If the order is reversed, you can use [owl:inverseOf :PROPERTYHERE]."""^^xsd:string ;
        olive:exampleTriple ":SSNLookupFn olive:functionImplies olive:ssn"^^xsd:string ;
.

olive:genderExpression a owl:ObjectProperty ;
	rdfs:label "gender expression"^^xsd:string ;
        skos:prefLabel "expresses"@en ;
	rdfs:subPropertyOf olive:categorizedBy ;
        rdfs:domain olive:LivingThing ;
        rdfs:range olive:GenderExpression-Category ;
	rdfs:comment """(:LivingThing1 olive:genderExpression :GenderExpression-Category1) means that LivingThing1 expresses GenderExpression-Category1. For example, (:ClintEastwood olive:genderExpression olive:Masculine). Compare this property with olive:identifiesAs and olive:assignedSex. Note that while male sex, male gender, and masculinity are often instantiated in the same individual, they need not be; sex, gender, and gender expression are distinct."""^^xsd:string ;
        olive:exampleTriple ":ClintEastwood olive:genderExpression olive:Masculine"^^xsd:string ;
.

olive:genderOrSexText a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:tag ;
	rdfs:label "gender or sex text"^^xsd:string ;
    skos:prefLabel "is associated with the following text indicating gender or sex:"^^xsd:string ;
    rdfs:domain olive:LivingThing ;
    rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:genderOrSexText \"STRING\"^^xsd:string) means that STRING is a code indicating the gender or sex of LivingThing1. For example, (:ClintEastwood olive:genderOrSexText \"M\"^^xsd:string) means that the string \"M\" can be interpreted as indicating the gender or sex associated with Clint Eastwood. Context will determine the correct way of interpreting the code, and it may be appropriate to use a more specific property such as olive:genderText or olive:sexText."""^^xsd:string ;
    olive:exampleTriple ":ClintEastwood olive:genderOrSexText \"M\"^^xsd:string"^^xsd:string ;
.

olive:genderText a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:genderOrSexText ;
	rdfs:label "gender text"^^xsd:string ;
    skos:prefLabel "is associated with the following text indicating gender:"^^xsd:string ;
    rdfs:domain olive:LivingThing ;
    rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:genderText \"STRING\"^^xsd:string) means that STRING is a code indicating the gender of LivingThing1. For example, (:ClintEastwood olive:genderText \"M\"^^xsd:string) means that the string \"M\" can be interpreted as indicating the gender associated with Clint Eastwood. Context will determine the correct way of interpreting the code and may allow for the deduction of a new olive:identifiesAs or olive:genderExpression triple."""^^xsd:string ;
    olive:exampleTriple ":ClintEastwood olive:genderText \"M\"^^xsd:string"^^xsd:string ;
.

olive:governmentFor a owl:ObjectProperty, owl:FunctionalProperty ;
	rdfs:subPropertyOf olive:governs ;
	rdfs:label "government for"@en ;
        skos:prefLabel "governs"@en ;
        rdfs:domain olive:GovernmentOrganization ;
        rdfs:range olive:Place ;
	rdfs:comment """(:Government1 olive:governmentFor :Place1) means that the government for Place1 is Government1. For example, (:ArkansasGovt olive:governmentFor :Arkansas).

This property is functional. While many regions are governed by multiple entities, we assume that no two governments have identical boundaries. So, the fact that the US government and the Arkansas state government both have authority in is not a problem. In other words, it is false to say that (:USGovt olive:governmentFor :PineBluffAR), but (:USGovt olive:governs :PineBluffAR). The only thing that would stand in the olive:governmentFor relation to Pine Bluff would be the, say, the city government."""^^xsd:string ;
        olive:exampleTriple ":ArkansasGovt olive:governmentFor :Arkansas"^^xsd:string ;
.

olive:governs
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:controls ;
	rdfs:label "governs"^^xsd:string ;
	skos:prefLabel "governs"@en ;
	rdfs:comment "The subject controls or inhibits the object in some way"^^xsd:string ;
	rdfs:domain [
		a owl:Class ;
		owl:unionOf (
			olive:Intention
			olive:Agent
			olive:Template
		) ;
	] ;
	rdfs:range owl:Thing ;
	olive:formerName "gist:governs"^^xsd:string;
.

olive:governsBehavior a owl:ObjectProperty ;
	rdfs:label "governs behavior"^^xsd:string ;
        skos:prefLabel "normatively constrains"@en ;
		skos:altLabel "governs"@en ;
	rdfs:subPropertyOf olive:regulates ;
        rdfs:domain [owl:unionOf (olive:Commitment olive:Intention)] ;
        rdfs:range olive:Situation ;
	rdfs:comment """(:CommitmentOrIntention1 olive:governsBehavior :Situation1) means that CommitmentOrIntention1 is salient for determining whether or how Situation1 should occur. This is a general property that allows for the representation of either logical or normative constraints embodied in an intention or commitment and their application to specific actions. For example, (:Rule17A olive:governsBehavior :MyPetitioningTheCourt) indicates that I should pay attention to Rule 17A as a petition the court, as it normatively constrains my behavior.

Again, this property is general. Usually one should prefer to be more precise about *what* the nature of the governance is. We don't want to just know that, say, a rule is relevant to a behavior, but rather whether the rule forbids, permits, or requires the behavior.

Note that the range is olive:Situation: this property can apply both to events (including, and especially, actions) and \"states\" of the world (including, and especially, relationships). Thus, an instance of olive:Account (which is a kind of contractual business agreement) might stand in olive:governsBehavior to each of the following: :MyRelationshipWithBankOfAmerica (i.e. the instance of olive:BusinessRelationship established by this instance of olive:Account), and :MyTerminatingMyBusinessWithBankOfAmerica (i.e. an instance of olive:Event that is normatively governed by the terms of my account with Bank of America)."""^^xsd:string ;
        olive:exampleSubproperty olive:requires, gist:permits ;
        olive:exampleTriple ":Rule17A olive:governsBehavior :MyPetitioningTheCourt"^^xsd:string ;
.

olive:graphConfidence a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:quantitativeStrength ;
	rdfs:label "graph confidence"^^xsd:string ;
        skos:prefLabel "has a confidence of"@en ;
	rdfs:domain olive:KnowledgeGraph ;
        rdfs:range xsd:decimal ;
	rdfs:comment """(:KnowledgeGraph1 olive:graphConfidence \"DECIMAL\"xsd:decimal) means that KnowledgeGraph1 has a confidence of DECIMAL, which is to say that a randomly selected assertion from the graph has a probability of DECIMAL of being true. For example, (:NamedGraph1 olive:graphConfidence \".6\"^^xsd:decimal) means that there is a 60% chance that any given claim in that graph is true. Obviously in practice this is going to be hard to pin down--if we ever knew the exact value we'd probably just be able to fix th assertions to make it a confidence of 1. So, we will use these assertions as heuristics to inform when it is appropriate to use a given graph."""^^xsd:string ;
        olive:exampleTriple ":NamedGraph1 olive:graphConfidence \".6\"^^xsd:decimal"^^xsd:string ;
.

olive:graphClassCount a owl:DatatypeProperty ;
	rdfs:label "graph class count"^^xsd:string ;
        skos:prefLabel "has a class count of"@en ;
	rdfs:domain olive:KnowledgeGraph ;
        rdfs:range xsd:integer ;
	rdfs:comment """(:KnowledgeGraph1 :graphClassCount \"INTEGER\"xsd:integer) means that KnowledgeGraph1 has a class count of INTEGER. For example, (:HCPCSGraph :graphClassCount \"1800\"^^xsd:integer) would mean that the HCPCS graph contains 1800 distinct classes."""^^xsd:string ;
        olive:exampleTriple ":HCPCSGraph :graphClassCount \"1800\"^^xsd:integer"^^xsd:string ;
.

olive:grossCost a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasMonetaryValue ;
	rdfs:label "gross cost"^^xsd:string ;
        skos:prefLabel "has a gross cost of"@en ;
	rdfs:comment """(:Thing1 olive:grossCost :Monetary1) means that the gross cost of Thing1 is Monetary1. This amount is typically contrasted with the adjusted cost (e.g. after applying coupons, or a contractor adjustment). For example, (:MyDentalProcedure olive:grossCost [a olive:Monetary; olive:decimalValue \"2000\"^^xsd:decimal ; olive:hasUoM olive:_USDollar]).

Compare with olive:adjustedCost."""^^xsd:string ;
        olive:exampleTriple ":MyDentalProcedure olive:grossCost [a olive:Monetary; olive:decimalValue \"2000\"^^xsd:decimal ; olive:hasUoM olive:_USDollar]"^^xsd:string ;
.

olive:grounds a owl:ObjectProperty ;
	rdfs:label "grounds"^^xsd:string ;
        skos:prefLabel "grounds"@en ;
	rdfs:subPropertyOf olive:causes-general ;
        rdfs:domain owl:Thing ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:Thing1 olive:grounds :Thing1) means that Thing1 grounds Thing1. For example, (:TheFifthAmendment olive:grounds :SupremeCourtDecision12) might mean that the Supreme Court's decision is grounded by, or depends on, the Fifth Amendment.."""^^xsd:string ;
        olive:exampleTriple ":TheFifthAmendment olive:grounds :SupremeCourtDecision12"^^xsd:string ;
.

olive:hasAltitude
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasMagnitude ;
	rdfs:label "has altitude"^^xsd:string ;
	skos:prefLabel "has an altitude of"@en ;
	rdfs:comment "Distance above sea level"^^xsd:string ;
	rdfs:domain olive:Place ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range olive:Distance ;
	olive:formerName "gist:hasAltitude"^^xsd:string;
.

olive:hasAmount a owl:ObjectProperty ;
	rdfs:label "has amount"^^xsd:string ;
        skos:prefLabel "can be quantified/qualified by"@en ;
        rdfs:domain owl:Thing ;
        rdfs:range [a owl:Class;
		    owl:unionOf (olive:Magnitude olive:QualitativeAssessment) ;];
	rdfs:comment """(:Thing1 olive:hasAmount :Amount1) means that Thing1 can be quantified or qualified by Amount1. For example,(:PileOfLeaves olive:hasAmount :LargeAmount) might be used to indicate a quality of largeness of the pile. Or, we could use a more specific olive:hasMagnitude relationship to quantify the amount leaves (e.g. linking it to cubic meters or some such).

See the subproperties to make either a qualitative or quantitative connection."""^^xsd:string ;
        olive:exampleSubproperty olive:hasMagnitude, olive:qualitativeStrength ;
        olive:exampleTriple ":PileOfLeaves olive:hasAmount :LargeAmount"^^xsd:string ;
.

olive:hasBalance a owl:ObjectProperty ;
	rdfs:label "has balance"^^xsd:string ;
        skos:prefLabel "has a remaining balance of"@en ;
	rdfs:subPropertyOf olive:hasMonetaryValue ;
        rdfs:domain owl:Thing ;
        rdfs:range olive:Monetary ;
	rdfs:comment """(:Thing1 olive:hasBalance :Monetary1) means that Thing1 has a remaining balance of Monetary1. For example, (:MyTractor olive:hasBalance [olive:decimalValue \"2600\"^^xsd:decimal ; olive:hasUoM olive:_USDollar]) means that I still owe $2600 on my tractor. This might be because it cost that much originally, or perhaps I have already paid down the balance somewhat."""^^xsd:string ;
        olive:exampleTriple ":MyTractor olive:hasBalance [olive:decimalValue \"2600\"^^xsd:decimal ; olive:hasUoM olive:_USDollar]"^^xsd:string ;
.

olive:hasBaseUnit
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasStandardUnit ;
	rdfs:label "has base unit"^^xsd:string ;
	skos:prefLabel "can be converted to the base unit"@en ;
	rdfs:comment
		"EXAMPLE: saying that a furlong hasBaseUnit  meter says it is a DistanceUnit."^^xsd:string ,
		"Relates a UnitOfMeasure to its BaseUnit.  This indicates what kind Unit something is, e.g. saying that a furlong hasBaseUnit  meter says it is a DistanceUnit."^^xsd:string
		;
	rdfs:domain olive:UnitOfMeasure ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range olive:BaseUnit ;
	olive:formerName "gist:hasBaseUnit"^^xsd:string;
.

olive:hasBillingAddress a owl:ObjectProperty ;
	rdfs:label "has billing address"^^xsd:string ;
        skos:prefLabel "handles financial communications at"@en ;
	rdfs:subPropertyOf olive:hasCommunicationAddress ;
        rdfs:domain olive:Agent ;
        rdfs:range olive:Address ;
	rdfs:comment """(:Agent1 :hasBillingAddress :Address1) means that Agent1 can be billed at Address1. For example, (:NewOrleansHospital :hasBillingAddress :Address32) means that Address32 is the address for New Orleans Hospital."""^^xsd:string ;
        olive:exampleTriple ":NewOrleansHospital :hasBillingAddress :Address32"^^xsd:string ;
.

olive:hasCertification a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:personalInformation ;
	rdfs:label "has certification"^^xsd:string ;
	skos:prefLabel "has the following certification:"@en ;
	rdfs:domain owl:Thing ;
	rdfs:range olive:Certification ;
	rdfs:comment """(:Individual1 olive:hasCertification :Certification1) means that Individual1 has the certification Certification1. For example, (:Nick olive:hasCertification :DoctorOfPhilosophy) means that Nick has a Ph.D. degree."""^^xsd:string ;
	olive:exampleTriple ":Nick olive:hasCertification :DoctorOfPhilosophy"^^xsd:string ;
.

olive:hasCommunicationAddress
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:controls, olive:personalInformation ;
	rdfs:label "has communication address"^^xsd:string ;
	skos:prefLabel "can be reached at"@en ;
	rdfs:comment """(:Agent1 olive:hasCommunicationAddress :Address1) means that one can communicate with Agent1 at/via Address1. It might be their residence, a location for a PO Box, an email address, etc."""^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range olive:Address ;
	olive:exampleTriple ":Agent1 olive:hasCommunicationAddress :Address1"^^xsd:string ;
	olive:formerName "gist:hasCommunicationAddress"^^xsd:string;
.

olive:hasCondition a owl:ObjectProperty ;
	rdfs:label "has condition"^^xsd:string ;
        skos:prefLabel "has"@en ;
	rdfs:subPropertyOf olive:affectedBy ;
        rdfs:domain olive:LivingThing ;
        rdfs:range olive:HealthCondition ;
	rdfs:comment """(:LivingThing1 olive:hasCondition :HealthCondition1) means that LivingThing1 has HealthCondition1. For example, (:Jeremy olive:hasCondition [a olive:Injury]) means that Jeremy is injured."""^^xsd:string ;
        olive:exampleTriple ":Jeremy olive:hasCondition [a olive:Injury]"^^xsd:string ;
.

olive:hasContractWith a owl:ObjectProperty ;
	a owl:SymmetricProperty ;
	rdfs:subPropertyOf olive:connectedTo ;
	rdfs:label "has contract with"^^xsd:string ;
        skos:prefLabel "has a contract with"@en ;
	skos:altLabel "uses"@en ;
        rdfs:domain olive:Agent ;
        rdfs:range olive:Agent ;
	rdfs:comment """(:Agent1 olive:hasContractWith :Agent2) means that Agent1 and Agent2 are part of some contract."""^^xsd:string ;
.

olive:hasCPTCode a owl:ObjectProperty ;
	rdfs:label "has cpt Code"^^xsd:string ;
        skos:prefLabel "is classified by"@en ;
	rdfs:subPropertyOf olive:categorizedBy ;
        rdfs:domain olive:Event ;
        rdfs:range olive:CPTCode ;
	rdfs:comment """(:Event1 olive:hasCPTCode :CPTCode1) means that Event1 is classified by CPTCode1. For example, (:AnniesProcedure olive:hasCPTCode :CPT73600) would mean that Annie's procedure was of the sort indicated by CPT 73600 (that is, an Xray of the ankle)."""^^xsd:string ;
        olive:exampleTriple ":AnniesProcedure olive:hasCPTCode :CPT73600"^^xsd:string ;
.

olive:hasDiameter a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasMagnitude ;
	rdfs:label "has diameter" ;
	skos:prefLabel "has a diameter of"@en ;
	rdfs:domain owl:Thing ;
	rdfs:range olive:Distance ;
	rdfs:comment """(:Thing1 olive:hasDiameter :Distance1) means that Thing1 has a diameter of Distance1. For example, (TheGlassOnMyDesk olive:hasDiameter [a olive:Distance ; olive:hasUoM ex:_inch ; olive:decimalValue \"2\"^^xsd:double]) means that the glass on my desk has a diameter of 2 inches.""" ;
	olive:exampleTriple ":TheGlassOnMyDesk olive:hasDiameter [a olive:Distance ; olive:hasUoM ex:_inch ; olive:decimalValue \"2\"^^xsd:double]" ;
.

olive:hasElement a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasMember ;
	rdfs:label "has element"^^xsd:string ;
        skos:prefLabel "contains"^^xsd:string ;
        rdfs:domain olive:OrderedCollection ;
        rdfs:range owl:Thing ;
	rdfs:comment """Relates a given ordered collection, often a list, to its elements. You should rarely use this property, instead using the more specific 'nth element' subproperties, such as olive:element_1 for the first element in a list."""^^xsd:string ;
        olive:exampleSubproperty olive:element_1, olive:element_2 ;
.

olive:hasEmailAddress a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasCommunicationAddress ;
	rdfs:label "has email address"^^xsd:string ;
        skos:prefLabel "can be contacted via email at"^^xsd:string ;
        rdfs:domain olive:Agent ;
        rdfs:range olive:EmailAddress ;
	rdfs:comment """(:Agent1 olive:hasEmailAddress :EmailAddress1) means that EmailAddress1 is (one of) Agent1's email address(es). For example, (:Sean_Lane olive:hasEmailAddress :SeansGmail) means that the thing denoted by :SeansGmail is an email address for Sean Lane. 

This property is neither functional nor inversely functional. A person may have multiple email addresses, and a given address may be owned by several persons. If the need arises to have an inversely functional version, one can be created (and this comment updated accordingly).

Note that the email address is not just the string. See the comment on olive:EmailAddress for more details."""^^xsd:string ;
        olive:exampleTriple ":Sean_Lane olive:hasEmailAddress :SeansGmail"^^xsd:string ;
.

olive:hasGoal
	a owl:ObjectProperty ;
	rdfs:label "has goal"^^xsd:string ;
	skos:prefLabel "has goal"@en ;
	rdfs:subPropertyOf [owl:inverseOf olive:governs] ;
	skos:prefLabel "has a goal to"@en ;
	rdfs:comment "(:Thing1 olive:hasGoal :Goal1) means that Thing1 has Goal1 as an evaluatable standard for whether they have met this success. Unlike a requirement (see olive:Requirement), goals are optional. "^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:hasGoal"^^xsd:string;
.

olive:hasInputVariable a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasVariable ;
	rdfs:label "has input variable"^^xsd:string ;
        skos:prefLabel "has the input variable"@en ;
        rdfs:domain olive:Function ;
        rdfs:range olive:Input ;
	rdfs:comment """This is the subproperty fo olive:hasVariable for input variables, specifically."""^^xsd:string ;
.

olive:hasInsurancePolicy a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:owns , [owl:inverseOf olive:coversAgent] ;
	rdfs:label "has insurance policy"^^xsd:string ;
        skos:prefLabel "is the policyholder of"^^xsd:string ;
        rdfs:domain olive:Person ;
        rdfs:range olive:InsurancePolicy ;
	rdfs:comment """(:_Person_1 olive:hasInsurancePolicy :_InsurancePolicy_1) means that Person1 is the policyholder of InsurancePolicy1. For example, (:Bill olive:hasInsurancePolicy :Pol1234) would mean that Bill is the policyholder of Pol1234, responsible for paying the premium, and receiving the benefits described in the agreement. Note that being the policy holder is different from being covered by the policy, though usually the policy holder is covered. In many cases, the policyholder's dependents will also receive coverage.

This property is a subproperty of the inverse of olive:coversAgent. See olive:InsuranceClaim and olive:InsurancePolicy for important related vocabulary."""^^xsd:string ;
        olive:exampleTriple ":Bill olive:hasInsurancePolicy :Pol1234"^^xsd:string .

olive:hasLength a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasMagnitude ;
	rdfs:label "has length" ;
	skos:prefLabel "has a length of"@en ;
	rdfs:domain owl:Thing ;
	rdfs:range olive:Distance ;
	rdfs:comment """(:Thing1 olive:hasLength :Distance1) means that Thing1 has a length of Distance1. For example, (MyIndexFinger olive:hasLength [a olive:Distance ; olive:hasUoM ex:_inch ; olive:decimalValue \"3\"^^xsd:double]) means that my index finger has a length of of 3 inches.""" ;
	olive:exampleTriple ":MyIndexFinger olive:hasLength [a olive:Distance ; olive:hasUoM ex:_inch ; olive:decimalValue \"3\"^^xsd:double]" ;
.

olive:hasMagnitude
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasAmount ;
	rdfs:label "has magnitude"^^xsd:string ;
	skos:prefLabel "has the quantitative feature"@en ;
	rdfs:comment "Relates a thing to some measurable quantity. See olive:Magnitude. This comment should be updated."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range olive:Magnitude ;
	olive:formerName "gist:hasMagnitude"^^xsd:string;
.

olive:hasMember	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasPart ;
	rdfs:label "has member"^^xsd:string ;
	skos:prefLabel "includes"@en ;
	skos:altLabel "contains"@en ;
	rdfs:comment "Relates a list (see rdf:List) or collection (see olive:Collection) to its elements."^^xsd:string ;
	rdfs:domain olive:Collection ;
	rdfs:range owl:Thing ;
	owl:inverseOf olive:memberOf ;
	olive:formerName "gist:hasMember"^^xsd:string;
	.

olive:hasMonetaryValue a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasMagnitude ;
	olive:typedSubPropertyOf olive:situationHasAssociatedMonetaryValue ;
	rdfs:label ""^^xsd:string ;
        skos:prefLabel ""^^xsd:string ;
        rdfs:domain owl:Thing ;
        rdfs:range olive:Monetary ;
	rdfs:comment """(:Thing1 olive:hasMonetaryValue :Monetary1) means that the value of Thing1 is given by Monetary1. For example, (:CaseysMechanicalKeyboard olive:hasMonetaryValue [a olive:Monetary; olive:hasUoM olive:_USDollar; olive:decimalValue \"75\"^^xsd:decimal]) means that my mechanical keyboard is worth $75.

You almost always want to use a more specific property, such as olive:costOf and its subproperties."""^^xsd:string ;
        olive:exampleTriple ":CaseysMechanicalKeyboard olive:hasMonetaryValue [a olive:Monetary; olive:hasUoM olive:_USDollar; olive:decimalValue \"75\"^^xsd:decimal]"^^xsd:string ;
.

olive:hasNPI a owl:ObjectProperty, owl:FunctionalProperty, owl:InverseFunctionalProperty ;
	rdfs:subPropertyOf olive:identifiedBy ;
	rdfs:label "has npi"^^xsd:string ;
    	skos:prefLabel "has the following npi:"@en ;
    	rdfs:domain olive:MedicalCareProvider;
    	rdfs:range olive:NationalProviderIdentifier ;
	rdfs:comment """This links a covered medical care provider or NPI with their National Provider Identifier Standard ID. For example, (:DrRice olive:hasNPI :DrRicesNPI)."""^^xsd:string ;
    	olive:exampleTriple ":DrRice olive:hasNPI :DrRicesNPI"^^xsd:string ;
.

olive:hasOutputVariable a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasVariable ;
	rdfs:label "has output variable"^^xsd:string ;
        skos:prefLabel "has the output variable"@en ;
        rdfs:domain olive:Function ;
        rdfs:range olive:Output ;
	rdfs:comment """This is the subproperty fo olive:hasVariable for output variables, specifically."""^^xsd:string ;
.

olive:hasPart a owl:ObjectProperty , owl:TransitiveProperty ;
	rdfs:label "has part"^^xsd:string ;
	skos:prefLabel "includes"@en ;
	rdfs:comment "The inverse of olive:partOf"^^xsd:string ;
	owl:inverseOf olive:partOf ;
	olive:formerName "gist:hasPart"^^xsd:string;
.

olive:hasParty a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:involvesAgent ;
	rdfs:label "has party"^^xsd:string ;
	skos:prefLabel "involves"@en ;
	skos:altLabel "has as a focal party"@en, "involves as a focal party"@en ;
	rdfs:comment "(:Relationship1 olive:hasParty :Agent1) means that Agent1 is involved in Relationship1 as a focal party to it. Thus, (:NicksBusinessRelationshipWithBankOfAmerica olive:hasParty :Nick) and (:NicksBusinessRelationshipWithBankOfAmerica olive:hasParty :BankOfAmerica) would be used to specify that both Nick and Bank of America are parties to Nick's business relationship with Bank of America."^^xsd:string ;
	rdfs:domain olive:Relationship ;
	rdfs:range olive:Agent ;
.

olive:hasPhoneNumber a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasCommunicationAddress ;
	rdfs:label "has phone number"^^xsd:string ;
        skos:prefLabel "can be contacted at"@en ;
        rdfs:domain olive:Agent ;
        rdfs:range olive:TelephoneNumber ;
	rdfs:comment """(:Agent1 olive:hasPhoneNumber :PhoneNumber1) means that Agent1 can be contacted via PhoneNumber1. For example, (:Bill olive:hasPhoneNumber [a olive:TelephoneNumber ; olive:uniqueText \"122345260982\"^^xsd:string])

Note that you can move directly from an agent to their phone number string using olive:phoneNumber."""^^xsd:string ;
        olive:exampleTriple "(:Bill olive:hasPhoneNumber [a olive:TelephoneNumber ; olive:uniqueText \"122345260982\"^^xsd:string])"^^xsd:string ;
.

olive:hasPracticeAddress a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:operatesIn, olive:hasCommunicationAddress ;
	rdfs:label "has practice address"^^xsd:string ;
    skos:prefLabel "has a practice located at"@en ;
    rdfs:domain olive:MedicalCareProvider ;
    rdfs:range olive:Address ;
	rdfs:comment """(:MedicalCareProvider1 olive:hasPracticeAddress :Address1) means that :MedicalCareProvider1 has a practice located at :Address1. For example (:JohnDoe olive:hasPracticeAddress :Address632) means that John Doe has a medical practice at Address632."""^^xsd:string ;
    olive:exampleTriple ":JohnDoe olive:hasPracticeAddress :Address632"^^xsd:string ;
.

olive:hasPrecision a owl:DatatypeProperty ;
	rdfs:label "has precision"^^xsd:string ;
	skos:prefLabel "is precise to"@en ;
	rdfs:comment """(:Magnitude1 olive:hasPrecision \"NUM\"^^xsd:double) means that Magnitude1 is precise to the nearest NUM. For example, if we suppose (:MyHeight olive:hasUoM :_inch) and (:MyHeight olive:decimalValue \"74\"^^xsd:decimal), then (:MyHeight olive:hasPrecision \"1e-1\"^^xsd:double) means that my height is precise to the nearest tenth of an inch. This can also be applied to instances of olive:TimeInstant to show how precisely some time instant is being presented.
	olive:formerName "gist:hasPrecision"^^xsd:string;

Note that this is a slight departure from the Semantic Arts use of olive:hasPrecision. They used a range of olive:Magnitude. However, the datatype property will be easier, since you can be as precise and it does not require the reification of new magnitudes for things like :tenth_of_an_inch to express the example above.

Presently (12/11/20) the domain is for time instants and magnitudes, though a measurement might also have a precision. As measurements are not in the ontology right now, we should consider expanding the domain at later date when measurements are incorporated."""^^xsd:string ;
	rdfs:domain [a owl:Class ;
		     owl:unionOf (olive:Magnitude olive:TimeInstant)] ;
	rdfs:range xsd:double ;
	olive:exampleTriple ":MyHeight olive:hasPrecision \"1e-1\"^^xsd:double"^^xsd:string ;
.

olive:hasPreferredTerm a owl:AnnotationProperty ;
	rdfs:label "has preferred term"^^xsd:string ;
        skos:prefLabel "is dispreferred compared to"@en ;
	rdfs:domain rdfs:Resource ;
        rdfs:range rdfs:Resource ;
	rdfs:comment """(:Resource1 olive:hasPreferredTerm :Resource2) means that Resource1 is dispreferred compared to Resource2. For example, (foaf:phone olive:hasPreferredTerm olive:hasPhoneNumber)."""^^xsd:string ;
        olive:exampleTriple "foaf:phone olive:hasPreferredTerm olive:hasPhoneNumber"^^xsd:string ;
.

olive:hasPublicationDate a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:creationTime ;
	rdfs:label "publication date"^^xsd:string ;
        skos:prefLabel "was published in/at"^^xsd:string ;
        rdfs:domain olive:Content ;
        rdfs:range olive:TimeInstant ;
	rdfs:comment """(:Content1 olive:hasPublicationDate :Date) means that Content1 was published on Date1. For example, (:TheGreatGatsby olive:hasPublicationDate [a olive:TimeInstant; olive:universalDate \"1925-04-10\"^^xsd:date ;]) indicates that The Great Gatsby was published on April 10, 1925.

If one only has the year of publication, you can still use this property but further add a (:Date olive:hasUoM :_year) and (:Date olive:hasPrecision "1.0"^^xsd:double) assertion."""^^xsd:string ;
        olive:exampleTriple ":TheGreatGatsby olive:hasPublicationDate [a olive:TimeInstant; olive:universalDate \"1925-04-10\"^^xsd:date ;]"^^xsd:string ;
.

olive:hasRevisedVersion a owl:ObjectProperty ;
	rdfs:label "has revised version"^^xsd:string ;
        skos:prefLabel "is revised as"@en ;
	rdfs:subPropertyOf olive:basisFor ;
        rdfs:domain olive:Content ;
        rdfs:range olive:Content ;
	rdfs:comment """(:Content1 olive:hasRevisedVersion :Content2) means that Content1 is revised as Content2. For example, (:CaseysDissertationDraft1 olive:hasRevisedVersion :CaseysDissertationDraft2)."""^^xsd:string ;
        olive:exampleTriple ":CaseysDissertationDraft1 olive:hasRevisedVersion :CaseysDissertationDraft2"^^xsd:string ;
.

olive:hasRxNormCUI a owl:AnnotationProperty, owl:FunctionalProperty ;
	rdfs:label "has RxNorm CUI"^^xsd:string ;
        skos:prefLabel "is identified by RxNorm as"^^xsd:string ;
        rdfs:domain owl:Class ;
        rdfs:range xsd:string ;
	rdfs:comment """(:DrugClass1 olive:hasRxNormCUI \"ID\"^^xsd:string) means that RxNorm refers to DrugClass1 as ID. For example, (:Ibuprofen olive:hasRxNormCUI \"310965\"^^xsd:string).

Note that this is an annotation property, and as such will not be used in inference, though it can be used for querying."""^^xsd:string ;
        olive:exampleTriple ":Ibuprofen olive:hasRxNormCUI \"310965\"^^xsd:string"^^xsd:string ;
.

olive:hasSSN a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:personalInformation, olive:identifiedBy ;
	rdfs:label "has SSN"^^xsd:string ;
        skos:prefLabel "has a SSN of"@en ;
	skos:altLabel "has social security number"@en ; 
        rdfs:domain olive:Person ;
        rdfs:range olive:SSN ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
	rdfs:comment """(:Person1 olive:hasSSN :ID1) means that Person1 is identified by their social security number, represented as ID1. For example, (:BobSmith olive:hasSSN :BobsSSN) connects Bob to his SSN. This is similar to olive:hasEmailAddress, in that there is an intermediate thing, the ID, but you might also want to go straight to the datatype by means of another property (in this case, gist:uniqueText)."""^^xsd:string ;
        olive:exampleTriple ":BobSmith olive:hasSSN :BobsSSN"^^xsd:string ;
.

olive:hasStandardUnit
	a owl:ObjectProperty ;
	rdfs:label "has standard unit"^^xsd:string ;
	skos:prefLabel "has the standard unit"@en ;
	rdfs:comment "For a complex unit refers to a unit that has all the component parts in SI"^^xsd:string ;
	rdfs:domain olive:UnitOfMeasure ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range olive:CoherentUnit ;
	olive:formerName "gist:hasStandardUnit"^^xsd:string;
.

olive:hasStatus a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:categorizedBy ;
	rdfs:label "has status"^^xsd:string ;
        skos:prefLabel "has the following status:"@en ;
	skos:altLabel "is"@en ;
        rdfs:domain olive:Artifact ;
        rdfs:range olive:Status ;
	rdfs:comment """(:Artifact1 olive:hasStatus :Status1) means that Artifact1 has Status1. For example, (:CPA1 olive:hasStatus :Status-InProgress) indicates that CPA1 is in progress."""^^xsd:string ;
        olive:exampleTriple ":CPA1 olive:hasStatus :Status-InProgress"^^xsd:string ;
.

olive:hasSubevent a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasPart, olive:eventInvolves ;
	rdfs:label "has subevent"^^xsd:string ;
        skos:prefLabel "includes"^^xsd:string ;
        rdfs:domain olive:Situation ;
        rdfs:range olive:Situation ;
	rdfs:comment """(:_WholeEvent_1 olive:hasSubevent :_PartEvent_1) means that WholeEvent1 has PartEvent1 as a part. For example, (:MyBaseballGame olive:hasSubevent :TheSecondInningOfMyGame) means that the second inning was a part of my baseball game.

You can use this property to indicate necessary subevents for some class. It is part of Olive's event scripting vocabulary.

Note that for legacy reasons this property is called \"hasSubevent\" despite the fact that both its domain and range cover instances of olive:Situation."""^^xsd:string ;
        olive:exampleTriple ":MyBaseballGame olive:hasSubevent :TheSecondInningOfMyGame"^^xsd:string ;
.

olive:hasSubNode a owl:AnnotationProperty ;
	rdfs:label "has subnode"^^xsd:string ;
	skos:prefLabel "has as a subnode"@en ;
	rdfs:comment """(:Entity1 olive:hasSubNode :Entity2) means that Entity2 is in some sense a \"subnode\" of Entity1 in some representation. This property is designed to be extremely flexible in order to enable any number of relationships to hold between the super- and sub-nodes. It is especially useful in initial stages of semantic enrichment of data, when one may need to declare a simple super-to-subnode relationship between items without committing to what exactly the relationship between those items is. Note that there is no domain or range associated with this property because it is designed to allow anything whatsoever - named individuals, classes, literals - to stand as its arguments."""^^xsd:string ;
.

olive:hasUMLSCUI a owl:AnnotationProperty, owl:FunctionalProperty ;
	rdfs:label "has UMLS CUI"^^xsd:string ;
        skos:prefLabel "is identified by UMLS as"^^xsd:string ;
        rdfs:domain owl:Class ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Class1 olive:hasUMLSCUI \"ID\"^^xsd:string) means that UMLS refers to Class1 as ID. For example, (:Headache olive:hasUMLSCUI \"C0018681\"^^xsd:string).

Note that this is an annotation property, and as such will not be used in inference, though it can be used for querying."""^^xsd:string ;
        olive:exampleTriple ":Headache olive:hasUMLSCUI \"C0018681\"^^xsd:string"^^xsd:string ;
.

olive:hasUoM a owl:ObjectProperty, owl:FunctionalProperty ;
	rdfs:label "has unit of measure"^^xsd:string ;
	skos:prefLabel "is measured in"@en ;
	skos:altLabel "has units"@en ;
	rdfs:comment """(:_Magnitude_1 olive:hasUoM :_UnitOfMeasure_unit) means that magnitude1 is measured in unit1. For example, (:ETHeight olive:hasUoM :_meter) means that that the magnitude of the Eiffel Tower, which is denoted by the particular magnitdue :ETHeight, is measured in meters. When paired with the assertion that (:ETHeight gist:hasDecimalValue \"300\"^^xsd:string), this allows us to conclude that the Eiffel Tower is 300m tall.

This property is functional. A given magnitdue has exactly one unit. This may seem incorrect; obviously you can measure the Eiffel Tower in feet just as well as you could in meters. That's the whole point of having conversions! While that sentiment is correct, we are somewhat restricted by using triples here. It's technically not the unit for a given height that is functional, but the <decimal, unit> pair. So, while you could say the Eiffel Tower is 300m or that it is 984ft, you would be in a bind if you could assert that a given magnitude had multiple decimal values AND multiple units. There simply isn't a way using triples alone there to know which units would go with which decimals.

That said, this representation isn't all that limiting. One can still derive the measure of a magnitude in feet from the measure of a magnitude by converting to and from the base unit (see olive:BaseUnit, olive:baseConversionFactor, and olive:hasBaseUnit). If you want to express directly that the Eiffel Tower is 300m and also that it is 984ft, you could do so by creating two separate magnitudes (e.g both :ETHeightMeter and :ETHeightFt), and then you could connect this as congruent magnitudes."""^^xsd:string ;
	olive:exampleTriple ":ETHeight olive:hasUoM :_meter"^^xsd:string ;
	rdfs:domain olive:Magnitude ;
	rdfs:range olive:UnitOfMeasure ;
	olive:formerName "gist:hasUoM"^^xsd:string;
.

olive:hasVariable a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasPart ;
	rdfs:label "has variable"^^xsd:string ;
        skos:prefLabel "contains the variable"@en ;
	skos:altLabel "contains the parameter"@en ;
        rdfs:domain olive:Function ;
        rdfs:range olive:Variable ;
	rdfs:comment """(:Function1 olive:hasVariable :Variable1) means that Function1 contains Variable1. For example, if our function was f(x) = x^2, we could say that (:OurFunction olive:hasVariable :x).

Variables are best distinguished as input and output variables, see olive:Input and olive:Output, as well as the subproperties of olive:hasVariable."""^^xsd:string ;
        olive:exampleSubproperty olive:hasInputVariable, olive:hasOutputVariable;
        olive:exampleTriple ":OurFunction olive:hasVariable :x"^^xsd:string ;
.

olive:identifiedBy a owl:InverseFunctionalProperty, owl:ObjectProperty ;
	rdfs:label "identified by"^^xsd:string ;
	rdfs:subPropertyOf olive:causes-general ;
	skos:prefLabel ""@en ;
 	rdfs:comment """(:_Thing_1 olive:identifiedBy :_ID_1) means that Thing1 is identified by ID1. For example, if Bob's social security number is 123-45-6789, we'd say that (:_Person_Bob olive:identifiedBy [:uniqueText \"123-45-6789\"^^xsd:string; [owl:inverseOf olive:createsID] :_Organization_USGovernment]). Note that there may be more complete ways to do this, but you get the idea: Bob gets related to the ID, which in turn is related to the string, number, or other identifying symbols.

This is a inversely functional property, like a URI: a thing can have more than one ID, but each of the IDs must refer to a unique thing. For example, Barack Obama has many URIs, a SSN, and other identifiers. But each of those identifiers must have exactly one referent: Barack Obama. 

Note that you may want to create more specific properties here, depending on use. For example, if you are frequently using SSNs, you may wish to create ex:hasSSN, a subproperty of olive:identifiedBy, restricting the domain and range accordingly (to ex:USCitizen and ex:SSN).

See the inverse property, olive:identifies."""^^xsd:string ;
        rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:domain owl:Thing ;
	rdfs:range olive:ID ;
	owl:inverseOf olive:identifies ;
	olive:exampleTriple "(:_Person_Bob olive:identifiedBy [:uniqueText \"123-45-6789\"^^xsd:string; [owl:inverseOf olive:createsID] :_Organization_USGovernment])"^^xsd:string  ;
	olive:formerName "gist:identifiedBy"^^xsd:string;
.

olive:identifierForType a owl:AnnotationProperty ;
	rdfs:label "identifier for type"^^xsd:string ;
    skos:prefLabel "is the identifier for"@en ;
	rdfs:subPropertyOf olive:relatedToClass ;
    rdfs:domain olive:ID ;
    rdfs:range owl:Class ;
	rdfs:comment """(:ID1 olive:identifierForType :Class1) means that ID1 is a unique identifier for Class1. For example, (SKU-10201301 olive:identifierForType ToyotaRav4) means that SKU-10201301 is an identifier used to signify that something is an instance of the class ToyotaRav4."""^^xsd:string ;
        olive:exampleTriple ":SKU-1010201 olive:identifierForType ToyotaRav4"^^xsd:string ;
.

olive:identifies a owl:FunctionalProperty , owl:ObjectProperty ;
	rdfs:subPropertyOf olive:about ;
	rdfs:label "identifies"^^xsd:string ;
	skos:prefLabel "identifies"@en ;
	olive:formerName "gist:identifies"^^xsd:string;
	rdfs:comment """For details, see the comment on the inverse property, olive:identifiedBy.

Note that this property is functional: every identifier must refer to exactly one thing."""^^xsd:string ;
.

olive:identifiesAs a owl:ObjectProperty ;
	rdfs:label "identifies as"^^xsd:string ;
        skos:prefLabel "identfies as"@en ;
	rdfs:subPropertyOf olive:categorizedBy ;
        rdfs:domain olive:Person ;
        rdfs:range olive:Gender-Category ;
	rdfs:comment """(:Person1 olive:identifiesAs :Gender-Category1) means that Person1 identfies as Gender-Category1. For example, (:Casey olive:identifiesAs olive:Female-Sex) would mean that Casey identifies as female. Notice this does not imply that Casey's assigned sex (see olive:assignedSex) is female.

See also olive:genderExpression."""^^xsd:string ;
        olive:exampleTriple ":Casey olive:identifiesAs olive:Female-Sex"^^xsd:string ;
.

olive:identifierTypeSupportsURITemplate a owl:AnnotationProperty ;
	rdfs:label "identifier supports URI template"^^xsd:string ;
        skos:prefLabel "is associated with"@en ;
	rdfs:domain owl:Class ;
        rdfs:range olive:URITemplate ;
	rdfs:comment """(:IDClass olive:identifierTypeSupportsURITemplate :URITemplate1) means that instances IDClass can be used to generate URIs based on URITemplate1. For example, (:SSVID olive:identifierTypeSupportsURITemplate :SSVURITemplate). This means that everything that is olive:identifiedBy an instance of olive:SSVID can be given a URI in accordance with SSVURITemplate.

You can use this property to state, for example, that anything with a SSN or TIN can be given a URI that follows the pattern of the associated URI template. You'd do this by saying, for example, that the class of (olive:SSN olive:identifierTypeSupportsURITemplate :SSNURITemplate)."""^^xsd:string ;
        olive:exampleTriple ":SSVID olive:identifierTypeSupportsURITemplate :SSVURITemplate"^^xsd:string ;
.

olive:identifyingText a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:text ;
	rdfs:label "identifying text"^^xsd:string ;
        skos:prefLabel "is identified by"@en ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Thing1 olive:identifyingText \"TEXT\"^^xsd:string) means that TEXT identifies Thing1. For example, one's SSN, or one's name (given a unique name assumption), or an NPI will pick out unique individuals. Such as: (:DrRice olive:identifyingText \"1203456789\"^^xsd:string), which might be true in virtue of that being Dr Rice's NPI number (see olive:npi).

In practice, this is used more as an umbrella property for the specific types of identifiers. olive:identifyingText is NEITHER functional NOR inversely functional. However, all of its subproperties are both at least inversely functional, and often one to one."""^^xsd:string ;
        olive:exampleSubproperty olive:uniqueText, olive:npi ;
        olive:exampleTriple ":DrRice olive:identifyingText \"1203456789\"^^xsd:string"^^xsd:string ;
.

olive:instancesAreSubclassesOf a owl:AnnotationProperty ;
	rdfs:label "instances are subclasses Of"^^xsd:string ;
        skos:prefLabel "is a type of"@en ;
	rdfs:domain olive:Class-HigherOrder ;
        rdfs:range owl:Class ;
	rdfs:comment """(:Class-HigherOrder1 olive:instancesAreSubclassesOf :Class1) means that Class-HigherOrder1 is a type of Class1. For example, (olive:PatientCohort olive:instancesAreSubclassesOf olive:Patient) means that every instance of olive:PatientCohort is a rdfs:subClassOf olive:Patient."""^^xsd:string ;
        olive:exampleTriple "olive:PatientCohort olive:instancesAreSubclassesOf olive:Patient"^^xsd:string ;
.

olive:intellectualPropertyOf a owl:ObjectProperty ;
	rdfs:subPropertyOf [owl:inverseOf olive:owns] ;
	rdfs:label "intellectual property of"^^xsd:string ;
	skos:prefLabel "is the intellectual property of"@en , "is the IP of"@en ;
	rdfs:domain olive:IntellectualProperty ;
	rdfs:range olive:Agent ;
	rdfs:comment """(:IntellectualProperty1 olive:intellectualPropertyOf :Agent1) means that :IntellectualProperty1 is the intellectual property of :Agent1. For example, (:LetItBleed olive:intellectualPropertyOf :TheRollingStones)."""^^xsd:string ;
	olive:exampleTriple ":LetItBleed olive:intellectualPropertyOf :TheRollingStones"^^xsd:string ;
.

olive:invokedWithRestURL a owl:DatatypeProperty ;
	rdfs:label "invoked with rest U R L"^^xsd:string ;
        skos:prefLabel "can be invoked with the Rest URL"@en ;
	rdfs:domain olive:Function ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Function1 olive:invokedWithRestURL \"STRING\"xsd:string) means that Function1 can be invoked with the Rest URL STRING. For example, (:CIPipeline1 olive:invokedwithRestURL \"https://gitlab.example.com/api/v4/projects/9/trigger/pipeline?token=TOKEN&ref=main\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":CIPipeline1 olive:invokedwithRestURL \"https://gitlab.example.com/api/v4/projects/9/trigger/pipeline?token=TOKEN&ref=main\"^^xsd:string"^^xsd:string ;
.

olive:invokes a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:eventInvolves ;
	rdfs:label "invokes"^^xsd:string ;
        skos:prefLabel "invokes"@en ;
        rdfs:domain olive:Event ;
        rdfs:range [owl:unionOf (olive:Function olive:Content)] ;
	rdfs:comment """(:Event1 olive:invokes :Thing1) means that Thing1 is somehow invoked/impelemented/executed/performed during Event1. Examples include performances implementing scripts, or running a program implementing the program, or applying a function implementing the function. For example, (:LastNightsShow olive:invokes :MyFairLady-Content) might mean that the show we went to last night performed the content of My Fair Lady."""^^xsd:string ;
        olive:exampleTriple ":LastNightsShow olive:invokes :MyFairLady-Content"^^xsd:string ;
.

olive:invokes-direct a owl:ObjectProperty, owl:FunctionalProperty ;
	rdfs:subPropertyOf olive:invokes ;
	rdfs:label "invokes direct"^^xsd:string ;
        skos:prefLabel "directly invokes"@en ;
        rdfs:domain olive:Invocation ;
	rdfs:comment """This is the functional version subproperty of olive:invokes. While a given event may invoke several different pieces of content, an invocation can directly invoke exactly one."""^^xsd:string ;
.

olive:instanceOf a owl:AnnotationProperty ;
	rdfs:label "instance of"^^xsd:string ;
	skos:prefLabel "is an instance of"@en ;
	rdfs:domain owl:Class ;
	rdfs:range olive:Class-HigherOrder ;
	rdfs:comment """(:LowerOrderClass1 olive:instanceOf :HigherOrderClass1) means that LowerOrderClass1 is an instance of HigherOrderClass1. This is the annotation property analogue of rdf:type, to be used only to relate instances of higher-order classes (see olive:Class-HigherOrder) to the higher-order classes of which they are instances. (olive:instanceOf is the class-specific sub-property of wdt:P31.)"""^^xsd:string ;
.

olive:instantiates a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:abstractsTo ;
	rdfs:label "instantiates"^^xsd:string ;
        skos:prefLabel "is a manifestation of"@en ;
	skos:altLabel "instantiates"@en, "is a realization of"@en, "materializes"@en, "makes real"@en ;
        rdfs:domain olive:ContentBearingThing ;
        rdfs:range olive:Content ;
	rdfs:comment """(:ContentBearingThing olive:instantiates :Content1) means that ContentBearingThing1 is a realization or instantiation of Content1. For example, (:MyCopyOfTheCatcherInTheRye olive:instantiates :TheCatcherInTheRye) means that my copy of the book materializes the abstract story."""^^xsd:string ;
        olive:exampleTriple ":MyCopyOfTheCatcherInTheRye olive:instantiates :TheCatcherInTheRye"^^xsd:string ;
.

olive:insurerForClaim a owl:ObjectProperty ;
	rdfs:label "insurer for claim"^^xsd:string ;
        skos:prefLabel "is the payer for"@en ;
	rdfs:subPropertyOf olive:governs ;
        rdfs:domain olive:InsuranceCompany ;
        rdfs:range olive:InsuranceClaim ;
	rdfs:comment """(:InsuranceCompany1 olive:insurerForClaim :InsuranceClaim1) means that InsuranceCompany1 is the payer for InsuranceClaim1. For example, (:Cigna olive:insurerForClaim :Claim257) means that Cigna is the payer for Claim257."""^^xsd:string ;
        olive:exampleTriple ":Cigna olive:insurerForClaim :Claim257"^^xsd:string ;
.

olive:insurerForPlan a owl:ObjectProperty ;
	rdfs:subPropertyOf  olive:causes-general, olive:governs ;
	rdfs:label "insurer for plan"^^xsd:string ;
        skos:prefLabel "is the carrier of"^^xsd:string ;
        rdfs:domain [owl:unionOf (olive:InsuranceCompany olive:Person)] ;
        rdfs:range olive:InsurancePlan ;
	rdfs:comment """(:Agent1 olive:insurerForPlan olive:_InsurancePlan_1) means that Agent1 is the insurer for InsurancePlan1. For example, (:Cigna olive:insurerForPlan :PlanZ) means that Cigna is the insurer for PlanZ, and thus is responsible for paying for legitimate claims (see olive:InsurancePlan) made by the plan holder.

Note that the domain here is NOT olive:InsuranceCompany, as one might have the plan of being uninsured, in which case they would be the payer for their own plan."""^^xsd:string ;
        olive:exampleTriple ":Cigna olive:insurerForPlan :PlanZ"^^xsd:string .

olive:insurerForPolicy a owl:ObjectProperty ;
	rdfs:subPropertyOf  olive:causes-general, olive:governs ;
	rdfs:label "insurer for policy"^^xsd:string ;
        skos:prefLabel "is the carrier of"^^xsd:string ;
	rdfs:domain olive:InsuranceCompany ;
        rdfs:range olive:InsurancePolicy ;
	rdfs:comment """(:_InsuranceCompany_1 olive:insurerForPolicy olive:_InsurancePolicy_1) means that InsuranceCompany1 is the insurer for InsurancePolicy1. For example, (:Cigna olive:insurerForPolicy :Pol1234) means that Cigna is the insurer for Pol1234, and thus is responsible for paying for legitimate claims (see olive:InsurancePolicy) made by the policy holder (see olive:hasInsurancePolicy).

This property is a subproperty of the inverse of olive:hasParty. See olive:InusranceClaim and olive:InsurancePolicy for important related vocabulary."""^^xsd:string ;
        olive:exampleTriple ":Cigna olive:insurerForPolicy :Pol1234"^^xsd:string .

olive:involvesAgent a owl:ObjectProperty ;
	rdfs:label "involves agent"^^xsd:string ;
        skos:prefLabel "involves"@en ;
	rdfs:subPropertyOf olive:eventInvolves ;
        rdfs:domain olive:Situation ;
        rdfs:range olive:Agent ;
	rdfs:comment """(:Situation1 olive:involvesAgent :Agent1) means that Situation1 involves Agent1. For example, (:2020Inauguration olive:involvesAgent :JoeBiden). This is a very general relationship, and users are encouraged to pick a subproperty when possible that can more specifically pin down the agent's role in the event."""^^xsd:string ;
        olive:exampleTriple ":2020Inauguration olive:involvesAgent :JoeBiden"^^xsd:string ;
.

olive:isFrom a owl:ObjectProperty ;
	 rdfs:label "is from"^^xsd:string ;
	 skos:prefLabel "is from"@en ;
	 rdfs:comment """The most general 'from' property. This can relate any idea, object, message, etc. its source. For example, a letter can be from a person, sent from an address, or be on paper stock that came from some particular tree. In almost every case, a more specific property should be used. For the above three cases you should use: olive:fromAgent, olive:fromAddress, and gist:fromMaterial."""^^xsd:string ;
	 olive:exampleTriple ":Casey olive:isFrom :PuyallupWashington" ;
.

olive:iso3166Code a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:identifyingText, olive:mapsTo ;
	rdfs:label "ISO 3166 code"^^xsd:string ;
	skos:prefLabel "has the following ISO 3166 code:"@en ;
	skos:altLabel "has the following Internantional Organization for Standardization (ISO) 3166 code:"@en ;
	rdfs:domain olive:Region ;
	rdfs:range xsd:string ;
	rdfs:comment """(:Region1 olive:iso3166Code \"STRING\"^^xsd:string) means that :Region1 has the International Organization for Standardization (ISO) 3166 code STRING. It is almost always best to use one of the subproperties of this property when asserting information."""^^xsd:string ;
	olive:exampleTriple "olive:UnitedStates olive:iso3166Code \"US\"^^xsd:string"^^xsd:string ;
.

olive:iso3166Code-countryAlpha2 a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:iso3166Code ;
	rdfs:label "ISO 3166-1 alpha-2 code"^^xsd:string ;
	skos:prefLabel "has the following ISO 3166-1 alpha-2 code:"@en ;
	skos:altLabel "has the following Internantional Organization for Standardization (ISO) 3166-1 alpha-2 code:"@en ;
	rdfs:domain olive:Region ;
	rdfs:range xsd:string ;
	rdfs:comment """(:Region1 olive:iso3166Code-countryAlpha2 \"STRING\"^^xsd:string) means that :Region1 has the two-letter International Organization for Standardization (ISO) 3166-1 code STRING."""^^xsd:string ;
	olive:exampleTriple "olive:UnitedStates olive:iso3166Code-countryAlpha2 \"US\"^^xsd:string"^^xsd:string ;
.

olive:iso3166Code-countryAlpha3 a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:iso3166Code ;
	rdfs:label "ISO 3166-1 alpha-3 code"^^xsd:string ;
	skos:prefLabel "has the following ISO 3166-1 alpha-3 code:"@en ;
	skos:altLabel "has the following Internantional Organization for Standardization (ISO) 3166-1 alpha-3 code:"@en ;
	rdfs:domain olive:Region ;
	rdfs:range xsd:string ;
	rdfs:comment """(:Region1 olive:iso3166Code-countryAlpha3 \"STRING\"^^xsd:string) means that :Region1 has the three-letter International Organization for Standardization (ISO) 3166-1 code STRING."""^^xsd:string ;
	olive:exampleTriple "olive:UnitedStates olive:iso3166Code-countryAlpha3 \"USA\"^^xsd:string"^^xsd:string ;
.

olive:iso3166Code-countryNumeric a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:iso3166Code ;
	rdfs:label "ISO 3166-1 numeric code"^^xsd:string ;
	skos:prefLabel "has the following ISO 3166-1 numeric code:"@en ;
	skos:altLabel "has the following Internantional Organization for Standardization (ISO) 3166-1 numeric code:"@en ;
	rdfs:domain olive:Region ;
	rdfs:range xsd:string ;
	rdfs:comment """(:Region1 olive:iso3166Code-countryNumeric \"STRING\"^^xsd:string) means that :Region1 has the numeric International Organization for Standardization (ISO) 3166-1 code STRING."""^^xsd:string ;
	olive:exampleTriple "olive:UnitedStates olive:iso3166Code-countryNumeric \"840\"^^xsd:string"^^xsd:string ;
.

olive:iso639Code a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:identifyingText, olive:mapsTo ;
	rdfs:label "ISO 639 code"^^xsd:string ;
	skos:prefLabel "has the following ISO 639 code:"@en ;
	skos:altLabel "has the following Internantional Organization for Standardization (ISO) 639 code:"@en ;
	rdfs:domain olive:NaturalLanguage ;
	rdfs:range xsd:string ;
	rdfs:comment """(:NaturalLanguage1 olive:iso639Code \"STRING\"^^xsd:string) means that :NaturalLanguage1 has the International Organization for Standardization (ISO) 639 code STRING. It is almost always best to use one of the subproperties of this property when asserting information."""^^xsd:string ;
	olive:exampleTriple "olive:EnglishLanguage olive:iso639Code \"eng\"^^xsd:string"^^xsd:string ;
.

olive:iso639-1Code a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:iso639Code ;
	rdfs:label "ISO 639-1 code"^^xsd:string ;
	skos:prefLabel "has the following ISO 639-1 code:"@en ;
	skos:altLabel "has the following Internantional Organization for Standardization (ISO) 639-1 code:"@en ;
	rdfs:domain olive:NaturalLanguage ;
	rdfs:range xsd:string ;
	rdfs:comment """(:NaturalLanguage1 olive:iso639-1Code \"STRING\"^^xsd:string) means that :NaturalLanguage1 has the International Organization for Standardization (ISO) 639-1 code STRING. This is a two-letter code assigned to each ISO macrolanguage."""^^xsd:string ;
	olive:exampleTriple "olive:EnglishLanguage olive:iso639-1Code \"en\"^^xsd:string"^^xsd:string ;
.

olive:iso639-2BCode a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:iso639Code ;
	rdfs:label "ISO 639-2/B code"^^xsd:string ;
	skos:prefLabel "has the following ISO 639-2B code:"@en ;
	skos:altLabel "has the following Internantional Organization for Standardization (ISO) 639-2/B code:"@en ;
	rdfs:domain olive:NaturalLanguage ;
	rdfs:range xsd:string ;
	rdfs:comment """(:NaturalLanguage1 olive:iso639-2BCode \"STRING\"^^xsd:string) means that :NaturalLanguage1 has the International Organization for Standardization (ISO) 639-2B code STRING. This is a three-letter code assigned to each ISO macrolanguage; most of these will be the same as olive:iso639-2TCode, but in some cases this code is derived from its English name rather than the native name of the language."""^^xsd:string ;
	olive:exampleTriple "olive:EnglishLanguage olive:iso639-2BCode \"eng\"^^xsd:string"^^xsd:string ;
.

olive:iso639-2TCode a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:iso639Code ;
	rdfs:label "ISO 639-2T code"^^xsd:string ;
	skos:prefLabel "has the following ISO 639-2T code:"@en ;
	skos:altLabel "has the following Internantional Organization for Standardization (ISO) 639-2T code:"@en ;
	rdfs:domain olive:NaturalLanguage ;
	rdfs:range xsd:string ;
	rdfs:comment """(:NaturalLanguage1 olive:iso639-2TCode \"STRING\"^^xsd:string) means that :NaturalLanguage1 has the International Organization for Standardization (ISO) 639-2T code STRING. This is a three-letter code assigned to each ISO macrolanguage and derived from the native name of the language."""^^xsd:string ;
	olive:exampleTriple "olive:EnglishLanguage olive:iso639-2TCode \"eng\"^^xsd:string"^^xsd:string ;
.

olive:iso639-3Code a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:iso639Code ;
	rdfs:label "ISO 639-3 code"^^xsd:string ;
	skos:prefLabel "has the following ISO 639-3 code:"@en ;
	skos:altLabel "has the following Internantional Organization for Standardization (ISO) 639-3 code:"@en ;
	rdfs:domain olive:NaturalLanguage ;
	rdfs:range xsd:string ;
	rdfs:comment """(:NaturalLanguage1 olive:iso639-3Code \"STRING\"^^xsd:string) means that :NaturalLanguage1 has the International Organization for Standardization (ISO) 639-3 code STRING. This is a unique three-letter code for every language (macro or not)."""^^xsd:string ;
	olive:exampleTriple "olive:EnglishLanguage olive:iso639Code \"eng\"^^xsd:string"^^xsd:string ;
.

olive:issueNumber a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:seriesNumber ;
	rdfs:label "issue number"^^xsd:string ;
        skos:prefLabel "is issue number"^^xsd:string ;
        rdfs:domain olive:Content ;
        rdfs:range xsd:nonNegativeInteger ;
	rdfs:comment """(:Content1 olive:issueNumber \"N\"^xsd:nonNegativeInteger) means that Content1 is the Nth issue in some series. For example, (:Erkenntnis_vol_7 olive:issueNumber \"7\"^xsd:nonNegativeInteger) means that the thing referred to by ':Erkenntnis_issn_7' is the seventh issue."""^^xsd:string ;
        olive:exampleTriple ":Erkenntnis_issn_7 olive:issueNumber \"7\"^xsd:nonNegativeInteger"^^xsd:string ;
.

olive:issuingAgent a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:fromAgent ;
	rdfs:label "issuing agent"^^xsd:string ;
	skos:prefLabel "is issued by"^^xsd:string ;
	rdfs:domain owl:Thing ;
	rdfs:range olive:Agent ;
	rdfs:comment """(:Thing1 olive:issuingAgent :Agent1) means that Agent1 is the issuer of :Thing1. For example (:TomsPhD olive:issuingAgent :TheOhioStateUniversity) means that the Ohio State University granted Tom's Ph.D. Note that this property is agnostic with regard to ongoing control over the issued thing, unlike, e.g., olive:licensingAgent, which presupposes that the licenser has some sort of control over the certification that is granted."""^^xsd:string ;
	olive:exampleTriple " :TomsPhD olive:issuingAgent :TheOhioStateUniversity" ;
.

olive:isTo
	a owl:ObjectProperty ;
	 rdfs:label "is to"^^xsd:string ;
	 skos:prefLabel "has a destination of"@en ;
	 rdfs:comment "The most general 'to' property. This can relate any idea, object, message, etc. its (intended or not) destination. For example, a letter can be to a person or sent to an address. In almost every case, a more specific property should be used. For the above cases you should use olive:toAgent and olive:toPlace, respectively."^^xsd:string ;
	 .

olive:itemCost a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:situationHasAssociatedMonetaryValue ;
	rdfs:label "item cost"^^xsd:string ;
	skos:prefLabel "involves an item that costs"@en ;
	rdfs:domain olive:BuyingAndSelling ;
	rdfs:range olive:Monetary ;
	rdfs:comment """(:BuyingAndSelling1 olive:itemCost :Monetary1) means that BuyingAndSelling1 is an event in which some focal item is sold at a rate of Monetary1. For example, (ex:BuyingAndSelling111 olive:itemCost [olive:decimalValue \"500\"^^xsd:double ; olive:hasUoM olive:_USDollar ]) means that the focal item sold in ex:BuyingAndSelling111 (see olive:itemSold) is sold for $500 US. This property is intended for representing events in which a single, individual thing is sold; for representing events in which multiple instances of a given type are sold, it might be preferable to use olive:itemCost."""^^xsd:string ;
	olive:exampleTriple "ex:BuyingAndSelling111 olive:itemCost [olive:decimalValue \"500\"^^xsd:double ; olive:hasUoM olive:_USDollar ]" ;
	rdfs:seeAlso olive:totalCost, olive:unitCost, olive:BuyingAndSelling ;
.

olive:lastModifiedOn
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:modifiedOn ;
	skos:prefLabel "was last modified on"@en ;
	rdfs:label "last modified on"^^xsd:string ;
	rdfs:comment """(:Thing1 olive:lastModifiedOn :TimeInstant1) means that the last time Thing1 was modified was TimeInstant1. For example, (:CaseysWill olive:lastModifiedOn [a olive:TimeInstant ; olive:universalDateTime \"2010-07-07\"^^xsd:universalDate]) means that my will was last modified on July 7th, 2010."""^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range olive:TimeInstant ;
	olive:exampleTriple ":CaseysWill olive:lastModifiedOn [a olive:TimeInstant ; olive:universalDateTime \"2010-07-07\"^^xsd:universalDate]"^^xsd:string ;
.

olive:latitude a owl:DatatypeProperty ;
	rdfs:label "latitude"^^xsd:string ;
	skos:prefLabel "latitude"@en ;
	rdfs:comment "degrees above or below equator"^^xsd:string ;
	rdfs:domain olive:GeographicPoint ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range xsd:double ;
	olive:formerName "gist:latitude"^^xsd:string;
.

olive:licensingAgent a owl:ObjectProperty ;
	rdfs:subPropertyOf [owl:inverseOf olive:governs],  olive:issuingAgent ;
	rdfs:label "licensing body"^^xsd:string ;
	skos:prefLabel "is granted by"@en, "is issued by"@en ;
	rdfs:domain olive:Certification ;
	rdfs:range olive:Agent ;
	rdfs:comment """(:Certification1 olive:licensingAgent :Agent1) means that Certification1 is governed/controlled/granted by Agent1; in other words, Agent1 is the agent with the authority to grant and enforce the permission characterized by License1. For example, (:NicksDriversLicense olive:licensingAgent :Texas-StateGovernment) means that Nick's driver's license is granted by the state of Texas."""^^xsd:string ;
	olive:exampleTriple ":NicksDriversLicense olive:licensingAgent :Texas-StateGovernment" ;
.

olive:licenseNumber a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:identifyingText ;
	rdfs:label "license number"^^xsd:string ;
    skos:prefLabel "has license number"@en ;
    rdfs:domain [a owl:Class ;
		     owl:unionOf (olive:License-Content olive:Agent)] ; 
    rdfs:range xsd:string ;
	rdfs:comment """(:LicenseOrAgent1 olive:licenseNumber \"N\"^xsd:string) means that LicenseOrAgent1 has license number N (if LicenseOrAgent1 is an instance of olive:License-Content, N will be the license number for that particular license; if it is an instance of olive:Agent, it will be the license number for some license possessed by that agent). For example, (:NicksDriversLicense olive:licenseNumber \"82828282\"^xsd:string) means that Nick's driver's license number is 82828282."""^^xsd:string ;
    olive:exampleTriple ":NicksDriversLicense olive:licenseNumber \"82828282\"^xsd:string"^^xsd:string ;
.

olive:localDate
	a owl:DatatypeProperty ;
	rdfs:label "local date"^^xsd:string ;
	skos:prefLabel "occurred at/on"@en ;
	rdfs:subPropertyOf olive:date ;
	rdfs:comment "LD"^^xsd:string ;
	rdfs:domain olive:TimeInstant ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:localDate"^^xsd:string;
.

olive:localDateTime
	a owl:DatatypeProperty ;
	rdfs:label "local date time"^^xsd:string ;
	skos:prefLabel "occurred at/on"@en ;
	rdfs:subPropertyOf olive:date ;
	rdfs:comment "LDT"^^xsd:string ;
	rdfs:domain olive:TimeInstant ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range xsd:dateTime ;
	olive:formerName "gist:localDateTime"^^xsd:string;
.

olive:localTime
	a owl:DatatypeProperty ;
	rdfs:label "local time"^^xsd:string ;
	skos:prefLabel "occurred at/on"@en ;
	rdfs:subPropertyOf olive:date ;
	rdfs:comment "LT"^^xsd:string ;
	rdfs:domain olive:TimeInstant ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:localTime"^^xsd:string;
.

olive:locationText a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:text ;
	rdfs:label "location text"^^xsd:string ;
	skos:prefLabel "is associated with a location with the following label:"@en ;
	rdfs:domain owl:Thing ;
	rdfs:range xsd:string ;
	rdfs:comment """(:Thing1 olive:locationText \"STRING\"^^xsd:string) means that STRING is a label for a location associated with thing Thing1. For example, (:Nick olive:locationText \"TX\"^^xsd:string) means that Nick is associated with a location associated with the text \"TX\". This a general property designed to allow context to determine how to identify what STRING refers to."""^^xsd:string ;
	olive:exampleTriple ":Nick olive:locationText \"TX\"^^xsd:string" ;
.

olive:longitude	a owl:DatatypeProperty ;
	rdfs:label "longitude"^^xsd:string ;
	skos:prefLabel "longitdue"@en ;
	rdfs:comment "degrees from GM"^^xsd:string ;
	rdfs:domain olive:GeographicPoint ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range xsd:double ;
	olive:formerName "gist:longitude"^^xsd:string;
.

olive:madeOf
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:isFrom ;
	rdfs:label "made of"^^xsd:string ;
	skos:prefLabel "is made of"@en ;
	rdfs:comment "as in the vase is made up of clay"^^xsd:string ;
	rdfs:range olive:PhysicalSubstance ;
	olive:formerName "gist:madeUpOf"^^xsd:string;
.

olive:manufactures a owl:ObjectProperty ;
	rdfs:label "manufactures"^^xsd:string ;
    skos:prefLabel "manufactures"@en ;
	rdfs:subPropertyOf olive:creates ;
    rdfs:domain olive:Agent ;
    rdfs:range owl:Thing ;
	rdfs:comment """(:Agent1 olive:manufactures :Thing2) means that Agent1 manufactures Thing2. For example, (:Motorola olive:manufactures :NicksPhone)."""^^xsd:string ;
    olive:exampleTriple ":Motorola olive:manufactures :NicksPhone"^^xsd:string ;
.

olive:manufacturesType a owl:AnnotationProperty ;
	rdfs:label "manufactures type"^^xsd:string ;
    skos:prefLabel "manufactures"@en ;
	rdfs:subPropertyOf olive:relatedToClass ;
    rdfs:domain olive:Agent ;
    rdfs:range owl:Class ;
	rdfs:comment """(:Agent1 olive:manufacturesType :Class1) means that Agent1 manufactures one or more instances of Class1. For example, (:Motorola olive:manufacturesType :SmartPhone)."""^^xsd:string ;
    olive:exampleTriple ":Motorola olive:manufacturesType :SmartPhone"^^xsd:string ;
.

olive:mappingEventFailsToMap a owl:ObjectProperty ;
	rdfs:label "mapping event fails to map"^^xsd:string ;
	rdfs:subPropertyOf olive:eventInvolves ;
	skos:prefLabel "fails to identify the appropriate resource to use in place of"@en ;
	rdfs:domain olive:MappingEvent ;
	rdfs:range owl:Thing ;
	rdfs:comment """(:MappingEvent olive:mappingEventFailsToMap :Thing1) means that :MappingEvent fails to leverage some declared mapping schema to identify the appropriate resource to use in place of Thing1. Thing1 will typically be a blank node with further associated information concerning the mapping failure. See also olive:mappingEventFailsToMap-direct for a more specific subproperty identifying cases in which a direct mapping to a resource is unavailable."""^^xsd:string ;
.

olive:mappingEventFailsToMap-direct a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:mappingEventFailsToMap ;
	rdfs:label "mapping event fails to map directly"^^xsd:string ;
	skos:prefLabel "fails to identify the appropriate resource to use in place of"@en ;
	rdfs:domain olive:MappingEvent ;
	rdfs:range owl:Thing ;
	rdfs:comment """(:MappingEvent olive:mappingEventFailsToMap-direct :Thing1) means that :MappingEvent fails to leverage some declared mapping schema to identify the appropriate resource to use in place of Thing1. Thing1 will typically be a blank node with further associated information concerning the mapping failure. This property is used for the specific case in which there is expected to be a direct mapping from something (typically a string) to a resource in the ontology, typically declared via a subproperty of olive:mapsTo, olive:mapsTo-class, or olive:mapsTo-property. For cases in which the mapping failure is not direct in this way, the more general olive:mappingEventFailsToMap should be used."""^^xsd:string ;
.

olive:mappingStatus a owl:AnnotationProperty ;
	rdfs:label "mapping status"^^xsd:string ;
        skos:prefLabel "has been"@en ;
        rdfs:domain rdfs:Resource ;
        rdfs:range olive:MappingStatus;
	rdfs:comment """(:Resource1 olive:mappingStatus :MappingStatus1) means that Resource1 has MappingStatus1. There are three values for mapping status: olive:Unmapped, olive:Mapped, and olive:IndirectlyMapped. A term is mapped into the Olive ontology if it has been defined in terms of Olive vocabulary. We do this using terms like owl:equivalentProperty, owl:equivalentClass, rdfs:subPropertyOf, and rdfs:subClassOf. Even other looser connections, like skos:mappingRelation and subproperties suffice. If no such assertions have been made, then the term is considered unmapped.

The indirectly mapped term is the most complicated. Let's say there is some example ontology, Ex. It has two classes, ex:Super and ex:Sub, such that (ex:Sub rdfs:subClassOf ex:Super). Then, if (ex:Super olive:mappingStatus olive:Mapped), then (ex:Sub olive:mappingStatus olive:IndirectlyMapped). ex:Sub inherits its mapping via the mapping of ex:Super."""^^xsd:string ;
        olive:exampleTriple "fhir:Medication olive:mappingStatus olive:Mapped"^^xsd:string ;
.

olive:mapsTo a owl:DatatypeProperty ;
	rdfs:label "maps to"^^xsd:string ;
        skos:prefLabel "maps to"@en ;
	rdfs:domain owl:Thing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Thing1 olive:mapsTo \"STRING\"xsd:string) means that Thing1 maps to STRING. For example, (:NormalUse olive: \"usual\"^^xsd:string) means that the resource :NormalUse is somehow mapped to the string \"usual\" in some data source. These assertions almost always will use a subproperty of olive:mapsTo that is specific to the source, and they will serve to make simpler rules in mapping from some data source or source ontology into the Olive ontology.

Subproperties should follow the naming convention olive:mapsTo-X, where is is the name for the source ontology or data, e.g. olive:mapsTo-fhir for the fhir mapping predicate."""^^xsd:string ;
        olive:exampleTriple ":NormalUse olive: \"usual\"^^xsd:string"^^xsd:string ;
.

olive:mapsTo-assignedSexText a owl:DatatypeProperty ;
    rdfs:label "mapsTo-assignedSexText"^^xsd:string ;
    skos:prefLabel "maps to"@en ;
    rdfs:subPropertyOf olive:mapsTo ;
    rdfs:domain olive:Sex-Category ;
    rdfs:range xsd:string ;
    rdfs:comment """(:Sex-Category1 olive:mapsTo-assignedSexText \"STRING\"xsd:string) means that Sex-Category1 maps to STRING."""^^xsd:string ;
.

olive:mapsTo-certificationText a owl:DatatypeProperty ;
    rdfs:label "mapsTo-certificationText"^^xsd:string ;
    skos:prefLabel "maps to"@en ;
    rdfs:subPropertyOf olive:mapsTo ;
    rdfs:domain owl:Thing ;
    rdfs:range xsd:string ;
    rdfs:comment """(:Thing1 olive:mapsTo-certificationText \"STRING\"xsd:string) means that Thing1 maps to STRING."""^^xsd:string ;
.

olive:mapsTo-class a owl:AnnotationProperty ;
	rdfs:label "mapsTo-class"^^xsd:string ;
    skos:prefLabel "maps to"@en ;
	rdfs:domain owl:Class ;
    rdfs:range xsd:string ;
	rdfs:comment """(:Class1 olive:mapsTo-class \"STRING\"xsd:string) means that Class1 maps to STRING. For example, (olive:Organization olive:mapsTo-class \"organization\"^^xsd:string) means that the resource olive:Organization is somehow mapped to the string \"organization\" in some data source. These assertions almost always will use a subproperty of olive:mapsTo-class that is specific to the source, and they will serve to make simpler rules in mapping from some data source or source ontology into the Olive ontology.

Subproperties should follow the naming convention olive:mapsTo-X, where is is the name for the source ontology or data, e.g. olive:mapsTo-fhir for the fhir mapping predicate."""^^xsd:string ;
    olive:exampleTriple "olive:Organization olive:mapsTo-class \"organization\"^^xsd:string"^^xsd:string ;
.

olive:mapsTo-fhir a owl:DatatypeProperty ;
	rdfs:label "mapsTo-fhir"^^xsd:string ;
        skos:prefLabel "maps to (in fhir)"@en ;
	rdfs:subPropertyOf olive:mapsTo ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Thing1 olive:mapsTo-fhir \"STRING\"xsd:string) means that Thing1 maps to (in fhir) STRING."""^^xsd:string ;
.

olive:mapsTo-NUCCProviderTaxonomy a owl:AnnotationProperty ;
	rdfs:label "mapsTo-NUCCProviderTaxonomy"^^xsd:string ;
	skos:prefLabel "maps to (in the NUCC healthcare provider taxonomy)"@en ;
	rdfs:subPropertyOf olive:mapsTo ;
    rdfs:domain owl:Thing ;
    rdfs:range xsd:string ;
	rdfs:comment """(:Thing1 olive:mapsTo-NUCCProviderTaxonomy \"STRING\"xsd:string) means that Thing1 maps to (in the NUCC healthcare provider taxonomy) STRING."""^^xsd:string ;
	rdfs:seeAlso "https://nucc.org/index.php/code-sets-mainmenu-41/provider-taxonomy-mainmenu-40/csv-mainmenu-57"^^xsd:string ;
.

olive:mapsTo-NUCCProviderTaxonomy-providerSpecialtyType a owl:AnnotationProperty ;
	rdfs:label "mapsTo-NUCCProviderTaxonomy-providerSpecialtyType"^^xsd:string ;
	skos:prefLabel "maps to (in the NUCC healthcare provider taxonomy)"@en ;
	rdfs:subPropertyOf olive:mapsTo-class ;
    rdfs:domain owl:Class ;
    rdfs:range xsd:string ;
	rdfs:comment """(:Class1 olive:mapsTo-NUCCProviderTaxonomy \"STRING\"xsd:string) means that Class1 maps to (in the NUCC healthcare provider taxonomy) STRING and that Class1 is a type of provider specialty."""^^xsd:string ;
	rdfs:seeAlso "https://nucc.org/index.php/code-sets-mainmenu-41/provider-taxonomy-mainmenu-40/csv-mainmenu-57"^^xsd:string ;
.

olive:mapsTo-NUCCProviderTaxonomy-providerType a owl:AnnotationProperty ;
	rdfs:label "mapsTo-NUCCProviderTaxonomy-providerType"^^xsd:string ;
	skos:prefLabel "maps to (in the NUCC healthcare provider taxonomy)"@en ;
	rdfs:subPropertyOf olive:mapsTo-class ;
    rdfs:domain owl:Class ;
    rdfs:range xsd:string ;
	rdfs:comment """(:Class1 olive:mapsTo-NUCCProviderTaxonomy \"STRING\"xsd:string) means that Class1 maps to (in the NUCC healthcare provider taxonomy) STRING and that Class1 is a type of provider."""^^xsd:string ;
	rdfs:seeAlso "https://nucc.org/index.php/code-sets-mainmenu-41/provider-taxonomy-mainmenu-40/csv-mainmenu-57"^^xsd:string ;
.

olive:mapsTo-NUCCProviderTaxonomyGroupLabel a owl:AnnotationProperty ;
	rdfs:label "maps to NUCC provider taxonomy group label"^^xsd:string ;
	skos:prefLabel "has the following label in the NUCC provider taxonomy"@en ;
	rdfs:subPropertyOf olive:mapsTo-class ;
	rdfs:domain owl:Class ;
	rdfs:range xsd:string ;
	rdfs:comment """(:Class1 olive:mapsTo-NUCCProviderTaxonomyGroupLabel :Label1) means that :Class1 maps to the label :Label1 in the Group field of the NUCC provider taxonomy."""^^xsd:string ;
.

olive:mapsTo-property a owl:AnnotationProperty ;
	rdfs:label "mapsTo-property"^^xsd:string ;
    skos:prefLabel "maps to"@en ;
	rdfs:domain owl:Property ;
    rdfs:range xsd:string ;
	rdfs:comment """(:Property1 olive:mapsTo-property \"STRING\"xsd:string) means that Property1 maps to STRING. For example, (olive:name-operating olive:mapsTo-property \"3\"^^xsd:string) means that the resource olive:name-operating is somehow mapped to the string \"3\" in some data source. These assertions almost always will use a subproperty of olive:mapsTo-property that is specific to the source, and they will serve to make simpler rules in mapping from some data source or source ontology into the Olive ontology.

Subproperties should follow the naming convention olive:mapsTo-X, where is is the name for the source ontology or data, e.g. olive:mapsTo-fhir for the fhir mapping predicate."""^^xsd:string ;
    olive:exampleTriple "olive:name-operating olive:mapsTo-property \"3\"^^xsd:string"^^xsd:string ;
.

olive:mapsTo-providerType a owl:DatatypeProperty ;
	rdfs:label "mapsTo-provider type"^^xsd:string ;
        skos:prefLabel "maps to"@en ;
	rdfs:subPropertyOf olive:mapsTo ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string ;
	rdfs:comment """This mapping is motivated by mapping Ribbon Health data."""^^xsd:string ;
.

olive:mapsTo-ServiceCode a owl:DatatypeProperty ;
	rdfs:label "mapsTo-ServiceCode"^^xsd:string ;
        skos:prefLabel "maps to"@en ;
	rdfs:subPropertyOf olive:mapsTo ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Thing1 olive:mapsTo-ServiceCode \"STRING\"xsd:string) means that Thing1 maps to STRING."""^^xsd:string ;
	rdfs:seeAlso "https://ediacademy.com/blog/x12-product-service-id-qualifier/"^^xsd:string;
.

olive:mapsTo-x12ClaimStatusCode a owl:DatatypeProperty ;
	rdfs:label "mapsTo-x12ClaimStatusCode"^^xsd:string ;
        skos:prefLabel "maps to (in x12)"@en ;
	rdfs:subPropertyOf olive:mapsTo ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Thing1 olive:mapsTo-x12ClaimStatusCode \"STRING\"xsd:string) means that Thing1 maps to (in X12's 1029 Claim Status codes) STRING."""^^xsd:string ;
	rdfs:seeAlso "https://web.archive.org/web/20200111083618/http://ecomgx17.ecomtoday.com/edi/EDI_4010/el1029.htm"^^xsd:string;
.

olive:marriedTo a owl:ObjectProperty ;
	rdfs:label "married to"^^xsd:string ;
        skos:prefLabel "is married to"@en ;
	rdfs:subPropertyOf olive:partners ;
        rdfs:domain olive:Person ;
        rdfs:range olive:Person ;
	rdfs:comment """(:Person1 olive:marriedTo :Person1) means that Person1 is married to Person1. For example, (:BarackObama olive:marriedTo :MichelleObama).

Note that sometimes we would be better off talking about the nature of the relationship (see olive:Relationship) rather than asserting the relation via the property. For example, it's easier to state the start or end of a marriage than it is to qualify the triple that relates two individuals via olive:marriedTo."""^^xsd:string ;
        olive:exampleTriple ":BarackObama olive:marriedTo :MichelleObama"^^xsd:string ;
.

olive:matchesExemplar a owl:ObjectProperty ;
	rdfs:label "matches exemplar"^^xsd:string ;
	skos:prefLabel "matches"@en ;
	rdfs:subPropertyOf olive:connectedTo ;
	rdfs:domain owl:Thing ;
	rdfs:range olive:ExemplarIndividual ;
	rdfs:comment """(:Thing1 olive:matchesExemplar :ExemplarIndividual1) means that Thing1 matches the exemplar :ExemplarIndividual1. This means that Thing1 has been determined to possess characteristics sufficient for it to be identified as a match for ExemplarIndividual1. In practice, this will typically mean that characteristics possessed by ExemplarIndividual1 that aren't also currently known to be possessed by Thing1 should be provable of Thing1. For example, suppose (:Bob olive:matchesExemplar olive:ExemplarCredentialedIndividual_ANP) and (olive:ExemplarCredentialedIndividual_ANP a olive:AdultNursePractitioner) hold, and that (:Bob a olive:AdultNursePractitioner) is not currently known to hold. In such a case, it would be reasonable to conclude (:Bob a olive:AdultNursePractitioner)."""^^xsd:string ;
	olive:exampleTriple """(:Bob olive:matchesExemplar olive:ExemplarCredentialedIndividual_ANP)"""
.

olive:maximumNumberOfUses a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:associatedCount ;
	rdfs:label "maximum number of uses" ;
	skos:prefLabel "can be used the following number of times:"@en ;
	rdfs:domain owl:Thing ;
	rdfs:range xsd:integer ;
	rdfs:comment """(:Thing1 olive:maximumNumberOfUses \"12\"^^xsd:integer) means that Thing1 can be used a maximum of 12 times.""" ;
	olive:exampleTriple "(SurgicalMask01 olive:maximumNumberOfUses \"1\"^^xsd:string" ;
.


olive:memberCount a owl:DatatypeProperty, owl:FunctionalProperty ;
	rdfs:label "member count" ;
	skos:prefLabel "has the following number of members:"@en ;
	rdfs:subPropertyOf olive:associatedCount ;
	rdfs:domain olive:Collection ;
	rdfs:range xsd:integer ;
	rdfs:comment """(:Collection1 olive:memberCount :Integer1) means that Collection1 has Integer1 members. For example, (:NicksBaseballCardCollection olive:memberCount \"12\"^^xsd:integer) means that Nick's baseball card collection has 12 members.""" ;
.

olive:memberOf a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:partOf ;
	rdfs:label "member of"^^xsd:string ;
	skos:prefLabel "is a member of"@en ;
	rdfs:comment "The inverse of olive:hasMember. See that comment for details."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:domain olive:Collection ;
	rdfs:range owl:Thing ;
	olive:formerName "gist:memberOf"^^xsd:string;
	.

olive:metaGraphFor a owl:ObjectProperty, owl:FunctionalProperty, owl:InverseFunctionalProperty ;
	rdfs:label "meta graph for"^^xsd:string ;
        skos:prefLabel "contains the meta information about"@en ;
	skos:altLabel "is the meta graph for"@en ;
	rdfs:subPropertyOf olive:primarilyAbout ;
        rdfs:domain olive:MetaGraph ;
        rdfs:range olive:KnowledgeGraph ;
	rdfs:comment """(:MetaGraph1 olive:metaGraphFor :KnowledgeGraph1) means that MetaGraph1 contains the meta information about KnowledgeGraph1. For example, (:UMLSMetaGraph olive:metaGraphFor :UMLSGraph).

This property is functional and inversely functional. There is a one-to-one correspondence between graphs and their metagraphs."""^^xsd:string ;
        olive:exampleTriple ":UMLSMetaGraph olive:metaGraphFor :UMLSGraph"^^xsd:string ;
.

olive:modifiedOn a owl:ObjectProperty ;
	rdfs:label "modified on"^^xsd:string ;
        skos:prefLabel "was modified on"@en ;
	rdfs:subPropertyOf olive:timeOf ;
        rdfs:domain owl:Thing ;
        rdfs:range olive:TimeInstant ;
	rdfs:comment """(:Thing1 olive:modifiedOn :TimeInstant1) means that Thing1 was modified on TimeInstant1. For example, (:OliveOntology olive:modifiedOn [\"2020-01-02\"^^xsd:date]) means that the Olive ontology was modifed on January 2, 2020. Of course, this is consistent with it being modified again afterward. For the latest modification, see olive:lastModifiedOn. Also, for details of the modifications, see olive:ChangeEvent and related properties."""^^xsd:string ;
        olive:exampleTriple ":OliveOntology olive:modifiedOn [\"2020-01-02\"^^xsd:date]"^^xsd:string;
.

olive:multiplicand
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:unitComponent ;
	rdfs:label "multiplicand"^^xsd:string ;
	skos:prefLabel "has a product component unit of"@en ;
	rdfs:comment "Relates a unit of measure such as square mile or foot-pound to any of the units multiplied together (e.g. mile or pound). Note that we don't use"^^xsd:string ;
	rdfs:domain olive:ProductUnit ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range olive:UnitOfMeasure ;
	olive:formerName "gist:multiplicand"^^xsd:string;
.

olive:name
	a owl:DatatypeProperty ;
	rdfs:label "name"^^xsd:string ;
	skos:prefLabel "is named"@en ;
	rdfs:comment """(:Thing1 olive:name \"NAME\"^^xsd:string) relates Thing1 to (one of) its name(s), NAME. For example, (:BabeRuth olive:name \"Sultan of Swat\"^^xsd:string). Note that this is not a functional property, as an individual may have many names. And inversely, the same name may be used for many individuals.

This can be used for non-persons, such as organizations, as well as non-agents. If I named my car or computer, this property would work.

In many cases, this property is similar to skos:prefLabel. Both are ways to link name strings to things. The key differences are that skos:prefLabel is functional, and it is to be used as the preferred NL generation mechanism. Additionally, the prefLabel can be used for properties and other things for NL purposes where they could not be properly said to have a name."""^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range xsd:string ;
	olive:exampleTriple ":BabeRuth olive:name \"Sultan of Swat\"^^xsd:string" ;
	olive:formerName "gist:name"^^xsd:string;
	.

olive:name-alt a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name ;
	rdfs:label "first name"^^xsd:string ;
    skos:prefLabel "has an alternative name of"^^xsd:string ;
	skos:altLabel "has the name"@en ;
    rdfs:domain owl:Thing ;
    rdfs:range xsd:string ;
	rdfs:comment """(:Thing olive:name-alt \"FIRSTNAME\"^^xsd:string) means that Thing1 has an alternative name of \"NAME\". For example, (:BabeRuth olive:name-alt \"George\"^^xsd:string). This is meant to be a very general super-property of all the various alternative name properties."""^^xsd:string ;
    olive:exampleTriple ":BabeRuth olive:name-alt \"George\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:name-associatedText a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:text ;
	rdfs:label "associated name text"^^xsd:string ;
    skos:prefLabel "has the following text associated with its name:"^^xsd:string ;
    rdfs:domain owl:Thing ;
    rdfs:range xsd:string ;
	rdfs:comment """(:Thing olive:name-associatedText \"TEXT\"^^xsd:string) means that Thing1 has \"TEXT\" associated with its name. For example, (:JeffBezos olive:name-associatedText \"CEO\"^^xsd:string). This is meant to be a general super-property that covers sub-properties like olive:title and olive:certificationText."""^^xsd:string ;
    olive:exampleTriple ":JeffBezos olive:name-associatedText \"CEO\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:name-first a owl:DatatypeProperty, owl:FunctionalProperty ;
	rdfs:subPropertyOf olive:name ;
	rdfs:label "first name"^^xsd:string ;
        skos:prefLabel "has a first name of"^^xsd:string ;
	skos:altLabel "has the given name"@en ;
        rdfs:domain olive:LivingThing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:name-first \"FIRSTNAME\"^^xsd:string) means that LivingThing1 has a first name of \"FIRSTNAME\". For example, (:BabeRuth olive:name-first \"George\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":BabeRuth olive:name-first \"George\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;	
.

olive:name-firstAlt a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name-alt ;
	rdfs:label "alternative first name"^^xsd:string ;
    skos:prefLabel "has a first name of"^^xsd:string ;
	skos:altLabel "has the given name"@en ;
    rdfs:domain olive:LivingThing ;
    rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:name-firstAlt \"FIRSTNAME\"^^xsd:string) means that LivingThing1 has a non-preferred first name of \"FIRSTNAME\". For example, (:BabeRuth olive:name-firstAlt \"George\"^^xsd:string)."""^^xsd:string ;
    olive:exampleTriple ":BabeRuth olive:name-firstAlt \"George\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;	
.

olive:name-firstInitial a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name ;
	rdfs:label "first name initial"^^xsd:string ;
        skos:prefLabel "has the first initial"^^xsd:string ;
        rdfs:domain olive:LivingThing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:name-firstInitial \"F\"^^xsd:string) means that LivingThing1 has a first name initial of F . For example, (:BabeRuth olive:name-firstInitial \"G\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":BabeRuth olive:name-firstInitial \"G\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:name-formerLast a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name-lastAlt ;
	rdfs:label "former last name"^^xsd:string ;
    skos:prefLabel "has a former last name of"@en ;
	skos:altLabel "has a former family name of"@en, "has the former surname of"@en ;
    rdfs:domain olive:LivingThing ;
    rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:name-formerLast \"LASTNAME\"^^xsd:string) means that LivingThing1 has a former last name of \"LASTNAME\". For example, (:JadaPinkettSmith olive:name-formerLast \"Pinkett\"^^xsd:string)."""^^xsd:string ;
    olive:exampleTriple ":JadaPinkettSmith olive:name-formerLast \"Pinkett\"^^xsd:string"^^xsd:string ;
    olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:name-formerLegal a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name-alt ;
	rdfs:label "former legal name"^^xsd:string ;
    skos:prefLabel "has a former legal name of"@en ;
    rdfs:domain olive:Agent ;
    rdfs:range xsd:string ;
	rdfs:comment """(:Agent1 olive:name-formerLegal \"NAME\"^^xsd:string) means that Agent1 has a former last name of \"NAME\". For example, (:JadaPinkettSmith olive:name-formerLegal \"Jada Pinkett\"^^xsd:string)."""^^xsd:string ;
    olive:exampleTriple ":JadaPinkettSmith olive:name-formerLegal \"Jada Pinkett\"^^xsd:string"^^xsd:string ;
    olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:name-full a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name ;
	rdfs:label "full name"^^xsd:string ;
    skos:prefLabel "has a full name of"@en ;
    rdfs:domain olive:LivingThing ;
    rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:name-full \"NAME\"^^xsd:string) means that LivingThing1 has the full name of \"NAME\". For example, (:BabeRuth olive:name-full \"George Herman Ruth\"^^xsd:string)."""^^xsd:string ;
    olive:exampleTriple ":BabeRuth olive:name-full \"George Herman Ruth\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;	
.

olive:name-last a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name ;
	rdfs:label "last name"^^xsd:string ;
        skos:prefLabel "has a last name of"@en ;
	skos:altLabel "has a family name of"@en, "has the surname of"@en ;
        rdfs:domain olive:LivingThing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:name-last \"LASTNAME\"^^xsd:string) means that LivingThing1 has a last name of \"LASTNAME\". For example, (:BabeRuth olive:name-last \"Ruth\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":BabeRuth olive:name-last \"Ruth\"^^xsd:string"^^xsd:string ;
    olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:name-lastAlt a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name-alt ;
	rdfs:label "alternative last name"^^xsd:string ;
        skos:prefLabel "has an alternative last name of"@en ;
	skos:altLabel "has an alternative family name of"@en, "has the alternative surname of"@en ;
        rdfs:domain olive:LivingThing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:name-lastAlt \"LASTNAME\"^^xsd:string) means that LivingThing1 has an alternative last name of \"LASTNAME\". For example, (:JadaPinkettSmith olive:name-lastAlt \"Pinkett\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":JadaPinkettSmith olive:name-lastAlt \"Pinkett\"^^xsd:string"^^xsd:string ;
    olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:name-lastInitial a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name ;
	rdfs:label "last name initial"^^xsd:string ;
        skos:prefLabel "has the last initial"^^xsd:string ;
        rdfs:domain olive:LivingThing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:name-lastInitial \"F\"^^xsd:string) means that LivingThing1 has a last name initial of F . For example, (:BabeRuth olive:name-lastInitial \"R\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":BabeRuth olive:name-lastInitial \"R\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:name-legal a owl:DatatypeProperty, owl:FunctionalProperty ;
	rdfs:subPropertyOf olive:name ;
	rdfs:label "legal name"^^xsd:string ;
    skos:prefLabel "is named"^^xsd:string ;
	skos:altLabel "has the legal name"@en ;
    rdfs:domain olive:Agent ;
    rdfs:range xsd:string ;
	rdfs:comment """(:Agent olive:name-legal \"NAME\"^^xsd:string) means that Agent has a legal name of \"NAME\". For example, (:AmazonInc olive:name-legal \"Amazon.com, Inc\"^^xsd:string). Note that this property is intended to be general enough to cover names of, e.g., organizations."""^^xsd:string ;
    olive:exampleTriple ":AmazonInc olive:name-legal \"Amazon.com, Inc\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:namelyHref a owl:DatatypeProperty ;
	rdfs:label "namely href"^^xsd:string ;
        skos:prefLabel "is identified in Namely as"@en ;
	rdfs:subPropertyOf olive:identifyingText ;
        rdfs:domain olive:Professional ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Professional1 olive:namelyHref \"STRING\"xsd:string) means that Professional1 is identified in Namely as STRING. For example, (:JustinDowdy olive:namelyHref \"d30c7333-97kw-4887-a24l-1c6b5f0b4jl2\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ""^^xsd:string ;
.

olive:name-middle a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name ;
	rdfs:label "middle name"^^xsd:string ;
        skos:prefLabel "has a middle name of"@en ;
        rdfs:domain olive:LivingThing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:name-middle \"MIDDLENAME\"^^xsd:string) means that LivingThing1 has a middle name of \"MIDDLENAME\". For example, (:BabeRuth olive:name-middle \"Herman\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":BabeRuth olive:name-middle \"Herman\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:name-middleAlt a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name-alt ;
	rdfs:label "alternative middle name"^^xsd:string ;
    skos:prefLabel "has a middle name of"@en ;
    rdfs:domain olive:LivingThing ;
    rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:name-middleAlt \"MIDDLENAME\"^^xsd:string) means that LivingThing1 has a non-preferred middle name of \"MIDDLENAME\". For example, (:BabeRuth olive:name-middleAlt \"Herman\"^^xsd:string)."""^^xsd:string ;
    olive:exampleTriple ":BabeRuth olive:name-middleAlt \"Herman\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:name-middleInitial a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name ;
	rdfs:label "middle name initial"^^xsd:string ;
        skos:prefLabel "has the middle initial"^^xsd:string ;
        rdfs:domain olive:LivingThing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:name-middleInitial \"F\"^^xsd:string) means that LivingThing1 has a middle name initial of F . For example, (:BabeRuth olive:name-middleInitial \"H\"^^xsd:string).

Note that individuals may have multiple middle names, so this property is not functional."""^^xsd:string ;
        olive:exampleTriple ":BabeRuth olive:name-middleInitial \"H\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:name-nickname a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name ;
	rdfs:label "nickname"^^xsd:string ;
        skos:prefLabel "has a nickname of"@en ;
	skos:altLabel "is nicknamed"@en ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Thing1 olive:name-nickname \"NICKNAMENAME\"^^xsd:string) means that Thing1 has a nickname name of \"NICKNAMENAME\". For example, (:BabeRuth olive:name-nickname \"Babe\"^^xsd:string).

As opposed to the other olive-name* properties, this has a broad domain of owl:Thing. This is intentional, though may be revised at a later date (in which case this comment should be changed). The reasoning is that, say, a car can't really have a name in the same sense that a person can. We might call our car 'Thunder' or some such, but this isn't a first or last name; it's just a nickname.

This property may often coincide with the documentation properties like rdfs:label, skos:prefLabel, and so on."""^^xsd:string ;
        olive:exampleTriple ":BabeRuth olive:name-nickname \"Babe\"^^xsd:string"^^xsd:string ;
.

olive:name-operating a owl:DatatypeProperty;
	rdfs:subPropertyOf olive:name ;
	rdfs:label "operating name"^^xsd:string ;
    skos:prefLabel "operates under the named"^^xsd:string ;
	skos:altLabel "is named"@en ;
    rdfs:domain olive:Agent ;
    rdfs:range xsd:string ;
	rdfs:comment """(:Agent olive:name-operating \"NAME\"^^xsd:string) means that Agent operates under the name of \"NAME\". Typically this will be used for names under which some agent operates professionally (and often when the professional/business name differs from the legal name - see name-legal). For example, (:AmazonInc olive:name-operating \"Amazon\"^^xsd:string)."""^^xsd:string ;
    olive:exampleTriple ":AmazonInc olive:name-operating \"Amazon\"^^xsd:string"^^xsd:string ;
.

olive:name-prefix a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name ;
	rdfs:label "name prefix"^^xsd:string ;
        skos:prefLabel "has a name prefix of"@en ;
        rdfs:domain olive:LivingThing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:name-prefix \"PREFIX\"^^xsd:string) means that LivingThing1 has a name prefix of \"PREFIX\". For example, (:BabeRuth olive:name-prefix \"Mr.\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":BabeRuth olive:name-prefix \"Mr.\"^^xsd:string"^^xsd:string ;
.

olive:name-prefixAlt a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name-alt ;
	rdfs:label "alternative name prefix"^^xsd:string ;
    skos:prefLabel "has a name prefix of"@en ;
    rdfs:domain olive:LivingThing ;
    rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:name-prefixAlt \"PREFIX\"^^xsd:string) means that LivingThing1 has a name prefix of \"PREFIX\". For example, (:BabeRuth olive:name-prefixAlt \"Mr.\"^^xsd:string)."""^^xsd:string ;
    olive:exampleTriple ":BabeRuth olive:name-prefixAlt \"Mr.\"^^xsd:string"^^xsd:string ;
.

olive:name-professionalLast a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name-lastAlt ;
	rdfs:label "professional last name"^^xsd:string ;
    skos:prefLabel "has a professional last name of"@en ;
    rdfs:domain olive:LivingThing ;
    rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:name-professionalLast \"LASTNAME\"^^xsd:string) means that LivingThing1 has a professional last name of \"LASTNAME\". For example, (:DeclanMcManus olive:name-last \"Costello\"^^xsd:string)."""^^xsd:string ;
    olive:exampleTriple ":DeclanMcManus olive:name-professionalLast \"Costello\"^^xsd:string"^^xsd:string ;
    olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:name-suffix a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name ;
	rdfs:label "name suffix"^^xsd:string ;
        skos:prefLabel "has a name suffix of"@en ;
        rdfs:domain olive:LivingThing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:name-suffix \"SUFFIX\") means that LivingThing1 has a name suffix of \"SUFFIX\". For example, (:BabeRuth olive:name-suffix \"Jr.\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":BabeRuth olive:name-suffix \"Jr.\"^^xsd:string"^^xsd:string ;
.

olive:name-suffixAlt a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name-alt ;
	rdfs:label "alternative name suffix"^^xsd:string ;
    skos:prefLabel "has a name suffix of"@en ;
    rdfs:domain olive:LivingThing ;
    rdfs:range xsd:string ;
	rdfs:comment """(:LivingThing1 olive:name-suffixAlt \"SUFFIX\") means that LivingThing1 has a name suffix of \"SUFFIX\". For example, (:BabeRuth olive:name-suffixAlt \"Jr.\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":BabeRuth olive:name-suffixAlt \"Jr.\"^^xsd:string"^^xsd:string ;
.

olive:near a owl:ObjectProperty ;
	rdfs:label "near"^^xsd:string ;
        skos:prefLabel "is near"@en ;
	rdfs:subPropertyOf olive:spatiallyRelatedTo ;
        rdfs:domain olive:PhysicalThing ;
        rdfs:range olive:PhysicalThing ;
	rdfs:comment """(:PhysicalThing1 olive:near :PhysicalThing1) means that PhysicalThing1 is near PhysicalThing1. For example, (:MyHouse olive:near :HellOrHighWaterBrewery) means that my place is close to said brewery. Of course, this is a notoriously subjective property. My father would always say that we were near the end of the hike, and frequently I would have disagreed with him if I knew how much longer I had to go.

Use subproperties when appropriate. Also be wary of such a contingent property. I'm close to my keyboard now, but I won't be once I clock out for the day. If you are making this assertion in a context that will change in time, you might lead someone astray. But if you are giving directions to a location, it's pretty reasonable to assume the gas station on the main road will be there for long enough to use it as a nearby landmark."""^^xsd:string ;
        olive:exampleTriple ":MyHouse olive:near :HellOrHighWaterBrewery"^^xsd:string ;
.

olive:note a owl:DatatypeProperty ;
	rdfs:label "note"^^xsd:string ;
        skos:prefLabel "has the following note:"^^xsd:string ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Thing1 olive:note \"NOTE\"^^xsd:string) means that NOTE conveys some information about Thing1. For example, (:Elizabeth olive:note \"wants pony for Christmas\"^^xsd:string) helps convey that Elizabeth wants a pony for Christmas. That said, remember that olive:note doesn't, by itself, have any meaning in the ontology. Much better for the Elizabeth case would be to assert triples involving Elizabeth, ponies, and her desires, rather than merely linking her to string that humans can interpret."""^^xsd:string ;
        olive:exampleSubproperty olive:note-Structured ;
        olive:exampleTriple ":Elizabeth olive:note \"wants pony for Christmas\"^^xsd:string"^^xsd:string ;
.

olive:note-Legal a owl:DatatypeProperty ;
	rdfs:label "note-legal"^^xsd:string ;
        skos:prefLabel "has the legal note:"@en ;
	rdfs:subPropertyOf olive:note ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Thing1 olive:note-Legal \"STRING\"xsd:string) means that Thing1 has the legal note: STRING. For example, (:Graph12 olive:note-Legal \"This graph should only be used for patient care purposes.\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":Graph12 olive:note-Legal \"This graph should only be used for patient care purposes.\"^^xsd:string"^^xsd:string ;
.

olive:note-Structured a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:note ;
	rdfs:label "structured note"^^xsd:string ;
        skos:prefLabel ":"^^xsd:string ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string ;
	rdfs:comment """This property is just like olive:note, except that it conveys that this note is structured in such a way that the information might easily be converted to more meanigful triples. For example, (:Bill olive:note-Structured \"Bill, 27\"^^xsd:string) is pretty easily deconstructed into two triples that reflect Bill's first name and age, respectively."""^^xsd:string ;
        olive:exampleTriple ":Bill olive:note-Structured \"Bill, 27\"^^xsd:string"^^xsd:string ;
.

olive:note-ToDo a owl:DatatypeProperty ;
	rdfs:label "note-to do"^^xsd:string ;
        skos:prefLabel ":"@en ;
	rdfs:subPropertyOf olive:note ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string ;
	rdfs:comment """This property is just like olive:note, except that it conveys specifically what things need to be done regarding the thing in question. For example, (:My86Civic olive:note-ToDo \"change the timing belt before it hits 112k miles\"^^xsd:string).

Like other notes, these are strings and not things, and so we should be careful not to lean on this property for semantic use. But it's a very useful property for columns in spreadsheets or other emails that have action items to capture the free text."""^^xsd:string ;
        olive:exampleTriple ":My86Civic olive:note-ToDo \"change the timing belt before it hits 112k miles\"^^xsd:string"^^xsd:string ;
.

olive:npi a owl:DatatypeProperty, owl:FunctionalProperty, owl:InverseFunctionalProperty ;
	rdfs:subPropertyOf olive:identifyingText ;
	rdfs:label "npi"^^xsd:string ;
        skos:prefLabel "has the following npi:"@en ;
        rdfs:domain olive:MedicalCareProvider ;
        rdfs:range xsd:string ;
	rdfs:comment """This links a covered medical care provider with their National Provider Identifier Standard number. For example, (:DrRice olive:npi \"1203456789\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":DrRice olive:npi \"1203456789\"^^xsd:string"^^xsd:string ;
.

olive:nuccTaxonomyCode a owl:DatatypeProperty ;
	rdfs:label "nucc taxonomy code"^^xsd:string ;
        skos:prefLabel "has a NUCC taxonomy code of"@en ;
	rdfs:domain olive:MedicalCareProvider ;
        rdfs:range xsd:string ;
	rdfs:comment """(:MedicalCareProvider1 olive:nuccTaxonomyCode \"STRING\"xsd:string) means that MedicalCareProvider1 has a NUCC taxonomy code of STRING. For example, (:DrSmith olive:nuccTaxonomyCode \"207Q00000X\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":DrSmith olive:nuccTaxonomyCode \"207Q00000X\"^^xsd:string"^^xsd:string ;
.

olive:numerator
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:unitComponent ;
	rdfs:label "numerator"^^xsd:string ;
	skos:prefLabel "has the numerator unit of"@en ;
	rdfs:comment "Relates a RatioUnit such as meter(s)/second to the numerator Unit (e.g. meter)."^^xsd:string ;
	rdfs:domain olive:RatioUnit ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range olive:UnitOfMeasure ;
	olive:formerName "gist:numerator"^^xsd:string;
	.

olive:occupies
	a owl:ObjectProperty ;
	rdfs:label "occupies"^^xsd:string ;
	skos:prefLabel "occupies"@en ;
	rdfs:subPropertyOf olive:overlapsSpatially ;
	rdfs:comment "A thing occupies are region"^^xsd:string ;
	rdfs:domain olive:PhysicalThing ;
	rdfs:range olive:Place ;
	olive:formerName "gist:geoOccupies"^^xsd:string;
.

olive:occursAt
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:eventInvolves ;
	rdfs:label "occurs at"^^xsd:string ;
	skos:prefLabel "occurs at/in"@en ;
	rdfs:comment "The geospatial place where something happened or will happen"^^xsd:string ;
	olive:formerName "gist:occursAt"^^xsd:string ;
	.

olive:onlineProfile a owl:DatatypeProperty ;
	rdfs:label "online profile"^^xsd:string ;
        skos:prefLabel "has a profile at"@en ;
	rdfs:subPropertyOf rdfs:seeAlso ;
        rdfs:domain olive:Agent ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Agent1 olive:onlineProfile \"STRING\"xsd:string) means that Agent1 has a profile at STRING. For example, (:CaseyHart olive:onlineProfile \"https://www.linkedin.com/in/casey-hart-7a032ba4/\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":CaseyHart olive:onlineProfile \"https://www.linkedin.com/in/casey-hart-7a032ba4/\"^^xsd:string"^^xsd:string ;
.

olive:operatesIn a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:spatiallyRelatedTo ;
	rdfs:label "operates in"^^xsd:string ;
    skos:prefLabel "operates in"@en ;
    rdfs:domain olive:Agent ;
    rdfs:range olive:Place ;
	rdfs:comment """(:Agent1 olive:operatesIn :Place1) means that Agent1 performs at least some of its essential activities in Place1. This is a broad notion, but it is meant to capture the sense in which, e.g., businesses may conduct business in a given region (or at a specific address) as well as, e.g., criminals may carry out crimes in a given region. For example (:Olive olive:operatesIn :ColumbusOH) means that Olive carries out at least some of its essential functions in Columbus, OH. In many cases it will be more appropriate to use (or create and use) a subproperty of this one to express the facts of the matter precisely."""^^xsd:string ;
    olive:exampleTriple ":Olive olive:operatesIn :ColumbusOH"^^xsd:string ;
.

olive:orgHasMemberOfType a owl:AnnotationProperty ;
	rdfs:label "org has member of type"^^xsd:string ;
    skos:prefLabel "has as a member at least one"@en ;
    rdfs:domain olive:Organization ;
    rdfs:range owl:Class ;
	rdfs:comment """(:Organization1 olive:orgHasMemberOfType :Class1) means that Organization1 has at least one member that is an instance of Class1. For example, (:NicksOrganization olive:orgHasMemberOfType olive:Doctor) means that at least one doctor is a member of Nick's organization."""^^xsd:string ;
    olive:exampleTriple ":NicksOrganization olive:orgHasMemberOfType olive:Doctor"^^xsd:string ;
.

olive:orgHasMembersPrimarilyOfType a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:orgHasMemberOfType ;
	rdfs:label "org has members primarily of type"^^xsd:string ;
    skos:prefLabel "primarily has members that are"@en ;
    rdfs:domain olive:Organization ;
    rdfs:range owl:Class ;
	rdfs:comment """(:Organization1 olive:orgHasMembersPrimarilyOfType :Class1) means that the members of Organization1 are primarily instances of Class1. For example, (:NicksOrganization olive:orgHasMembersPrimarilyOfType olive:Doctor) means the members of Nick's organization are primarily doctors."""^^xsd:string ;
    olive:exampleTriple ":NicksOrganization olive:orgHasMembersPrimarilyOfType olive:Doctor"^^xsd:string ;
.

olive:organizationContact a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:employs, olive:contactPerson ;
	rdfs:label "contact person"^^xsd:string ;
        skos:prefLabel "can be contacted via"@en ;
	skos:altLabel "is represented by"@en ;
        rdfs:domain olive:Organization ;
        rdfs:range olive:Person ;
	rdfs:comment """(:Org1 olive:organizationContact :Person1) means that you can contact Person1 as a representative of Org1. For example, (:UCDavis olive:organizationContact :JennySmith) means that one could contact Jenny Smith in order to interact with UCDavis.

We assume that contacts are employed by the organizations that they are contacts for. Further, note that contact persons will be relative to one's purpose and organization. In many cases, organizations will have separate contacts for each of their clients, say. In such cases, you will want further disambiguating information, such as which projects they oversee. Still, even in a situation where you don't know which contact is the best fit, it's likely that reaching out to any contact for a given company will be fruitful in getting redirected to the right resource."""^^xsd:string ;
        olive:exampleTriple ":UCDavis olive:organizationContact :JennySmith"^^xsd:string ;
	olive:formerName "olive:contactPerson"^^xsd:string;
.

olive:organizedBy a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:doneByAgent ;
	rdfs:label "organized by"^^xsd:string ;
        skos:prefLabel "is organized by"@en ;
        rdfs:domain olive:Event ;
        rdfs:range olive:Agent ;
	rdfs:comment """(:Event1 olive:organizedBy :Agent1) means that Event1 was organized by Agent1. For example, (:MySurpriseParty olive:organizedBy :MyMom) means that my mother organized my suprise party. This property can also be used to relate events to companies or government agencies that organize them, such as Pfizer or the FDA."""^^xsd:string ;
        olive:exampleTriple ":MySurpriseParty olive:organizedBy :MyMom"^^xsd:string ;
.

olive:orgSite a owl:ObjectProperty ;
        rdfs:subPropertyOf olive:controls ;
	rdfs:label "building for organization"^^xsd:string ;
        skos:prefLabel "operates out of"^^xsd:string ;
        rdfs:domain olive:Organization ;
        rdfs:range olive:Place ;
	rdfs:comment """(:_Organization_1 olive:orgSite :_Place_1) means that Organization1 operates out of Place1. For example, (:CIA olive:orgSite :ThePentagon). This property is not functional; organizations may operate out of many buildings, and many organizations may operate out of the same building. Often an organization may own (see olive:owns) the building.

More specific notions would include identifying a headquarters, which would be functional.

This property enables one to connect the closely related notions of an organization and where that organization is. Often people will talk about going to the hospital and paying the hospital. But these 'the hospital' terms refer to different things. You go to the location, and you pay the organization."""^^xsd:string ;
        olive:exampleTriple ":CIA olive:orgSite :ThePentagon"^^xsd:string ;
.

olive:owns
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:controls ;
	rdfs:label "owns"^^xsd:string ;
	skos:prefLabel "owns"@en ;
	rdfs:comment "(:Agent1 olive:owns :Thing1) means that Agent1 has (partial) legal ownership of Thing1."^^xsd:string ;
	rdfs:domain olive:Agent ;
	rdfs:range owl:Thing ;
	olive:formerName "gist:owns"^^xsd:string;
.

olive:overlapsSpatially a owl:ObjectProperty, owl:SymmetricProperty ;
	rdfs:label "overlaps spatially"^^xsd:string ;
    skos:prefLabel "overlaps"@en ;
	rdfs:subPropertyOf olive:spatiallyRelatedTo ;
    rdfs:domain [owl:unionOf (olive:PhysicalThing olive:Place)] ;
    rdfs:range [owl:unionOf (olive:PhysicalThing olive:Place)] ;
	rdfs:comment """(:Place1 olive:overlapsSpatially :Place2) means that Place1 and Place2 spatially overlap each other, including the case in which Place1 spatially contains Place2 (or vice versa). For example, (:Arkansas olive:overlapsSpatially :UnitedStatesOfAmerica) means that Arkansas spatially overlaps the United States of America."""^^xsd:string ;
    olive:exampleTriple ":Arkansas olive:overlapsSpatially :UnitedStatesOfAmerica"^^xsd:string ;
.

olive:paidAmount a owl:ObjectProperty, owl:FunctionalProperty ;
        rdfs:subPropertyOf olive:situationHasAssociatedMonetaryValue ;
	rdfs:label "paid amount"^^xsd:string ;
        skos:prefLabel "has had the following amount paid:"@en ;
        rdfs:domain olive:PayingForSomething ;
        rdfs:range olive:Monetary ;
	rdfs:comment """(:PayingForSomething1 olive:paidAmount :Monetary1) means that Monetary1 has been paid during PayingForSomething1.  For example, (:PayingForMyCar olive:paidAmount [a olive:Monetary ; olive:decimalValue \"8000\"^^xsd:decimal ; olive:hasUoM olive:_USDollar]) means that I have paid $8000 off my car during the noted payment event. Note that I may have paid more than this in previous payment events."""^^xsd:string ;
        olive:exampleTriple ":PayingForMyCar olive:paidAmount [a olive:Monetary ; olive:decimalValue \"8000\"^^xsd:decimal ; olive:hasUoM olive:_USDollar]"^^xsd:string ;
.

olive:paidBy a owl:ObjectProperty ;
	rdfs:label "paid by"^^xsd:string ;
        skos:prefLabel "was paid by"@en ;
	rdfs:subPropertyOf olive:doneByAgent, olive:conveysFrom ;
        rdfs:domain olive:PayingForSomething ;
        rdfs:range olive:Agent ;
	rdfs:comment """(:PayingForSomething1 olive:paidBy :Agent1) means that PayingForSomething1 was paid by Agent1. For example, (:PayingForDinner olive:paidBy :Jerry) means that Jerry paid for dinner."""^^xsd:string ;
        olive:exampleTriple ":PayingForDinner olive:paidBy :Jerry"^^xsd:string ;
.

olive:paidTo a owl:ObjectProperty ;
	rdfs:label "paid to"^^xsd:string ;
        skos:prefLabel "was paid to"@en ;
	rdfs:subPropertyOf olive:doneForAgent, olive:conveysTo ;
        rdfs:domain olive:PayingForSomething ;
        rdfs:range olive:Agent ;
	rdfs:comment """(:PayingForSomething1 olive:paidTo :Agent1) means that PayingForSomething1 was paid to Agent1. For example, (:PayingForDinner olive:paidTo :Tortianos) means that Tortiano's was the recipient of the dinner payment."""^^xsd:string ;
        olive:exampleTriple ":PayingForDinner olive:paidTo :Tortianos"^^xsd:string ;
.

olive:paidWith a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:doneUsing, olive:thingTransferred ;
	rdfs:label "paid with"^^xsd:string ;
        skos:prefLabel "was paid via"@en ;
        rdfs:domain olive:PayingForSomething ;
        rdfs:range olive:Artifact ;
	rdfs:comment """Relates a payment event with the thing that was used to pay, such as cash, a credit card, or a check. For example, (:Purchase23 olive:paidWith :Check25) means that that purchase was completed using that check."""^^xsd:string ;
        olive:exampleTriple ":Purchase23 olive:paidWith :Check25"^^xsd:string ;
.

olive:parentOf
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:causes-general ;
	rdfs:label "parent of"^^xsd:string ;
	skos:prefLabel "is a parent of"@en ;
	rdfs:domain olive:LivingThing ;
	rdfs:range olive:LivingThing ;
	rdfs:comment "(:LivingThing1 olive:parentOf :LivingThing2) means that LivingThing1 is a (biological) parent of LivingThing2. For example, (:CaseyHart olive:parentOf :JulietteHart) means that Casey is Juliette's parent."^^xsd:string ;
	olive:formerName "gist:parentOf"^^xsd:string;
.

olive:partners a owl:ObjectProperty, owl:SymmetricProperty ;
    rdfs:subPropertyOf olive:affiliatedWith ;
    rdfs:label "partners"^^xsd:string ;
    skos:prefLabel "is a partner of"@en ;
    rdfs:domain olive:Agent ;
    rdfs:range olive:Agent ;
    rdfs:comment """(:Agent1 olive:partners :Agent2) means that, in some sense, Agent1 and Agent2 are partners. For example, (:Batman olive:partners :Robin) means that Batman and Robin are, in some sense, partners. This is a fairly general property - it is preferable to use one of its subproperties when representing knowledge whenever possible. It is also sometimes preferable to represent the relationship itself (see olive:Partnership) instead of asserting a direct link between partners using olive:partners or one of its subproperties."""^^xsd:string ;
    olive:exampleTriple ":Batman olive:partners :Robin"^^xsd:string ;
.

olive:partOf a owl:ObjectProperty , owl:TransitiveProperty ;
	rdfs:label "part of"^^xsd:string ;
	skos:prefLabel "is part of"@en ;
	rdfs:comment "The transitive version of directPartOf"^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:partOf"^^xsd:string;
.

olive:patientCensus a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:associatedCount ;
	rdfs:label "patient census"^^xsd:string ;
        skos:prefLabel "is providing service to "@en ;
        rdfs:domain olive:MedicalCareProvider ;
        rdfs:range xsd:integer ;
	rdfs:comment """(:Provider1 olive:patientCensus \"NUM\"^^xsd:integer) means that Provider1 is providing service to NUM patients. For example, (:GoodSamaritanER olive:patientCensus \"23\"^^xsd:integer) means that Good Sam has 23 patients in the ER."""^^xsd:string ;
        olive:exampleTriple ":GoodSamaritanER olive:patientCensus \"23\"^^xsd:integer"^^xsd:string ;
.

olive:patientCensus-DailyAverage a owl:DatatypeProperty ;
	rdfs:label "daily average patient census"^^xsd:string ;
        skos:prefLabel "provides service to an average of"@en ;
        rdfs:domain olive:MedicalCareProvider ;
        rdfs:range xsd:decimal ;
	rdfs:comment """(:Provider1 olive:patientCensus-DailyAverage \"NUM\"^^xsd:integer) means that Provider1 provides service to an average of NUM patients per day. For example, (:GoodSamaritanER olive:patientCensus-DailyAverage \"112\"^^xsd:integer) means that Good Sam has 112 patients in the ER every day, on average."""^^xsd:string ;
        olive:exampleTriple ":GoodSamaritanER olive:patientCensus-DailyAverage \"112\"^^xsd:integer"^^xsd:string ;
.

olive:patientDischargedTo a owl:ObjectProperty ;
	rdfs:label "patient discharged To"^^xsd:string ;
        skos:prefLabel "concludes with the patient engaged in"@en ;
	rdfs:subPropertyOf olive:precedes ;
        rdfs:domain olive:MedicalCareEvent ;
        rdfs:range olive:Situation ;
	rdfs:comment """(:MedicalCareEvent1 olive:patientDischargedTo :Event1) means that MedicalCareEvent1 concludes with the patient engaged in Event1. This property allows us to specify patient discharge dispositions. For example, (:RisingsACLSurgery olive:patientDischargedTo [a olive:HomeCareEvent]) indicates that the patient (Rising) in Rising's ACL Surgery ended that event and continued on as a patient in a home care event."""^^xsd:string ;
        olive:exampleTriple ":RisingsACLSurgery olive:patientDischargedTo [a olive:HomeCareEvent]"^^xsd:string ;
.

olive:patientForClaim a owl:ObjectProperty ;
	rdfs:label "patient for claim"^^xsd:string ;
        skos:prefLabel "is the patient mentioned in"@en ;
	rdfs:subPropertyOf olive:causes-general ;
        rdfs:domain olive:Patient ;
        rdfs:range olive:InsuranceClaim ;
	rdfs:comment """(:Patient1 olive:patientForClaim :InsuranceClaim1) means that Patient1 is the patient mentioned in InsuranceClaim1. For example, (:JoeSmith olive:patientForClaim :Claim27) means that Claim27 is about a patient visit by Joe Smith."""^^xsd:string ;
        olive:exampleTriple ":JoeSmith olive:patientForClaim :Claim27"^^xsd:string;
.

olive:patientStatusCode a owl:DatatypeProperty ;
	rdfs:label "patient status code"^^xsd:string ;
        skos:prefLabel "is a patient classified as"@en ;
        rdfs:domain olive:Patient ;
	rdfs:range xsd:integer ;
	rdfs:comment """(:Patient1 olive:patientStatusCode \"CODE\"^^xsd:integer) means that Patient1 has the status/disposition indicated by CODE. For example, (:Alice olive:patientStatusCode \"02\"^^xsd:integer) means that Alice was discharged/transferred to a short-term general hospital or inpatient care."""^^xsd:string ;
        olive:exampleTriple ":Alice olive:patientStatusCode \"02\"^^xsd:integer"^^xsd:string ;
	rdfs:seeAlso "https://www.health.ny.gov/statistics/sparcs/sysdoc/appc.htm"^^xsd:string ;
.

olive:paymentOpportunityAmount a owl:DatatypeProperty ;
	rdfs:label "payment opportunity amount"^^xsd:string ;
        skos:prefLabel "has the opportunity amount"@en ;
	rdfs:domain olive:Monetary ;
        rdfs:range xsd:decimal ;
	rdfs:comment """(:Monetary1 olive:paymentOpportunityAmount \"DECIMAL\"xsd:decimal) means that Monetary1 has the opportunity amount DECIMAL. For example, ([olive:Monetary; olive:decimalValue \"25\"^^xsd:decimal; olive:hasUoM olive:_USDollar] olive:paymentOpportunityAmount \"12\"^^xsd:decimal) would mean that the inital amount has 12 more recoverable US dollars. The opportunity amount is simply the difference between the adjusted amount (see olive:adjustedCost) and what has been paid (see olive:paidAmount)."""^^xsd:string ;
        olive:exampleTriple "[olive:Monetary; olive:decimalValue \"25\"^^xsd:decimal; olive:hasUoM olive:_USDollar] olive:paymentOpportunityAmount \"12\"^^xsd:decimal"^^xsd:string ;
.

olive:paysForClaim a owl:ObjectProperty ;
	rdfs:label "pays for claim"^^xsd:string ;
        skos:prefLabel "pays for"@en ;
	rdfs:subPropertyOf olive:payingForThing ;
        rdfs:domain olive:PayingForSomething ;
        rdfs:range olive:InsuranceClaim ;
	rdfs:comment """This is the subproperty of olive:payingForThing that restricts the thing paid for to an insurance claim."""^^xsd:string ;
.

olive:payingForThing a owl:ObjectProperty ;
	rdfs:label "paying for thing"^^xsd:string ;
        skos:prefLabel "pays for"@en ;
	rdfs:subPropertyOf olive:eventInvolves ;
        rdfs:domain olive:PayingForSomething ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:PayingForSomething1 olive:payingForThing :Thing1) means that PayingForSomething1 pays for Thing1. For example, (:PayingForMyCar olive:payingForThing :MyCar)."""^^xsd:string ;
        olive:exampleTriple ":PayingForMyCar olive:payingForThing :MyCar"^^xsd:string ;
.

olive:personalInformation a owl:ObjectProperty ;
	rdfs:label "personal information"^^xsd:string ;
        skos:prefLabel "is partly identified in relation to"^^xsd:string ;
        rdfs:domain olive:Agent ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:Agent1 olive:personalInformation :Thing1) means that Agent1 can be personally described by, in part, their relationship to Thing1. For example, (:Freddy olive:personalInformation :MadridSpain) is true in virtue of Fredy being educated in Madrid.

This is a very broad property, and almost certainly you should use a more specific subproperty. For example, relate a person to their address using olive:hasCommunicationAddress, or a person to their alma mater via olive:almunusOf.

This property is not identical to things that show up in PHI, but is closely related. TODO: flesh out this connection."""^^xsd:string ;
        olive:exampleSubproperty olive:hasCommunicationAddress, olive:alumnusOf ;
        olive:exampleTriple ":Freddy olive:personalInformation :MadridSpain"^^xsd:string ;
.

olive:phoneNumber a owl:DatatypeProperty ;
        rdfs:subPropertyOf olive:contactInformation ;
	rdfs:label "phone number"^^xsd:string ;
        skos:prefLabel "can be reached at"^^xsd:string ;
        rdfs:domain [a owl:Class ;
		     owl:unionOf (olive:Address olive:Agent)] ;
        rdfs:range xsd:string ;
	rdfs:comment """(:PhoneNumber1 olive:phoneNumber  \"NUM\"^^xsd:string) means that \"NUM\" can be used to call PhoneNumber. For example, (:Bill olive:phoneNumber \"122345260982\"xsd:string) shows you what you might dial to reach Bill."""^^xsd:string ;
        olive:exampleTriple ":Bill olive:phoneNumber \"122345260982\"xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:physicalAddressHasFaxNumber a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:physicalAddressHasVirtualAddress ;
	rdfs:label "physical address has fax number"^^xsd:string ;
    skos:prefLabel "can be reached by fax via"@en ;
    rdfs:domain olive:PhysicalAddress ;
    rdfs:range olive:TelephoneNumber ;
	rdfs:comment """(:PhysicalAddress1 olive:physicalAddressHasFaxNumber :TelephoneNumber1) means that :PhysicalAddress1 is associated with :TelephoneNumber1. For example, (:PhysicalAdress1234 olive:physicalAddressHasFaxNumber :TelephoneNumber8675309) means that PhysicalAddress1234 can be reached/communicated with by fax via TelephoneNumber8675309."""^^xsd:string ;
    olive:exampleTriple ":PhysicalAdress1234 olive:physicalAddressHasFaxNumber :TelephoneNumber8675309"^^xsd:string ;
.

olive:physicalAddressHasPhoneNumber a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:physicalAddressHasVirtualAddress ;
	rdfs:label "physical address has phone number"^^xsd:string ;
    skos:prefLabel "can be reached by telephone via"@en ;
    rdfs:domain olive:PhysicalAddress ;
    rdfs:range olive:TelephoneNumber ;
	rdfs:comment """(:PhysicalAddress1 olive:physicalAddressHasPhoneNumber :TelephoneNumber1) means that :PhysicalAddress1 is associated with :TelephoneNumber1. For example, (:PhysicalAdress1234 olive:physicalAddressHasPhoneNumber :TelephoneNumber8675309) means that PhysicalAddress1234 can be reached/communicated with by phone via TelephoneNumber8675309."""^^xsd:string ;
    olive:exampleTriple ":PhysicalAdress1234 olive:physicalAddressHasPhoneNumber :TelephoneNumber8675309"^^xsd:string ;
.

olive:physicalAddressHasVirtualAddress a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:connectedTo ;
	rdfs:label "physical address has virtual address"^^xsd:string ;
    skos:prefLabel "can be reached via"@en ;
    rdfs:domain olive:PhysicalAddress ;
    rdfs:range olive:VirtualAddress ;
	rdfs:comment """(:PhysicalAddress1 olive:physicalAddressHasVirtualAddress :VirtualAddress1) means that :PhysicalAddress1 is associated with :VirtualAddress1 (e.g. an instance of olive-TelephoneNumber). For example, (:PhysicalAdress1234 olive:physicalAddressHasVirtualAddress :TelephoneNumber8675309) means that PhysicalAddress1234 can be reached/communicated with virtually via TelephoneNumber8675309."""^^xsd:string ;
    olive:exampleTriple ":PhysicalAdress1234 olive:physicalAddressHasVirtualAddress :TelephoneNumber8675309"^^xsd:string ;
.

olive:placeContains a owl:ObjectProperty , owl:TransitiveProperty ;
	rdfs:subPropertyOf olive:contains, olive:overlapsSpatially ;
	rdfs:label "place contains"^^xsd:string ;
	skos:prefLabel "contains"@en ;
	rdfs:comment "A subproperty of olive:contains that is specific to places."^^xsd:string ;
	rdfs:domain olive:Place ;
	rdfs:range olive:Place ;
	olive:formerName "gist:geoContains"^^xsd:string;
.

olive:policyForClaim a owl:ObjectProperty, owl:InverseFunctionalProperty ;
	rdfs:label "policy for claim"^^xsd:string ;
        skos:prefLabel "governs"^^xsd:string ;
	rdfs:subPropertyOf olive:causes-general ;
        rdfs:range olive:InsuranceClaim;
        rdfs:domain olive:InsurancePolicy;
	rdfs:comment """(:_InsurancePolicy_1 olive:policyForClaim :_InsuranceClaim_1) means that InsuranceClaim1 is based on, or governed by, the agreement InsurancePolicy1. For example, (:BobsPolicy olive:policyForClaim :BobsClaim) would mean that Bob's claim is based on his insurance policy. Usually this will be a straightforward connection, since most people have at most one insurance policy of each type (e.g. health, homeowners, car), and so claims of that type will be based on their only relevant policy.

Note that this is inversely functional, but that does not mean that policyholders hold exactly one insurance policy. If one is covered by two health insurance policies, they may need to file two distinct insurance claims."""^^xsd:string ;
        olive:exampleTriple ":BobsPolicy olive:policyForClaim :BobsClaim"^^xsd:string ;
.

olive:policyUnderPlan a owl:ObjectProperty ;
	rdfs:label "policy under plan"^^xsd:string ;
        skos:prefLabel "is under"@en ;
	rdfs:subPropertyOf olive:regulatedBy ;
        rdfs:domain olive:InsurancePolicy ;
        rdfs:range olive:InsurancePlan ;
	rdfs:comment """(:InsurancePolicy1 olive:policyUnderPlan :InsurancePlan1) means that InsurancePolicy1 is under InsurancePlan1. For example, (:JoesPolicy22 olive:policyUnderPlan :CignaTexasGoldPlan)."""^^xsd:string ;
        olive:exampleTriple ":JoesPolicy22 olive:policyUnderPlan :CignaTexasGoldPlan"^^xsd:string ;
.

olive:postalCode a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:contactInformation ;
	rdfs:label "postal code"^^xsd:string ;
        skos:prefLabel "has the postal code"@en ;
        rdfs:range xsd:string ;
	rdfs:comment """This is a datatype property that links a person/place/address with the postal code in which it is located. Note that this property is more general than olive:zipCode and is designed to handle global postal codes. When possible, we'd prefer to list the full address.
For example, (:Person1 olive:postalCode \"98372\"^^xsd:string) indicates that Person1 is somehow affiliated with the 98372 postal code; perhaps they live there, or are currently at that location, or have a business incorporated in that location."""^^xsd:string ;
        olive:exampleTriple ":Person1 olive:postalCode \"98372\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;	
.

olive:policyPlanName a owl:DatatypeProperty ;
	rdfs:label "policy plan name"^^xsd:string ;
        skos:prefLabel "follows"@en ;
	rdfs:domain olive:InsurancePolicy ;
        rdfs:range xsd:string ;
	rdfs:comment """(:InsurancePolicy1 olive:policyPlanName \"STRING\"xsd:string) means that InsurancePolicy1 follows STRING. For example, (:MyInsPolicy1234 olive:policyPlanName \"Cigna PPO\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":MyInsPolicy1234 olive:policyPlanName \"Cigna PPO\"^^xsd:string"^^xsd:string ;
.

olive:precedes a owl:ObjectProperty , owl:TransitiveProperty ;
	rdfs:label "Precedes"^^xsd:string ;
	skos:prefLabel "precedes"^^xsd:string ;
	rdfs:subPropertyOf olive:temporallyRelatedTo ;
	rdfs:comment "A generic ordering relation indicating that the Subject has the same order as or comes before the Object. The 'greater than or equal to' symbol is often used for this relation."^^xsd:string ;
	olive:formerName "gist:precedes"^^xsd:string;
	.

olive:precludes
	a owl:ObjectProperty ;
	rdfs:label "precludes"^^xsd:string ;
	rdfs:subPropertyOf olive:governsBehavior ;
	olive:formerName "prevents"^^xsd:string ;
	skos:prefLabel "is inconsistent with"@en  ;
	skos:altLabel "precludes"@en, "disallows"@en, "is logically inconsistent with"@en , "logically precludes"@en , "logically disallows"@en  ;
	rdfs:comment """(:CommitmentOrIntention1 olive:precludes :Situation1) means that :Situation1 is logically inconsistent with CommitmentOrIntention1 such that CommitmentOrIntention1 cannot be satisfied while Situation1 obtains. For example, (:MyDesireToLoseWeight olive:precludes :MyEatingAPieceOfPie) means that the content of my desire to lose weight is logically inconsistent with a particular event in which I eat a piece of pie.

Note that this notion of \"precludes\" is a logical and NOT a causal one, although sometimes these logical preclusions also yield causal ones: my goal to lose weight is inconsistent with, say, my eating a piece of pie, and having that goal might cause me to abstain from eating pie; likewise, a piece of legislation that prohibits jaywalking may also have the effect that people do not jaywalk. But notice that these notions come apart. Very ineffective legislation may preclude behaviors in the sense that the legislation is logically inconsistent with the behavior, even if that legislation has no causal impact on the actual frequency of that behavior."""^^xsd:string ;
	rdfs:domain [owl:unionOf (olive:Commitment olive:Intention)] ;
	olive:exampleTriple ":MyDesireToLoseWeight olive:precludes :MyEatingAPieceOfPie"^^xsd:string ;
	rdfs:range olive:Situation;
	olive:formerName "gist:intentionPrecludes"^^xsd:string;
.

olive:prevents a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:affects ;
	rdfs:label "prevents"^^xsd:string ;
        skos:prefLabel "prevents"^^xsd:string ;
        rdfs:domain olive:Event ;
        rdfs:range olive:Event ;
	rdfs:comment """(:Event1 olive:prevents :Event2) means that Event1 prevents Event2. While causation and prevention is a complex issue, the goal of this property is to capture the intuitive sense of 'prevent'. For example, (:BillBreakingHisLeg olive:prevents :BillFinishingTheRace) indicates that Bill didn't finish the race because he broke his leg.

Prevention here means (at least) partial prevention. Striking a match may fail to get it to light if the match is wet. But it may also fail because there is insufficient oxygen in the environment.

Note that prevention is essentially causing something to not happen. So this property is closely related to olive:causes. See that comment for discussion on the domain and range being events."""^^xsd:string ;
        olive:exampleTriple ":BillBreakingHisLeg olive:prevents :BillFinishingTheRace"^^xsd:string ;
.

olive:primarilyAbout a owl:ObjectProperty, owl:FunctionalProperty ;
	rdfs:subPropertyOf olive:about ;
	rdfs:label "primarily about"^^xsd:string ;
        skos:prefLabel "is primarily about"@en ;
	skos:altLabel "primary subject"@en ;
        rdfs:domain olive:Content ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:Content1 olive:primarilyAbout :Thing1) means that the primary focus of Content1 is Thing1. For example, (:TheDefinitiveDiana-Book olive:primarilyAbout :PrincessDiana).

This property is just a functional version of olive:about."""^^xsd:string ;
        olive:exampleSubproperty olive:evaluatedThing ;
        olive:exampleTriple ":TheDefinitiveDiana-Book olive:primarilyAbout :PrincessDiana"^^xsd:string ;
.

olive:primaryKeyField a owl:ObjectProperty ;
	rdfs:label "primary key"^^xsd:string ;
        skos:prefLabel "is the primary key for"^^xsd:string ;
	rdfs:subPropertyOf olive:partOf ;
        rdfs:domain olive:Field-Data ;
        rdfs:range olive:Table-Data ;
	rdfs:comment """(:_Field_1 olive:primaryKeyField :_Table_1) means that Field1 is the primary key for Table1.

This property is reserved for cases where a single field is the primary key. In cases where the key is made up of multiple fields, another property must be used."""^^xsd:string ;
    olive:exampleTriple ":_Field_1 olive:primaryKeyField :_Table_1"^^xsd:string ;
.

olive:priorityScore a owl:DatatypeProperty ;
	rdfs:label "priority score"^^xsd:string ;
        skos:prefLabel "has a priority score of"@en ;
        rdfs:domain olive:Status ;
        rdfs:range xsd:decimal ;
	rdfs:comment """(:Status1 olive:priorityScore \"NUM\"^^xsd:decimal) means that artifacts with (see olive:hasStatus)  Status1 have a priority of NUM. For example, (olive:Status-Build olive:priorityScore \"120\"^^xsd:decimal)."""^^xsd:string ;
        olive:exampleTriple "olive:Status-Build olive:priorityScore \"120\"^^xsd:decimal"^^xsd:string ;
.

olive:producerOf a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:contentContributor ;
	rdfs:label "producer of"^^xsd:string ;
        skos:prefLabel "is the producer of"^^xsd:string ;
        rdfs:domain olive:Agent ;
        rdfs:range olive:Content ;
	rdfs:comment """(:Agent1 olive:producerOf :Content1) means that Agent1 produced Content1. For example, (:KennethUtt olive:producerOf :SilenceOfTheLambs)."""^^xsd:string ;
        olive:exampleTriple ":KennethUtt olive:producerOf :SilenceOfTheLambs"^^xsd:string ;
.

olive:prohibits a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:precludes ;
	rdfs:label "prohibits"^^xsd:string ;
	skos:prefLabel "prohibits"@en ;
	skos:altLabel "is violated by"@en , "proscribes"@en , "disallows"@en , "forbids"@en ;
	rdfs:domain olive:Commitment ;
	rdfs:range olive:Situation ;
	rdfs:comment """(:Commitment1 olive:prohibits :Situation1) means that :Situation1 violates a normative prohibition expressed in Commitment1. For example, (:TheFifthAmendmentToTheUSConstitution olive:prohibits :MyBeingCompelledToTestifyAgainstMyselfInCourtOn12-21-2021) means a specific case in which I am compelled to testify against myself in court violates the content of the fifth amendment to the US Constitution.

Note that this is a normative notion - it entails the logical notion represented by olive:precludes, but, crucially, it is not a causal notion."""^^xsd:string ;
	olive:exampleTriple ":TheFifthAmendmentToTheUSConstitution olive:precludes :MyBeingCompelledToTestifyAgainstMyselfInCourtOn12-21-2021"^^xsd:string ;
.

olive:propertyCount a owl:DatatypeProperty ;
	rdfs:label "property count"^^xsd:string ;
        skos:prefLabel "contains the following number of properties: "@en ;
	rdfs:domain olive:KnowledgeGraph ;
        rdfs:range xsd:integer ;
	rdfs:comment """(:KnowledgeGraph1 olive:propertyCount \"INTEGER\"xsd:integer) means that KnowledgeGraph1 contains the following number of properties:  INTEGER. For example, (:Graph21 olive:propertyCount \"12\"^^xsd:integer) means that Graph21 has 12 properties. Note that this includes object, datatype, and annotation properties."""^^xsd:string ;
        olive:exampleTriple ":Graph21 olive:propertyCount \"12\"^^xsd:integer"^^xsd:string ;
.

olive:propertyExpressesSensitiveInformation a owl:AnnotationProperty ;
	rdfs:label "property expresses sensitive information"^^xsd:string ;
	skos:prefLabel "expresses the following sensitive information:"@en ;
	rdfs:domain owl:Property ;
	rdfs:range olive:SensitiveInformationType ;
	rdfs:comment """(PROP olive:propertyExpressesSensitiveInformation SENSITIVE-INFO) means that for any triple of the form (SUBJ PROP OBJ), OBJ is sensitive information of the sort SENSITIVE-INFO.
	
Note that this is an annotation property. At this point, the meaning of the property is not enforced by inference."""^^xsd:string ;
	olive:exampleTriple "olive:hasSSN olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI"^^xsd:string ;
.

olive:propertySequenceNumber a owl:AnnotationProperty ;
	rdfs:label "property sequence number"^^xsd:string ;
	skos:prefLabel "occurs in some sequence of properties in the following place number:"@en ;
	rdfs:domain owl:Property ;
	rdfs:range xsd:nonNegativeInteger ;
	rdfs:comment """(:Property1 olive:propertySequenceNumber \"N\"^^xsd:nonNegativeInteger) means that Property1 occurs as the Nth member of some property sequence. For example, (olive:npiNUCCProviderTaxonomyCode-3 olive:propertySequenceNumber \"3\"^^xsd:nonNegativeInteger) means that olive:npiNUCCProviderTaxonomyCode-3 is the third element of some property sequence."""^^xsd:string ;
	olive:exampleTriple "olive:npiNUCCProviderTaxonomyCode-3 olive:propertySequenceNumber \"3\"^^xsd:nonNegativeInteger"^^xsd:string ;
.

olive:propertyRelevantToField a owl:AnnotationProperty ;
	rdfs:label "property relevant to field"^^xsd:string ;
        skos:prefLabel "has meaning that can be (partly) denoting using"^^xsd:string ;
        rdfs:domain olive:Field-Data ;
        rdfs:range owl:Property ;
	rdfs:comment """(:_Field_A olive:propertyRelevantToField PROP) means that part of the logical meaning of FieldA can be communicated by making assertions using PROP. Suppose that you had a gradebook with a field \"leter_grade\" in :FieldG. Then you could show that this meaning was captured by some :finalLetterGrade property by stating (:FieldG olive:propertyRelevantToField :finalLetterGrade).

Note that this is an annotation property. At this point, the property only documents the meaning. It does not enforce it via inference."""^^xsd:string ;
        olive:exampleTriple ":FieldG olive:propertyRelevantToField :finalLetterGrade"^^xsd:string ;
.

olive:propositionObject a owl:AnnotationProperty ;
	rdfs:label "proposition object"^^xsd:string ;
	skos:prefLabel "has as its object"@en ;
	rdfs:domain olive:Proposition ;
	rdfs:range owl:Thing ;
	rdfs:comment """(:Proposition1 olive:propositionObject :Thing1) means that the content of Proposition1 is expressable as a triple with Thing1 in the object place.
	
	See also olive:Proposition, olive:propositionSubject, and olive:propositionProperty."""^^xsd:string ;
.

olive:propositionProperty a owl:AnnotationProperty ;
	rdfs:label "proposition property"^^xsd:string ;
	skos:prefLabel "has as its property"@en ;
	rdfs:domain olive:Proposition ;
	rdfs:range owl:Property ;
	rdfs:comment """(:Proposition1 olive:propositionProperty :Property1) means that the content of Proposition1 is expressable as a triple with Property1 in the property place.
	
	See also olive:Proposition, olive:propositionObject, and olive:propositionSubject."""^^xsd:string ;
.

olive:propositionSubject a owl:AnnotationProperty ;
	rdfs:label "proposition subject"^^xsd:string ;
	skos:prefLabel "has as its subject"@en ;
	rdfs:domain olive:Proposition ;
	rdfs:range owl:Thing ;
	rdfs:comment """(:Proposition1 olive:propositionSubject :Thing1) means that the content of Proposition1 is expressable as a triple with Thing1 in the subject place.
	
	See also olive:Proposition, olive:propositionObject, and olive:propositionProperty."""^^xsd:string ;
.

olive:providerForClaim a owl:ObjectProperty ;
	rdfs:label "provider for claim"^^xsd:string ;
        skos:prefLabel "is the provider for"@en ;
	rdfs:subPropertyOf olive:authorOf ;
        rdfs:domain olive:MedicalCareProvider ;
        rdfs:range olive:InsuranceClaim ;
	rdfs:comment """(:MedicalCareProvider1 olive:providerForClaim :InsuranceClaim1) means that MedicalCareProvider1 is the provider for InsuranceClaim1. For example, (:MeriterHospital olive:providerForClaim :Claim257) means that Meriter was the provider for the medical care event(s) that are the basis for Claim257."""^^xsd:string ;
        olive:exampleTriple ":MeriterHospital olive:providerForClaim :Claim257"^^xsd:string ;
.

olive:publicationYear a owl:DatatypeProperty ;
	rdfs:label "publication year"^^xsd:string ;
        skos:prefLabel "was published in"@en ;
        rdfs:domain olive:Content ;
        rdfs:range xsd:integer ;
	rdfs:comment """This is the datatype version of olive:hasPublicationDate, where it relates a given piece of content to the year in which it was published. For example (:TheGreatGatsby olive:publicationYear \"1925\"^^xsd:integer)."""^^xsd:string ;
        olive:exampleTriple ":TheGreatGatsby olive:publicationYear \"1925\"^^xsd:integer"^^xsd:string ;
.

olive:publisherOf a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:contentContributor ;
	rdfs:label "publisher of"^^xsd:string ;
        skos:prefLabel "is the publisher of"^^xsd:string ;
        rdfs:domain olive:Agent ;
        rdfs:range olive:Content ;
	rdfs:comment """(:Agent1 olive:publisherOf :Content1) means that Agent1 published Content1. For example, (:LittleBrownAndCompany olive:publisherOf :CatcherInTheRye)."""^^xsd:string ;
        olive:exampleTriple ":LittleBrownAndCompany olive:publisherOf :CatcherInTheRye"^^xsd:string ;
.

olive:qagConversion a owl:DatatypeProperty ;
	rdfs:label "qag conversion"^^xsd:string ;
        skos:prefLabel "converts to a decimal value of"@en ;
        rdfs:domain olive:QualitativeAmount-Generic ;
        rdfs:range xsd:decimal ;
	rdfs:comment """(:Assessment1 olive:qagConversion \"NUM\"^^xsd:decimal) means that Assessment1 can be converted to the decimal NUM. This is a way of converting things like olive:Amount-Low to .25, olive:Amount-Medium to .5, and so on. Of course, these values won't be correct in every circumstance, as qualitative assessments. However, it does allow us to order the amounts and do some rough back-of-the-napkin math to draw conclusions from qualitative assessments."""^^xsd:string ;
        olive:exampleTriple "olive:Amount-Low olive:qagConversion \".25\"^^xsd:decimal"^^xsd:string ;
.

olive:qualitativeStrength a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasAmount ;
	rdfs:label "qualitative strength"^^xsd:string ;
        skos:prefLabel "has the qualitative amount: "@en ;
        rdfs:domain owl:Thing ;
        rdfs:range olive:QualitativeAssessment ;
	rdfs:comment """(:Thing1 olive:qualitativeStrength :Assessment1) means that Thing1 has the strength of Assessment1. For example, suppose I am recommending a realtor for you to use, and I think they are pretty good, but not amazing. Then we might say (:RealtorRecommendation olive:qualitativeStrength olive:ModeratelyHigh).

Qualitative assessments are tricky. They are frequently contextual (I feel moderately warm right now, but I might feel warmer/cooler depending on the temperature outside.). However, they are important for accurately reporting people's assessments of things, as often folks will say they 'really like' something rather than assigning it a score of 72 on a 100 point scale. On the other hand, you might prefer to translate qualitative reports to quantitative ones in this way to make calculations easier in the future."""^^xsd:string ;
        olive:exampleTriple ":RealtorRecommendation olive:qualitativeStrength olive:ModeratelyHigh"^^xsd:string ;
.

olive:quantitativeStrength a owl:DatatypeProperty ;
	rdfs:label "quantitative strength"^^xsd:string ;
        skos:prefLabel "has a strength of"@en ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:decimal ;
	rdfs:comment """(:Thing1 olive:quantitativeStrength NUM) means that Thing1 is NUM strong. For example, (:RealtorRecommendation olive:quantitativeStrength \".72\"^^xsd:decimal) means that the realtor recommendation has a strength of .72.

This property is a datatype variant of olive:hasMagnitude. It takes one directly to the numeric strength rather than being mediated by a magnitude.

There is no constraint on what a given strength means: how do I interpret .72 as a strength? By default, assume that strengths are bound from 0 to 1, with .5 being neutral, 0 being as strongly negative, and 1 being as strongly positive as one can be. This follows the probability calculus: assigning a probability of 0 means certainty that the thing is false/won't happen, 1 that it is certainly true/will happen."""^^xsd:string ;
        olive:exampleTriple ":RealtorRecommendation olive:quantitativeStrength \".72\"^^xsd:decimal"^^xsd:string ;
.

olive:queriesDatabase a owl:ObjectProperty ;
	rdfs:label "olive:queries database"^^xsd:string ;
        skos:prefLabel "is intended to query"@en ;
	rdfs:subPropertyOf olive:connectedTo ;
        rdfs:domain olive:Query ;
        rdfs:range olive:Database ;
	rdfs:comment """(:Query1 olive:olive:queriesDatabase :Database1) means that Query1 is intended to query Database1. For example, (:UMLSQuery olive:olive:queriesDatabase :UMLSDB).

Note that even though the query is intended for a given database doesn't mean that it cannot be run against other DBs. This property is not functional, and as such it could be documented as intended for multiple DBs."""^^xsd:string ;
        olive:exampleTriple ":UMLSQuery olive:olive:queriesDatabase :UMLSDB"^^xsd:string ;
.

olive:queriesGraph a owl:ObjectProperty ;
	rdfs:label "queries graph"^^xsd:string ;
        skos:prefLabel "is intended to query"@en ;
	rdfs:subPropertyOf olive:connectedTo ;
        rdfs:domain olive:Query ;
        rdfs:range olive:KnowledgeGraph ;
	rdfs:comment """(:Query1 olive:queriesGraph :KnowledgeGraph1) means that Query1 is intended to query KnowledgeGraph1. For example, (:UMLSQuery olive:queriesGraph :UMLSGraph).

Note that even though the query is intended for a given knowledge graph doesn't mean that it cannot be run against other graphs. This is not functional, and as such it could be intended for multiple graphs."""^^xsd:string ;
        olive:exampleTriple ":UMLSQuery olive:queriesGraph :UMLSGraph"^^xsd:string ;
.

olive:queryPrivacyBoolean a owl:DatatypeProperty ;
	rdfs:label "query privacy boolean"^^xsd:string ;
        skos:prefLabel "has a privacy boolean of"@en ;
	rdfs:domain olive:Query ;
        rdfs:range xsd:boolean ;
	rdfs:comment """(:Query1 olive:queryPrivacyBoolean \"BOOLEAN\"xsd:boolean) means that Query1 has a privacy boolean of BOOLEAN. For example, (:UMLSQuery olive:queryPrivacyBoolean \"false\"^^xsd:boolean) means that the UMLS query is not private, which is to say that it is accessible to all users of the system."""^^xsd:string ;
        olive:exampleTriple ":UMLSQuery olive:queryPrivacyBoolean \"false\"^^xsd:boolean"^^xsd:string ;
.

olive:querySentence a owl:DatatypeProperty, owl:FunctionalProperty ;
	rdfs:label "query sentence"^^xsd:string ;
        skos:prefLabel "has the following query sentence:"@en ;
	rdfs:subPropertyOf olive:text ;
        rdfs:domain olive:Query ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Query1 olive:querySentence \"STRING\"xsd:string) means that Query1 has the following query sentence: STRING. For example, (:UMLSQuery olive:querySentence \"SELECT DISTINCT ?lcase_out.... = \"en\")}\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":UMLSQuery olive:querySentence \"SELECT DISTINCT ?lcase_out.... = \"en\")}\"^^xsd:string"^^xsd:string ;
.

olive:quotedCategorizedBy a owl:AnnotationProperty ;
	rdfs:label "quoted categorized By"^^xsd:string ;
        skos:prefLabel "is a"@en ;
	rdfs:domain rdfs:Resource ;
        rdfs:range olive:OntologyTermType ;
	rdfs:comment """(:Resource1 olive:quotedCategorizedBy :OntologyTermType1) means that Resource1 is a OntologyTermType1. For example, (:BikeMessenger olive:quotedCategorizedBy :StubTerm).

Note the 'quoted'. This is because this property mentions rather than uses the resource. We aren't saying that every bike messenger, or even that the concept of bike messenger, is stubby. We are saying that the term as it exists in the ontology is stubby. Of course, this status may change as the class gets fleshed out. Make sure to update these assertions when the ontology changes!"""^^xsd:string ;
        olive:exampleTriple ":BikeMessenger olive:quotedCategorizedBy olive:StubTerm"^^xsd:string ;
.

olive:reasoningBoolean a owl:DatatypeProperty ;
	rdfs:label "reasoning boolean"^^xsd:string ;
        skos:prefLabel "has a reasoning boolean of"@en ;
	rdfs:domain olive:Query ;
        rdfs:range xsd:boolean ;
	rdfs:comment """(:Query1 olive:reasoningBoolean \"BOOLEAN\"xsd:boolean) means that Query1 has a reasoning boolean of BOOLEAN. For example, (:UMLSQuery olive:reasoningBoolean \"true\"^^xsd:boolean) would mean that UMLSQuery uses reasoning."""^^xsd:string ;
        olive:exampleTriple ":UMLSQuery olive:reasoningBoolean \"true\"^^xsd:boolean"^^xsd:string ;
.

olive:reasoningLevel a owl:ObjectProperty ;
	rdfs:label "reasoning level"^^xsd:string ;
        skos:prefLabel "uses a reasoning level of"@en ;
	rdfs:subPropertyOf olive:categorizedBy ;
        rdfs:domain olive:Query-SPARQL ;
        rdfs:range olive:ReasoningLevel ;
	rdfs:comment """(:Query-SPARQL1 olive:reasoningLevel :ReasoningLevel1) means that Query-SPARQL1 uses a reasoning level of ReasoningLevel1. For example, (:UMLSQuery olive:reasoningLevel olive:SL-ReasoningLevel) would mean that the UMLS query uses SL reasoning."""^^xsd:string ;
        olive:exampleTriple ":UMLSQuery olive:reasoningLevel olive:SL-ReasoningLevel"^^xsd:string ;
.

olive:reactivationDate a owl:ObjectProperty;
	rdfs:subPropertyOf olive:timeOf ;
	rdfs:label "reactivation date"^^xsd:string ;
    skos:prefLabel "has the following reactivation date:"@en ;
    rdfs:domain owl:Thing ;
    rdfs:range olive:TimeInstant ;
	rdfs:comment """This links an individual with the date on which it was reactivated. For example (:DrRicesNPI olive:reactivationDate [olive:universalDate \"02-13-2021\"^^xsd:date])."""^^xsd:string ;
    olive:exampleTriple ":DrRicesNPI olive:reactivationDate [olive:universalDate \"02-13-2021\"^^xsd:date]"^^xsd:string ;
.

olive:recognizes
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:governs ;
	rdfs:label "recognizes"^^xsd:string ;
	skos:prefLabel "recognizes the legitimacy of"@en ;
	rdfs:comment "(:Agent1 olive:recognizes :Agent2) means that Agent1 formally acknowledges the standing of Agent2, such as when the UN recognizes a sovereign nation; (:UN olive:recognizes :Uruguay). It can also be less formal, such as when Kanye reocgnizes an artist as being good. It implies the authority on the part of the recognizer over the recognized, and as such is a subproperty of olive:governs."^^xsd:string ;
	rdfs:domain olive:Agent ;
	rdfs:range olive:Agent ;
	olive:exampleTriple ":UN olive:recognizes :Uruguay"^^xsd:string; 
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:recognizes"^^xsd:string;
.

olive:recommendedThing a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:about ;
	rdfs:label "recommended thing"^^xsd:string ;
        skos:prefLabel "includes a recommendation regarding"@en ;
        rdfs:domain olive:Recommendation ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:Recommendation1 olive:recommendedThing :Thing1) means that Recommendation1 is (partly) a recommendation for Thing1. For example, (:DrRecommendatioon olive:recommendedThing :DrRice) means that Dr Rice is being recommended.

Despite the usual connotation of 'recommended', recommendations can be both positive and negative. So, you need to see the degree of the recommendation to know whether, say, we are approving of Dr Rice or discouraging using her as your physician."""^^xsd:string ;
        olive:exampleTriple ":DrRecommendatioon olive:recommendedThing :DrRice"^^xsd:string ;
.

olive:recommendedTo a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:toAgent ;
	rdfs:label "recommended to"^^xsd:string ;
        skos:prefLabel "is given to"@en ;
        rdfs:domain olive:Recommendation ;
        rdfs:range olive:Agent ;
	rdfs:comment """(:Recommendation1 olive:recommendedTo :Agent1) means that Agent1 is the intended recipient of Recommendation1. For example, (:DrRecommendation olive:recommendedTo :JoePatient) means that the Dr Recommendation is for Joe's benefit."""^^xsd:string ;
        olive:exampleTriple ":DrRecommendation olive:recommendedTo :JoePatient"^^xsd:string ;
.

olive:recommender a owl:ObjectProperty ;
	rdfs:subPropertyOf  olive:authorOf ;
	rdfs:label "recommender"^^xsd:string ;
        skos:prefLabel "recommends"@en ;
        rdfs:domain olive:Agent ;
        rdfs:range olive:Recommendation ;
	rdfs:comment """(:Agent1 olive:recommender :Recommendation1) means that Recommendation1 was 'authored' by Agent1. For example, (:RogerEbert olive:recommender :EbertsReviewOfMovieX) indicates that the Ebert's review was made by him.

We will default assuming that all recommendations are made sincerely. Of course, there are cases where someone may try to maniuplate another with deceitful recommendations. If those turn out to be important to model, we should carefully consider creating a new class or investigate whether the semantics of olive:Recommendation are consistent with such deceitful recommendations."""^^xsd:string ;
        olive:exampleTriple ":RogerEbert olive:recommender :EbertsReviewOfMovieX"^^xsd:string ;
.

olive:recordedOn a owl:ObjectProperty ;
	rdfs:label "recorded on"^^xsd:string ;
	skos:prefLabel "was recorded at/on"@en ;
	rdfs:subPropertyOf olive:creationTime ;
	rdfs:comment "This reflects the date and time (if known) that some content was recorded. Note that the recorded time may differ from the posted time."^^xsd:string ;
	rdfs:domain olive:Content ;
	rdfs:range olive:TimeInstant ;
	olive:formerName "gist:recordedOn"^^xsd:string;
.

olive:regulates a owl:ObjectProperty ;
	rdfs:label "regulates"^^xsd:string ;
        skos:prefLabel "influences"@en ;
	skos:altLabel "applies to"@en , "regulates"@en, "has regulatory influence over"@en ;
        rdfs:domain owl:Thing ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:Thing1 olive:regulates :Thing2) means that Thing1 has some sort of regulatory influence over Thing2, whether this influence is actual or normative/suggestive. This may be agential, as when an agent controls an object or another agent (see olive:controls), or more abstract, such as the motivational influence that a goal has on the agent whose goal it is (see olive:hasGoal) or normative force, such as the binding \"influence\" that a law has with respect to the actions it applies to (see olive:governsBehavior). For example, (:OliveEmployeeHandbook olive:regulates :JoeOliveEmployee) means that the Olive handbook holds influence over Joe. This can be true even if Joe disregards the handbook if it means that the handbook is normatively (perhaps legally) binding for Joe. It could also hold influence if it wasn't binding but Joe nonetheless used the handbook as a set of guidelines for his actions.

This is the most general property of this sort, and as such one should often find subproperty that is more specific to a given situation. One might be tempted to make olive:affects a subproperty of this; however, as is indicated by the example from above, olive:regulates encompasses cases in which something like the content of a handbook applies to an agent or action even when that agent disregards the content of the handbook and/or the action fails to be in accordance with its prescriptions. This is a clear case in which the content of the handbook regulates the agent/action without affecting them."""^^xsd:string ;
        olive:exampleSubproperty olive:governsBehavior, olive:controls ;
        olive:exampleTriple ":OliveEmployeeHandbook olive:regulates :JoeOliveEmployee"^^xsd:string ;
.

olive:relatedToClass a owl:AnnotationProperty ;
	rdfs:label "related to class"^^xsd:string ;
	skos:prefLabel "is related to"@en ;
	rdfs:domain owl:Thing ;
	rdfs:range owl:Class ;
	rdfs:comment """(:Thing1 olive:relatedToClass :Class1) means that Thing1 is somehow related to :Class1. This is an extremely general relationship (akin to skos:related) and should be used only when a more precise characterization is unavailable (and, even then, it is worth asking whether an olive:relatedToClass triple is warranted)."""^^xsd:string ;
.

olive:requestedThing a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:connectedTo ;
	olive:typedSubPropertyOf olive:eventInvolves ;
	rdfs:label "requested thing"^^xsd:string ;
        skos:prefLabel "is a request for"@en ;
        rdfs:domain [owl:unionOf (olive:Request olive:RequestingSomething)] ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:RequestOrRequestingSomething1 olive:requestedThing :Thing1) means that RequestOrRequestingSomething1 is (partly) a request for Thing1. For example, (:Prescription23 olive:requestedThing :SampleOfVicodin) the prescription in question is for a particular sample ofVicodin.

This is a peculiar property because it allows for either an instance of olive:Request (a content) or an instance of olive:RequestingSomething (an event) to stand as its subject. (For this reason, it is not a subproperty of olive:eventInvolves.) As a rule of thumb, if the information that is being represented is at the level of requester/requestee/requested only (and we don't care about representing more specific information), then it's likely best to simply use an instance of olive:RequestingSomething and relate it to the various role players via olive:conveysFrom/olive:conveysTo/olive:requestedThing. If the content of the request that needs to be represented is richer than this, then it's likely best to relate an instance of olive:Request to an instance of olive:RequestingSomething via olive:communicatedContent and use the instance of olive:Request as the focal object for modeling the nuances of the request.

Compare with olive:requestedType."""^^xsd:string ;
        olive:exampleTriple ":DrBobsRequestEvent olive:requestedThing :SampleOfVicodin"^^xsd:string ;
.

olive:requestedType a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:aboutClass ;
	rdfs:label "requested type"^^xsd:string ;
        skos:prefLabel "is a request for"@en ;
        rdfs:domain [owl:unionOf (olive:Request olive:RequestingSomething)] ;
        rdfs:range owl:Class ;
	rdfs:comment """(:RequestOrRequestingSomething1 olive:requestedType :Type1) means that RequestOrRequestingSomething1 is (partly) a request for some instance of Class1. For example, (:Prescription23 olive:requestedType :Ibuprofen-800mg) the prescription in question is for 800mg tablets of Ibuprofen.

This is a peculiar property because it allows for either an instance of olive:Request (a content) or an instance of olive:RequestingSomething (an event) to stand as its subject. As a rule of thumb, if the information that is being represented is at the level of requester/requestee/requested only (and we don't care about representing more specific information), then it's likely best to simply use an instance of olive:RequestingSomething and relate it to the various role players via olive:conveysFrom/olive:conveysTo/olive:requestedType. If the content of the request that needs to be represented is richer than this, then it's likely best to relate an instance of olive:Request to an instance of olive:RequestingSomething via olive:communicatedContent and use the instance of olive:Request as the focal object for modeling the nuances of the request.

Compare with olive:requestedThing."""^^xsd:string ;
        olive:exampleTriple ":DrBobsRequestEvent olive:requestedType :Vicodin"^^xsd:string ;
.

olive:requires
	a owl:ObjectProperty ;
	rdfs:label "requires"^^xsd:string ;
	skos:prefLabel "requires"@en ;
	rdfs:subPropertyOf olive:allows ;
	rdfs:comment """(:Commitment1 olive:requires :Situation1) means that Situation1 (partly) satisfies a normative requirement of Commitment1. For example (:ParentalCommand1 olive:requires :RoomCleaning01) means that the parental command was partially satisfied by the room cleaning; Mom told me to clean my room, and so I had to."""^^xsd:string ;
	rdfs:domain olive:Commitment ;
	rdfs:range olive:Situation ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:exampleTriple ":ParentalCommand1 olive:requires :RoomCleaning01"^^xsd:string ;
	olive:formerName "gist:requires"^^xsd:string;
.

olive:ribbonName a owl:DatatypeProperty, owl:FunctionalProperty, owl:InverseFunctionalProperty ;
    rdfs:subPropertyOf olive:identifyingText ;
    rdfs:label "Ribbon name"^^xsd:string ;
    skos:prefLabel "known to RibbonHealth as"@en ;
    rdfs:domain owl:Thing ;
    rdfs:range xsd:string ;
    rdfs:comment """This links some entity to the name which RibbonHealth uses consistently to name unique entities, such as Insurance Carriers."""^^xsd:string ;
        olive:exampleTriple ":MyInsuranceCarrier olive:ribbonName \"ACME Insurance of Oregon\"^^xsd:string"^^xsd:string ;
    .

olive:ribbonUuid a owl:DatatypeProperty, owl:FunctionalProperty, owl:InverseFunctionalProperty ;
	rdfs:subPropertyOf olive:identifyingText ;
	rdfs:label "ribbonUuid"^^xsd:string ;
        skos:prefLabel "has a RibbonHealth UUID of"@en ;
        rdfs:range xsd:string ;
	rdfs:comment """The RibbonHealth data has a key field for 'uuid', and this allows us to pick out the same entity every time we access the RibbonHealth data. olive:ribbonUuid is reserved for this relationship.""" ;
        olive:exampleTriple ":MyInsurancePlan olive:ribbonUuid \"77f37edf-a2a8-4303-ba95-7f84ecb9e94b\"^^xsd:string"^^xsd:string ;
.

olive:riskOfMortality-DRG a owl:ObjectProperty ;
	rdfs:label "DRG risk of mortality"^^xsd:string ;
        skos:prefLabel "has the following risk of mortality:"@en ;
	rdfs:subPropertyOf olive:qualitativeStrength ;
        rdfs:domain olive:MedicalCareEvent ;
        rdfs:range [owl:oneOf (olive:Amount-Minimal olive:Amount-Low olive:Amount-Medium olive:Amount-High olive:Amount-Maximal) ];
	rdfs:comment """(:MedicalCareEvent1 olive:riskOfMortality-DRG :QualitativeAssessment1) means that MedicalCareEvent1 has the following risk of mortality: QualitativeAssessment1. For example, (:JimsHeartSurgery olive:riskOfMortality-DRG olive:Amount-High).

The values are often given in integers. Here, 0 maps to minimal, 1 to low, 2 to medium, 3 to high, and 4 to maximal. We should not understand minimal as no risk or maximal as guarantees of death."""^^xsd:string ;
        rdfs:seeAlso "https://apps.3mhis.com/docs/Groupers/All_Patient_Refined_DRG/Methodology_overview_GRP041/grp041_aprdrg_meth_overview.pdf" ;
        olive:exampleTriple ":JimsHeartSurgery olive:riskOfMortality-DRG olive:Amount-High"^^xsd:string ;
.

olive:routingNumber a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:text ;
	rdfs:label "routing number"^^xsd:string ;
        skos:prefLabel "has the routing number"@en ;
        rdfs:domain olive:Check ;
        rdfs:range xsd:string ;
	rdfs:comment """Relates a olive:Check to its routing number. Not the same as the account number (olive:accountNumber) or check number (olive:checkNumber)."""^^xsd:string ;
        olive:exampleTriple ":MyCheck olive:routingNumber \"1125523434\"^^xsd:string"^^xsd:string ;
.

olive:rowCount a owl:DatatypeProperty, owl:FunctionalProperty ;
	rdfs:subPropertyOf olive:associatedCount ;
	rdfs:label "row count"^^xsd:string ;
        skos:prefLabel "has the following number of rows:"^^xsd:string ;
        rdfs:domain olive:Table-Data ;
        rdfs:range xsd:integer ;
	rdfs:comment """(:_Table_1 olive:rowCount INT) means that Table1 has INT rows. For example, (:CaseysGradebook olive:rowCount 32) means that there are 32 rows in Casey's gradebook (likely because there are 32 students).

Note that this count excludes the header of the table."""^^xsd:string ;
        olive:exampleTriple ":CaseysGradebook olive:rowCount 32"^^xsd:string ;
.

olive:rowReferent a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:about ;
	rdfs:label "row referent"^^xsd:string ;
        skos:prefLabel "refers to"^^xsd:string ;
        rdfs:domain olive:Row-Data ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:_Row_1 olive:rowReferent :_Thing_1) means that Row1 refers to Thing1. For example, if you had a table about student grades, likely each row would describe a student. So you could say (:_GradebookRow12 olive:rowReferent :_JimSmith) to indicate that Row12 is about Jim."""^^xsd:string ;
        olive:exampleTriple ":_GradebookRow12 olive:rowReferent :_JimSmith"^^xsd:string ;
.

olive:sameTimeAs
	a owl:ObjectProperty ;
        rdfs:subPropertyOf olive:equivalentTo ;
	rdfs:label "same time as"^^xsd:string ;
	skos:prefLabel "is the same as"@en ;
	rdfs:comment "We can have two local time instants refer to the same time, the same universal time."^^xsd:string ;
	rdfs:domain olive:TimeInstant ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range olive:TimeInstant ;
	olive:formerName "gist:sameTimeAs"^^xsd:string;
.

olive:seller a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:doneByAgent ;
	rdfs:label "seller" ;
	skos:prefLabel "involves (as the seller)"@en ;
	rdfs:domain olive:BuyingAndSelling ;
	rdfs:range olive:Agent ;
	rdfs:comment """(:BuyingAndSelling1 olive:seller :Agent1) means that Agent1 plays the seller role in BuyingAndSelling1. For example, (:NickBuyingANewCar olive:seller :CedarParkToyota) means that Cedar Park Toyota is the seller in the event in which Nick buys a new car.

	Note that in cases in which the subject has no clear distinction between buyer and seller (as in a non-monetary trade), one can still make use of olive:seller to represent one of the role players in the exchange.""" ;
	olive:exampleTriple ":NickBuyingANewCar olive:seller :CedarParkToyota" ;
	rdfs:seeAlso olive:BuyingAndSelling, olive:boughtFor, olive:buyer, olive:sold ;
.

olive:sellsType a owl:AnnotationProperty ;
	rdfs:label "sells type"^^xsd:string ;
    skos:prefLabel "sells"@en ;
	rdfs:subPropertyOf olive:relatedToClass ;
    rdfs:domain olive:Agent ;
    rdfs:range owl:Class ;
	rdfs:comment """(:Agent1 olive:sellsType :Class1) means that Agent1 can or does sell one or more instances of Class1. For example, (:Motorola olive:sellsType :SmartPhone). This property is meant to indicate an ongoing disposition/ability to sell."""^^xsd:string ;
    olive:exampleTriple ":Motorola olive:sellsType :SmartPhone"^^xsd:string ;
.

olive:seriesNumber a owl:DatatypeProperty ;
	rdfs:label "series number"^^xsd:string ;
	skos:prefLabel "is number"@en ;
	rdfs:domain owl:Thing ;
	rdfs:range xsd:nonNegativeInteger ;
	olive:assertibility olive:NotAssertible ;
	rdfs:comment """(:Thing1 olive:seriesNumber N) means that :Thing1 is the Nth number in some series. For example, (:Erkenntnis_vol_7 olive:seriesNumber \"7\"^^xsd:nonNegativeInteger) means that :Erkenntnis_vol_7 is the seventh in some series. This is a very general property the primary use of which is to serve as a super-property for more specific (and useful) properties, e.g. olive:volumeNumber and olive:issueNumber. As such, the latter should be preferred when directly representing knowledge.""" ;
	olive:exampleTriple ":Erkenntnis_vol_7 olive:seriesNumber \"7\"^^xsd:nonNegativeInteger"^^xsd:string ;
.

olive:serviceCode a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:text ;
	rdfs:label "service code"^^xsd:string ;
        skos:prefLabel "has service code"@en ;
        rdfs:domain [a owl:Class; 
		     owl:unionOf (olive:LineItem olive:InsuranceClaim olive:Event) ;] ;
        rdfs:range xsd:string ;
	rdfs:comment """(:LineItem1 olive:serviceCode \"CODE\"^^xsd:string) means that LineItem1 is categorized by service code CODE. For example, (:Procedure01 olive:serviceCode \"D0120\"^^xsd:string) indicates that Procedure01 is characterized by D0120, which can in turn be related to its indicating an oral cancer evaluation.

For more specific codes, such as a CPT code or DCT code, one can create/use the appropriate subproperties."""^^xsd:string ;
        olive:exampleTriple ":Procedure01 olive:serviceCode \"D0120\"^^xsd:string"^^xsd:string ;
	rdfs:seeAlso "https://ushik.ahrq.gov/ViewItemDetails?system=sdo&itemKey=133102000"^^xsd:string ;
.

olive:serviceCode-Condition a owl:DatatypeProperty ;
	rdfs:label "condition service code"^^xsd:string ;
        skos:prefLabel "has the condition code"@en ;
	rdfs:subPropertyOf olive:serviceCode ;
	rdfs:comment """The subproperty of olive:serviceCode for condition codes."""^^xsd:string ;
.

olive:serviceCode-DRG a owl:DatatypeProperty ;
	rdfs:label "DRG service code"^^xsd:string ;
        skos:prefLabel "has the DRG code"@en ;
	skos:altLabel "Diagnosis-Related Group code"@en ;
	rdfs:subPropertyOf olive:serviceCode ;
	rdfs:comment """The subproperty of olive:serviceCode for Diagnosis-Related Group (DRG) codes."""^^xsd:string ;
.

olive:serviceCode-ICD10Admitting a owl:DatatypeProperty ;
	rdfs:label "ICD10 admitting service code"^^xsd:string ;
        skos:prefLabel "has the ICD10 admitting code"@en ;
	rdfs:subPropertyOf olive:serviceCode ;
	rdfs:comment """The subproperty of olive:serviceCode for ICD10 admitting codes."""^^xsd:string ;
.

olive:serviceCode-ICD10Diagnosis a owl:DatatypeProperty ;
	rdfs:label "ICD10 diagnosis service code"^^xsd:string ;
        skos:prefLabel "has the ICD10 diagnosis code"@en ;
	rdfs:subPropertyOf olive:serviceCode ;
	rdfs:comment """The subproperty of olive:serviceCode for ICD10 diagnosis codes."""^^xsd:string ;
.

olive:serviceCode-ICD10PrincipalDiagnosis a owl:DatatypeProperty ;
	rdfs:label "ICD10PrincipalDiagnosis service code"^^xsd:string ;
        skos:prefLabel "has the ICD10 principal diagnosis code"@en ;
	rdfs:subPropertyOf olive:serviceCode ;
	rdfs:comment """The subproperty of olive:serviceCode for ICD10 principal diagnosis codes."""^^xsd:string ;
.

olive:serviceCode-NUBC a owl:DatatypeProperty ;
	rdfs:label "NUBC code"^^xsd:string ;
        skos:prefLabel "has the NUBC code"@en ;
	rdfs:subPropertyOf olive:serviceCode ;
	rdfs:comment """The subproperty of olive:serviceCode for National Uniform Billing Committee (NUBC) codes."""^^xsd:string ;
	olive:mapsTo-ServiceCode "NU"^^xsd:string ;
.

olive:serviceCode-Occurrence a owl:DatatypeProperty ;
	rdfs:label "occurrence service code"^^xsd:string ;
        skos:prefLabel "has the occurrence code"@en ;
	rdfs:subPropertyOf olive:serviceCode ;
	rdfs:comment """The subproperty of olive:serviceCode for occurrence codes."""^^xsd:string ;
.

olive:serviceCode-Value a owl:DatatypeProperty ;
	rdfs:label "value service code"^^xsd:string ;
        skos:prefLabel "has the value code"@en ;
	rdfs:subPropertyOf olive:serviceCode ;
	rdfs:comment """The subproperty of olive:serviceCode for value codes."""^^xsd:string ;
.

olive:severityOfIllness-DRG a owl:ObjectProperty ;
	rdfs:label "DRG severity of illness"^^xsd:string ;
        skos:prefLabel "has the following severity:"@en ;
	rdfs:subPropertyOf olive:qualitativeStrength ;
        rdfs:domain olive:MedicalCareEvent ;
        rdfs:range [owl:oneOf (olive:Amount-Minimal olive:Amount-Low olive:Amount-Medium olive:Amount-High olive:Amount-Maximal) ];
	rdfs:comment """(:MedicalCareEvent1 olive:severityOfIllness-DRG :QualitativeAssessment1) means that MedicalCareEvent1 has the following severity: QualitativeAssessment1. For example, (:JimsHeartSurgery olive:severityOfIllness-DRG olive:Amount-Maximal).

The values are often given in integers. Here, 0 maps to minimal, 1 to low, 2 to medium, 3 to high, and 4 to maximal. These values corespond with the extent of physiological decompensation or organ system loss of function."""^^xsd:string ;
        rdfs:seeAlso "https://apps.3mhis.com/docs/Groupers/All_Patient_Refined_DRG/Methodology_overview_GRP041/grp041_aprdrg_meth_overview.pdf" , "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4894328/#:~:text=By%20convention%2C%20severity%20of%20illness,to%20the%20likelihood%20of%20dying." ;
        olive:exampleTriple ":JimsHeartSurgery olive:severityOfIllness-DRG olive:Amount-High"^^xsd:string ;
.

olive:situationHasAssociatedMonetaryValue a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:eventInvolves ;
	rdfs:label "event has associated cost"^^xsd:string ;
	skos:prefLabel "is associated in some way with a cost of"@en ;
	rdfs:domain olive:Situation ;
	rdfs:range olive:Monetary ;
	rdfs:comment """(:Situation1 olive:situationHasAssociatedMonetaryValue [olive:decimalValue \"500\"^^xsd:double ; olive:hasUoM olive:_USDollar ]) means that Situation1 is in some way associated with a monetary value of $500. This is a very general property and should almost never be used for making assertions (it might, however, be useful for queries).""" ;
	olive:exampleTriple ":Situation1 olive:situationHasAssociatedMonetaryValue [olive:decimalValue \"500\"^^xsd:double ; olive:hasUoM olive:_USDollar ]" ;
.

olive:sold a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:thingTransferred ;
	rdfs:label "sold" ;
	skos:prefLabel "is an event in which the thing that is sold is"@en ;
	rdfs:domain olive:BuyingAndSelling ;
	rdfs:range owl:Thing ;
	rdfs:comment """(:BuyingAndSelling1 olive:sold :Thing1) means that the thing that is sold in BuyingAndSelling1 is Thing1. Thing1 may be some sort of object, but it could also be an event (as when someone purchases a service). For example, (:BobsBuyingANewCar olive:sold :Car00111) means that Car00111 is the thing that is sold during the event of Bob buying a new car.""" ;
	olive:exampleTriple ":BobsBuyingANewCar olive:sold :Car00111" ;
	rdfs:seeAlso olive:TransferEvent, olive:BuyingAndSelling, olive:boughtFor, olive:seller, olive:buyer ;
.

olive:sourceLocation a owl:DatatypeProperty ;
	rdfs:label "source location"^^xsd:string ;
        skos:prefLabel "can be found at"^^xsd:string ;
        rdfs:domain olive:Content ;
        rdfs:range xsd:string ;
	rdfs:comment """(:_Database_1 olive:databaseLocation \"/home/Desktop/Files/example.db\"^^xsd:string) means that Database1 can be found via the filepath /home/Desktop/Files/example.db. The object can be any string that denotes a location, such as an URL, physical address, or filepath. For example, (:SampleGradebook olive:sourceLocation \"https://docs.google.com/spreadsheets/d/1WBOQW3Ig8CXzVpaArX3E5gdm47_ADhasUuwOn_DGVJQ/edit#gid=0\"^^xsd:string) tells you the URL at which you can access the sample gradebook."""^^xsd:string ;
        olive:exampleTriple ":SampleGradebook olive:sourceLocation \"https://docs.google.com/spreadsheets/d/1WBOQW3Ig8CXzVpaArX3E5gdm47_ADhasUuwOn_DGVJQ/edit#gid=0\"^^xsd:string"^^xsd:string ;
.

olive:sourceText a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:text ;
	rdfs:label "source text"^^xsd:string ;
	skos:prefLabel "comes from a source associated with the following label:"@en ;
	rdfs:domain owl:Thing ;
	rdfs:range xsd:string ;
	rdfs:comment """(:Thing1 olive:sourceText \"STRING\"^^xsd:string) means that STRING is a label associated with the source of Thing1. For example, (:NicksAmazonOrder olive:sourceText \"Amazon\"^^xsd:string) means that Nicks Amazon order has a source associated with the label \"Amazon\". This a general property designed to allow context to determine how to identify what STRING refers to."""^^xsd:string ;
	olive:exampleTriple ":NicksAmazonOrder olive:sourceText \"Amazon\"^^xsd:string" ;
.

olive:sourceVersion a owl:DatatypeProperty ;
	rdfs:label "source version"^^xsd:string ;
        skos:prefLabel "has a source with version"@en ;
	rdfs:subPropertyOf olive:text ;
        rdfs:domain olive:Artifact ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Artifact1 olive:sourceVersion \"STRING\"xsd:string) means that Artifact1 has a source with version STRING. For example, (:CPTGraph olive:sourceVersion \"2011AA\"^^xsd:string). This means that the CPT graph was taken from data that was version 2011AA.

This is a tricky property. First off, it's unfortunately stringy. This is because versions come in all sorts of stringy formats, and it's unrealistic to expect we can generalize all of them. That said, whenever possible we want to be able to convert these strings into more semantic properties, such as olive:currentAsOf and olive:creationTime. Secondly, it is tricky because the version only derivitively applies to the subject. In the example triple, the CPT graph isn't version 2011AA, but rather the graph was taken from a source that was version 2011AA, and thus we call the graph 2011AA. This isn't too bad in that example, but it could easily get confusing if there is a first knowledge graph created for a third version of some source material. That graph would have a source version of 3.0, even if it was the first graph we created for that source material."""^^xsd:string ;
        olive:exampleTriple ":CPTGraph olive:sourceVersion \"2011AA\"^^xsd:string"^^xsd:string ;
.

olive:spatiallyRelatedTo a owl:ObjectProperty ;
	a owl:SymmetricProperty ;
	rdfs:label "spatially related to"^^xsd:string ;
        skos:prefLabel "stands in a physical relationship with"^^xsd:string ;
        rdfs:domain olive:PhysicalThing ;
        rdfs:range olive:PhysicalThing ;
	rdfs:comment """(:PhysicalThing1 olive:spatiallyRelatedTo :PhysicalThing2) means that PhysicalThing1 and PhysicalThing2 stand in some spatial relationship. This is very broad: one might be on the other, or near the other, or six million miles away from the other. Trivially, any two physical objects in the same reality, wherever they may be, will stand in a spatial relationship with one another. For this reason, almost always a more precise subproperty should be used, such as olive:placeContains to show that something is found in a location."""^^xsd:string ;
        olive:exampleSubproperty olive:placeContains ;
        olive:exampleTriple ":PhysicalThing1 olive:spatiallyRelatedTo :PhysicalThing2"^^xsd:string ;
.

olive:speaksLanguage a owl:ObjectProperty ;
	rdfs:label "speaks language"^^xsd:string ;
        skos:prefLabel "speaks"@en ;
	rdfs:subPropertyOf olive:agentUses ;
        rdfs:domain olive:Person ;
        rdfs:range olive:Language ;
	rdfs:comment """(:Person1 olive:speaksLanguage :Language1) means that Person1 speaks Language1. For example, (:DanielNaroditsky olive:speaksLanguage olive:RussianLanguage) means that Daniel speaks Russian.

Of course, speaking a language is not a binary thing. Like all capabilities, one can have more or less facility with the skill in question. One may only be able to count in a language, or identify colors. Or perhaps you can only ask for coffee and where the bathroom is in French. Here we rely on the fact that it is reasonable to ask someone whether they speak French; people will say yes or no based on a common sense standard of being able to communicate in a majority of expected situations.

Also note that the word 'speaks' may be a little misleading. This is the most natural way to phrase the question, but technically this property is for folks who can communicate using a language. So, someone who was fluent in ancient Greek, though they were not good at speaking it, would still truly be able to say to 'speak' the language."""^^xsd:string ;
        olive:exampleTriple ":DanielNaroditsky olive:speaksLanguage olive:RussianLanguage"^^xsd:string ;
.

olive:specializesIn a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:personalInformation ;
	rdfs:label "specializes in"^^xsd:string ;
        skos:prefLabel "specializes in"@en ;
        rdfs:domain olive:Agent ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:Agent1 olive:specializesIn :Thing1) means that Agent1 specializes in Thing1. This specialty may be broad: you might specialize in treating something, or cooking something, or simply knowing a lot about something. For example, if Dr. Rice is an ontologist, then (:DrRice olive:specializesIn olive:Exemplar_Cancer).

Note that frequently the domain is an instance of olive:ExemplarIndividual."""^^xsd:string ;
        olive:exampleTriple ":DrRice olive:specializesIn olive:Exemplar_Cancer"^^xsd:string ;
.

olive:specializesInType a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:relatedToClass ;
	rdfs:label "specializes in type"^^xsd:string ;
    skos:prefLabel "specializes in"@en ;
    rdfs:domain olive:Agent ;
    rdfs:range owl:Class ;
	rdfs:comment """(:Agent1 olive:specializesInType :Class1) means that Agent1 specializes in instances of Class1. Class1 may be a type of field, or activity, or topic - this property should be construed broadly enough to allow for any kind of thing that one could special in to stand as the object."""^^xsd:string ;
    olive:exampleTriple ":DrRice olive:specializesIn olive:Surgery"^^xsd:string ;
.

olive:specializesInType-primary a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:specializesInType ;
	rdfs:label "primarily specializes in type"^^xsd:string ;
    skos:prefLabel "primarily specializes in"@en ;
    rdfs:domain olive:Agent ;
    rdfs:range owl:Class ;
	rdfs:comment """(:Agent1 olive:specializesInType-primary :Class1) means that instances of Class1 are the primary speciality of Agent1; context will help to determine just what this means. Class1 may be a type of field, or activity, or topic - this property should be construed broadly enough to allow for any kind of thing that one could special in to stand as the object."""^^xsd:string ;
    olive:exampleTriple ":DrRice olive:specializesIn-primary olive:Surgery"^^xsd:string ;
.

olive:status a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:text ;
	rdfs:label "status"^^xsd:string ;
        skos:prefLabel "is"@en ;
        rdfs:domain olive:Artifact ;
        rdfs:range xsd:string ;
	rdfs:comment """This is the 'string version' of olive:hasStatus. It links an artifact directly to the string representation of the status. Triples of this form should be used to infer the olive:hasStatus equivalent, which is the more semantic representation."""^^xsd:string ;
.

olive:startDate a owl:DatatypeProperty ;
	rdfs:label "start date"^^xsd:string ;
        skos:prefLabel "starts on/at"@en ;
	rdfs:subPropertyOf olive:date ;
	rdfs:domain olive:TimeInterval ;
        rdfs:range xsd:dateTime ;
	rdfs:comment """(:TimeInterval1 olive:startDate \"DATETIME\"xsd:dateTime) means that TimeInterval1 starts on/at DATETIME. For example, (:MiddleAges olive:startDate \"476-01-01\"^^xsd:date) shows that the Middle Ages started in 476 (roughly the fall of the Roman Empire)."""^^xsd:string ;
        olive:exampleTriple ":MiddleAges olive:startDate \"476-01-01\"^^xsd:date"^^xsd:string ;
.

olive:startOfEvent a owl:ObjectProperty ;
	rdfs:subPropertyOf  olive:timeOfEvent ;
	rdfs:label "start of event"^^xsd:string ;
        skos:prefLabel "begins at/on"^^xsd:string ;
        rdfs:domain olive:Event ;
        rdfs:range olive:TimeInstant ;
	rdfs:comment """(:_Event_1 olive:startOfEvent :_Time_1) means that Event1 starts/started at Time1. For example, (:_ThanksGivingDinner olive:startOfEvent [a olive:TimeInstant; olive:universalDateTime \"2020-11-26T15:30:00\"^^xsd:dateTime]) means that my Thanksgiving dinner starts at 3:30pm on November 26, 2020.

Note that unlike olive:timeOfEvent, one cannot use the granularity to infer the duration of the event. Adding a olive:hasPrecision assertion is a way to indicate some +/- error bounds; to say an event starts at 3pm with a precision of one minute indicates the event will start anywhere between 15:00 and 15:01. Absent precision information, we assume that the time instant is maximally precise--to the second for datetimes and to the day for dates."""^^xsd:string ;
        olive:exampleTriple ":_ThanksGivingDinner olive:startOfEvent [a olive:TimeInstant; olive:universalDateTime \"2020-11-26T15:30:00\"^^xsd:dateTime]"^^xsd:string ;
.

olive:stateOfThing a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:eventInvolves ;
	rdfs:label "state of thing"^^xsd:string ;
	skos:prefLabel "is a state of"@en ;
	rdfs:domain olive:State-Situation ;
	rdfs:range owl:Thing ;
	rdfs:comment """(:State-Situation1 olive:stateOfThing :Thing1) means that Thing1 is the thing that is focally \"in\" State-Situation1. For example, (:NicksStateOfConfusion olive:stateOfThing :Nick) means that Nick is the thing that is focally in NicksStateOfConfusion. Generally speaking, this property is used for relating a state of being to the thing of which it is a state.""" ;
	olive:exampleTriple "(:NicksStateOfConfusion olive:stateOfThing :Nick)" ;
.

olive:subCategoryOf a owl:ObjectProperty , owl:TransitiveProperty ;
	rdfs:label "subcategory of"^^xsd:string ;
	skos:prefLabel "is a subcategory of"@en ;
	rdfs:comment "This is the analogue of rdfs:subClassOf for olive:Category."^^xsd:string ;
	rdfs:comment
		"Note: This is essentially the same as skos:broaderTransitive, using olive:Category instead of skos:Concept."^^xsd:string ,
		"The subject category is included by, or narrower than, the object category. Everything categorized by the subcategory can be inferred to be categorized by the supercategory."^^xsd:string
		;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:hasSuperCategory"^^xsd:string;
.

olive:suborganization a owl:ObjectProperty ;
	rdfs:label "suborganization"^^xsd:string ;
        skos:prefLabel "has the suborganization of"@en ;
	rdfs:subPropertyOf olive:hasPart ;
        rdfs:domain olive:Organization ;
        rdfs:range olive:Organization ;
	rdfs:comment """(:Organization1 olive:suborganization :Organization2) means that Organization1 has the suborganization of Organization2. For example, (olive:Olive olive:suborganization olive:OliveWorks)."""^^xsd:string ;
        olive:exampleTriple "olive:Olive olive:suborganization olive:OliveWorks";
.

olive:supersedes
    rdfs:subPropertyOf olive:affects ;
    rdfs:label "supersedes" ;
    skos:prefLabel "supersedes earlier content" ;
    rdfs:domain olive:Content ;
    rdfs:range olive:Content ;
    rdfs:comment "Asserts that some Content should typically be preferred to some other earlier Content. Typically both of these Contents abstract to the same instance of Versioned Content." ;
    olive:exampleTriple "olive:KnowledgeGraph/MyContent/v1.1 olive:supersedes olive:KnowledgeGraph/MyContent/v1.0;"
.

olive:supports a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:causes-general ;
	rdfs:label "supports"^^xsd:string ;
        skos:prefLabel "supports"@en ;
	skos:altLabel "justifies"@en ;
        rdfs:domain olive:Content ;
        rdfs:range olive:Content ;
	rdfs:comment """(:Content1 olive:supports :Content2) means that Content1 is (or could be) used to justify Content2. For example, (:MLAlgorithm23 olive:supports :Recommendation1) means that the recommendation in question is supported by that algorithm."""^^xsd:string ;
        olive:exampleSubproperty olive:citedContent;
        olive:exampleTriple ":MLAlgorithm23 olive:supports :Recommendation1"^^xsd:string ;
.

olive:tag a owl:DatatypeProperty ;
	rdfs:label "has tag"^^xsd:string ;
        skos:prefLabel "is tagged as"@en ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:_Thing_1 olive:tag \"TAG\"^^xsd:string) means that Thing1 is tagged with \"TAG\". For example, (:MyPatentApplication olive:tag \"DENIED\"^^xsd:string) indicates that my patent application has been tagged as denied.

This relation should only rarely be used in isolation. To revisit the example, we don't want to just note the tag that my patent received, but rather to indicate what this tag means. So, commonly we will create new classes that are defined by an owl restriction in which something has received that tag. For example, we could create :DeniedPatent and specify that this is equivalent to, or at least a subclass of, patents that have gotten the DENIED tag.

Usually one will know that there is some (small) set of tags a particular thing might receive. For patents, it might be PENDING, APPROVED, DENIED, or UNDER APPEAL. In this case, consider creating a subproperty with the appropriate domain and range constraints to enforce well-formedness."""^^xsd:string ;
        olive:exampleTriple ":MyPatentApplication olive:tag \"DENIED\"^^xsd:string"^^xsd:string ;
.

olive:takesInstanceOf a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:relatedToClass ;
	rdfs:label "takes instance of"^^xsd:string ;
        skos:prefLabel "can be replaced with a(n)"@en ;
        rdfs:domain olive:Variable ;
        rdfs:range owl:Class ;
	rdfs:comment """(:Variable1 olive:takesInstanceOf :Class1) means that Variable1 'stands for' an instance of Class1. For example, (:x olive:takesInstanceOf :RealNumber) would mean that x is a variable that can be bound to some real number."""^^xsd:string ;
        olive:exampleTriple ":x olive:takesInstanceOf :RealNumber"^^xsd:string ;
.

olive:takesSubClassOf a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:relatedToClass ;
	rdfs:label "takes subclass of"^^xsd:string ;
        skos:prefLabel "can be replaced with the class of"@en ;
        rdfs:domain olive:Variable ;
        rdfs:range owl:Class ;
	rdfs:comment """(:Variable1 olive:takesSubClassOf :Class1) means that Variable1 'stands for' a subclass of Class1. For example, (:HospitalTypeVariable olive:takesSubClassOf olive:Hospital) would mean that HospitalType is a variable that can be bound to some subclass of olive:Hospital (e.g. olive:ChildrensHospital)."""^^xsd:string ;
        olive:exampleTriple ":HospitalTypeVariable olive:takesSubClassOf olive:Hospital"^^xsd:string ;
.

olive:temporallyRelatedTo a owl:ObjectProperty ;
	a owl:SymmetricProperty ;
	rdfs:subPropertyOf owl:topObjectProperty ;
	rdfs:label "temporally related to"^^xsd:string ;
        skos:prefLabel "occurs in time relative to"^^xsd:string ;
        rdfs:domain owl:Thing ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:Thing_1 olive:temporallyRelatedTo :Thing_2) means that Thing1 and Thing2 bear some temporal relation to each other. This is incredibly general, and as such should rarely be used directly. Instead, you should use subproperties such as olive:precedes and olive:follows to indicate temporal ordering.

This is distinct from olive:timeOf. The timeOf property tells us when things happened, whereas the temporallyRelatedTo property orients other things relative to one another in time. Compare to geography: lattitude and longitude tell us where something happens, but they do not directly tell us about the spatial relationship between, say, the Statue of Liberty and the Grand Canyon; you would use olive:spatiallyRelatedTo for that. In that sense, both temporallyRelatedTo and spatiallyRelatedTo are 'direct' properties, whereas their correlates in timeOf and latitude/longitude are mediated by time or location."""^^xsd:string ;
        olive:exampleSubproperty olive:precedes, olive:follows ;
.

olive:testQuery a owl:ObjectProperty ;
	rdfs:label "test query"^^xsd:string ;
        skos:prefLabel "runs"@en ;
	rdfs:subPropertyOf olive:dependsOn ;
        rdfs:domain olive:Test-Software ;
        rdfs:range olive:Query ;
	rdfs:comment """(:Test-Software1 olive:testQuery :Query1) means that Test-Software1 runs Query1. For example, (:UMLSTest olive:testQuery :UMLSQuery) links the UMLS test with the UMLS query that it runs and checks the results of."""^^xsd:string ;
        olive:exampleTriple ":UMLSTest olive:testQuery :UMLSQuery"^^xsd:string ;
.

olive:text a owl:DatatypeProperty ;
	rdfs:label "text"^^xsd:string ;
        skos:prefLabel "has text:"^^xsd:string ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Thing1 olive:text \"TEXT\"^^xsd:string) means that Thing1 either contains or is importantly linked to TEXT. This is a pretty broad property, which can be used for many purposes including but not limited to: relating content to its text representation, relating audio/video content to captions, relating an identifier to its unique string (see olive:uniqueText), or something to notes about that thing. For example, (:XKCDHeistsAndEscapesComic olive:text \"MY PLAN FOR THE GREATEST ESCAPE ROOM GAME OF ALL TIME\"^^xsd:string) to relate that xkcd comic to its caption."""^^xsd:string ;
        olive:exampleSubproperty olive:uniqueText, olive:abstract ;
        olive:exampleTriple ":XKCDHeistsAndEscapesComic olive:text \"MY PLAN FOR THE GREATEST ESCAPE ROOM GAME OF ALL TIME\"^^xsd:string"^^xsd:string ;
.

olive:thingTransferred a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:conveyedThing ;
	rdfs:label "thing transferred"^^xsd:string ;
        skos:prefLabel "involves transferring"^^xsd:string ;
        rdfs:domain olive:TransferEvent ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:_Event_1 olive:thingTransferred :_Thing_1) means that Thing1 is transferred from one party to another during Event1. For example, (:JillAndBobsWeddingCeremony olive:thingTransferred :JillsWeddingRing) means that Jill's wedding ring gets transferred from one person to another during her wedding ceremony. Of course, more information is important here: who had the ring first? Who was it transferred to? For those things, see olive:conveysTo and olive:conveysFrom."""^^xsd:string ;
        olive:exampleTriple ":JillAndBobsWeddingCeremony olive:thingTransferred :JillsWeddingRing"^^xsd:string ;
.

olive:timeOf a owl:ObjectProperty ;
	rdfs:label "time of"^^xsd:string ;
        skos:prefLabel "existed on"^^xsd:string ;
        rdfs:domain owl:Thing ;
        rdfs:range olive:TimeInterval ;
	rdfs:comment """(:Thing1 olive:timeOf :Time1) means that Time1 is important for Thing1. This is the most general property to relate things and events to a time. It should almost never be asserted directly. Instead, for events, use olive:timeOfEvent. For non-events, consider olive:creationTime or olive:destructionTime, among the other subclasses of olive:timeOf."""^^xsd:string ;
        olive:exampleSubproperty olive:timeOfEvent, olive:dateOfBirth ;
.

olive:timeOfDeath
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:destructionTime ;
	rdfs:label "time of death"^^xsd:string ;
	skos:prefLabel "died at/on"@en ;
	rdfs:comment "Datetime, at whatever granularity available, that a living thing died"^^xsd:string ;
	rdfs:domain olive:LivingThing ;
	rdfs:range olive:TimeInstant ;
	olive:formerName "gist:hasDeathDate"^^xsd:string;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
	.

olive:timeOfEvent a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:eventInvolves, olive:timeOf ;
	rdfs:label "time of event"^^xsd:string ;
        skos:prefLabel "happened at/on"^^xsd:string ;
        rdfs:domain olive:Situation ;
        rdfs:range olive:TimeInstant ;
	rdfs:comment """(:Event1 olive:timeOfEvent :Time1) means that Event1 happened at Time1. For example, (:MyEuchreGame olive:timeOfEvent [a olive:TimeInstant; olive:universalDate \"2020-05-01\"^^xsd:date]) would show that my euchre game happend on May 1st of 2020. 

Absent any distinct start and end times (see olive:startOfEvent and olive:endOfEvent), we assume that the event happened for the entire granularity of the time instant. To determine the granularity, first see whether there is a olive:hasPrecision assertion. Absent one of those, defer to the most precise significant digit in the time encoding. So, if the time given is 12:00:03, we assume it is precise to the second, but given 15:17:00 we assume the precision is to the minute. These assumptions are risky, since 10:00:00 might be to the nearest ten hours or might be precise to the hour. But, absent any further information, we have to either do without or make an educated guess. I think better here to make an educated guess.

Note also that there may be multiple olive:timeOfEvent triples with the same subject and different objects, which would indicate that the relevant situation is temporally disconnected.

Note that for legacy reasons this property is called \"timeOfEvent\" despite the fact that its domain extends to instances of olive:Situation."""^^xsd:string ;
        olive:exampleSubproperty olive:startOfEvent, olive:endOfEvent ;
        olive:exampleTriple ":MyEuchreGame olive:timeOfEvent [a olive:TimeInstant; olive:universalDate \"2020-05-01\"^^xsd:date]"^^xsd:string ;
.

olive:tin a owl:DatatypeProperty, owl:FunctionalProperty, owl:InverseFunctionalProperty ;
	rdfs:subPropertyOf olive:identifyingText ;
	rdfs:label "tin"^^xsd:string ;
        skos:prefLabel "has the following TIN:"@en ;
	skos:altLabel "has the following taxpayer identification number:"@en ;
        rdfs:domain olive:Agent ;
        rdfs:range xsd:string ;
	rdfs:comment """This links taxpayer with their Taxpayer Identification Number. For example, (:DrRice olive:tin \"212121212\"^^xsd:string)."""^^xsd:string ;
        olive:exampleTriple ":DrRice olive:tin \"212121212\"^^xsd:string"^^xsd:string ;

.

olive:titleForContent a owl:DatatypeProperty, owl:FunctionalProperty ;
	rdfs:subPropertyOf olive:name ;
	rdfs:label "title for content"^^xsd:string ;
        skos:prefLabel "is called"@en ;
	skos:altLabel "is entitled"@en, "is titled"@en ;
        rdfs:domain olive:Content ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Content1 olive:titleForContent \"TITLE\"^^xsd:string) means that Content1 is titled TITLE. For example, (:MyPaper olive:titleForContent \"Dissolving Harman's Dogmatism Paradox\"^^xsd:string).

This property is functional, meaning that no content can have more than one olive:titleForContent. It is not inversely functional, as more than one piece of content may have the same title.

Not to be confused with olive:titleText, which gives the title for the role of an agent (e.g. a job title)."""^^xsd:string ;
        olive:exampleTriple ":MyPaper olive:titleForContent \"Dissolving Harman's Dogmatism Paradox\"^^xsd:string"^^xsd:string ;
.

olive:titleText a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:name-associatedText ;
	rdfs:label "title text"^^xsd:string ;
	skos:prefLabel "has the title:"@en ;
	rdfs:domain olive:Agent ;
	rdfs:range xsd:string ;
	rdfs:comment """(:Agent1 olive:titleText \"STRING\"^^xsd:string) means that Agent1 has the title STRING. For example, (:JeffBezos olive:title \"CEO\"^^xsd:string) means that Jeff Bezos has the title string \"CEO\".

Not to be confused with olive:titleForContent."""^^xsd:string ;
	olive:exampleTriple ":JeffBezos olive:titleText \"CEO\"^^xsd:string"^^xsd:string ;
.

olive:toAgent
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:isTo ;
	rdfs:label "to agent"^^xsd:string ;
	skos:prefLabel "is intended for"@en ;
	rdfs:comment """(:_thing_1 olive:toAgent :_agent_1) means that :agent_1 is the intended recipient of :_thing_1.
Note that this is not the inverse of olive:fromAgent; if it were, then (:Letter1 olive:toAgent :SantaClaus) would entail that (:SantaClaus olive:fromAgent :Letter1). There is an important inverse-like relationship between 'to' and 'from', but these are mediated through the thing that is being passed along."""^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range olive:Agent ;
	.

olive:toPlace
	a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:isTo ;
	rdfs:label "to place"^^xsd:string ;
	skos:prefLabel "has a destination of"@en ;
	rdfs:comment "Destination"^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range olive:Place ;
	olive:formerName "gist:toPlace"^^xsd:string;
.

olive:totalCost a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:situationHasAssociatedMonetaryValue ;
	rdfs:label "total cost"^^xsd:string ;
	skos:prefLabel "involves a total cost of"@en ;
	rdfs:domain olive:BuyingAndSelling ;
	rdfs:range olive:Monetary ;
	rdfs:comment """(:BuyingAndSelling1 olive:totalCost :Monetary1) means that BuyingAndSelling1 is an event in which the total cost of the goods bought/sold is Monetary1. For example, (ex:BuyingAndSelling111 olive:totalCost [olive:decimalValue \"500\"^^xsd:double ; olive:hasUoM olive:_USDollar ]) means that the focal item(s) sold in ex:BuyingAndSelling111 (see olive:itemSold) are sold for $500 US. This property is intended to allow for distinctions to be made between the cost of an item (or a type of item) and the total cost of the transaction.."""^^xsd:string ;
	olive:exampleTriple "ex:BuyingAndSelling111 olive:totalCost [olive:decimalValue \"500\"^^xsd:double ; olive:hasUoM olive:_USDollar ]" ;
	rdfs:seeAlso olive:totalCost, olive:unitCost, olive:BuyingAndSelling ;
.

olive:transcript a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:text ;
	skos:prefLabel "is transcribed as:"@en ;
	rdfs:domain olive:Content ;
	rdfs:range xsd:string ;
	rdfs:comment """(:Content1 olive:transcript \"STRING\"@langugagetag) means that STRING is a way of transcribing Content1. Note that this property is not functional in order to allow for transcripts in multiple different languages."""^^xsd:string ;
.

olive:tripleCount a owl:DatatypeProperty ;
	rdfs:label "triple count"^^xsd:string ;
        skos:prefLabel "has the following number of triples:"@en ;
	rdfs:domain olive:KnowledgeGraph ;
        rdfs:range xsd:integer ;
	rdfs:comment """(:KnowledgeGraph1 olive:tripleCount \"INTEGER\"xsd:integer) means that KnowledgeGraph1 has the following number of triples: INTEGER. For example, (:Graph21 olive:tripleCount \"2000\"^^xsd:integer) means that Graph21 has 2000 triples."""^^xsd:string ;
        olive:exampleTriple ":Graph21 olive:tripleCount \"2000\"^^xsd:integer"^^xsd:string ;
.

olive:typedSubPropertyOf a owl:AnnotationProperty ;
	rdfs:label "typed subproperty of"^^xsd:string ;
	skos:prefLabel "is, when it relates specific types of things, a subproperty of"@en ;
	rdfs:domain owl:Property ;
	rdfs:range owl:Property ;
	rdfs:comment """(:Property1 olive:typedSubPropertyOf :Property2) means that Property1 is, when it relates things that satisfy the domain and range specifications of Property2, a subproperty of Property2. For example, olive:dataSensitivityDefaultLevel has as its domain olive:DataClassificationType and as its range olive:DataSensitivityLevel. If we then asserted (olive:categorizedBy olive:typedSubPropertyOf olive:dataSensitivityDefaultLevel), that would mean that (:DataClassificationType1 olive:categorizedBy :DataSensitivityLevel1) (where the subject and object are instances of the aforementioned domain and range, respectively) entails (:DataClassificationType1 olive:dataSensitivityDefaultLevel :DataSensitivityLevel1)."""^^xsd:string ;
.

olive:type-primary a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:relatedToClass ;
	rdfs:label "primary type"^^xsd:string ;
	skos:prefLabel "is primarily a"@en ;
	rdfs:domain owl:Thing ;
	rdfs:range owl:Class ;
	rdfs:comment """(:Thing1 olive:type-primary :Class1) means (1) (:Thing1 a :Class1) and (2) Class1 is in some sense the \"primary\" taxonomic classification for Thing1. For example, (:Nick type-primary olive:HumanBeing) means that in some sense Nick's primarily taxonomic classification is as a human being."""^^xsd:string ;
	olive:exampleTriple ":Nick olive:type-primary olive:HumanBeing" ;
.

olive:unitComponent a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:hasPart ;
	rdfs:label "unit component"^^xsd:string ;
        skos:prefLabel "includes the subunit"^^xsd:string ;
        rdfs:domain olive:UnitOfMeasure ;
        rdfs:range olive:UnitOfMeasure ;
	rdfs:comment """(:UnitWhole olive:unitComponent :UnitPart) means that UnitWhole is partly constituted by UnitPart. For example, meters per second (m/s) is composed of a numerator of meter and denominator of second. So, both (:_meterspersecond olive:unitComponent :_second) and (:_meterspersecond olive:unitComponent :_meter) are true. That said, one should almost always use a more specific property. In this case, we'd use olive:denominator and olive:numerator, respectively."""^^xsd:string ;
        olive:exampleSubproperty olive:numerator, olive:denominator ;
        olive:exampleTriple ":_meterspersecond olive:unitComponent :_second"^^xsd:string ;
.

olive:uniqueName a owl:DatatypeProperty, owl:FunctionalProperty, owl:InverseFunctionalProperty ;
	rdfs:subPropertyOf olive:name ;
	rdfs:label "unique name"^^xsd:string ;
        skos:prefLabel "is uniquely called"^^xsd:string ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:Thing1 olive:uniqueName \"NAME\"^^xsd:string) means that Thing1 is uniquely referred to by NAME. For example, (:CPA12 olive:uniqueName \"Galaxy Med's CPA\"^^xsd:string) means that anytime you hear about Galaxy Med's CPA, you know it refers to :CPA12, and anytime you see :CPA12, you know you can uniquely name it as Galaxy Med's CPA.

See olive:name and olive:uniqueText. Oftentimes you might be better off using just one of those properties, or using an identifier (see olive:identifiedBy)."""^^xsd:string ;
        olive:exampleTriple ":CPA12 olive:uniqueName \"Galaxy Med's CPA\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

olive:unitCost a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:situationHasAssociatedMonetaryValue ;
	rdfs:label "unit cost"^^xsd:string ;
	skos:prefLabel "involves a unit cost of"@en ;
	rdfs:domain olive:BuyingAndSelling ;
	rdfs:range olive:Monetary ;
	rdfs:comment """(:BuyingAndSelling1 olive:unitCost :Monetary1) means that BuyingAndSelling1 is an event in which some focal type of thing is sold at a rate of Monetary1 per unit. For example, (ex:BuyingAndSelling111 olive:unitCost [olive:decimalValue \"500\"^^xsd:double ; olive:hasUoM olive:_USDollar ]) means that one unit of the type of product sold in ex:BuyingAndSelling111 is sold for $500 US. This property is most useful for representing events in which a type of product is sold; for events in which a single, individual thing is sold, it's typically better to use olive:itemCost. (Note, though, that there may be cases in which you want to use both properties, as when a case of instances of a product type is sold - in this case, you may want to specify both the unit cost and the cost of the case itself)."""^^xsd:string ;
	olive:exampleTriple "ex:CostSpecification111 olive:unitCost [olive:decimalValue \"500\"^^xsd:double ; olive:hasUoM olive:_USDollar ]" ;
	rdfs:seeAlso olive:itemCost, olive:totalCost, olive:BuyingAndSelling ;
.

olive:unitSymbol
	a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:unitSymbol-general ;
	skos:prefLabel "has the following standard symbol: "@en ;
	rdfs:label "Unit Symbol"^^xsd:string ;
	rdfs:comment "The standard symbol for the unit NOT using any special characters.  E.g. square meter would be m^2 rather than m?."^^xsd:string ;
	rdfs:domain olive:UnitOfMeasure ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range xsd:string ;
	olive:formerName "gist:unitSymbol"^^xsd:string ;
	.

olive:unitSymbol-general
	a owl:DatatypeProperty ;
	rdfs:label "unit symbol"^^xsd:string ;
	skos:prefLabel "has the following unit symbol: "@en ;
	rdfs:comment """(:UnitOfMeasure1 olive:unitSymbol-general \"SYMBOL\"^^xsd:string) means that SYMBOL is a symbol for :UnitOfMeasure1. For example, (_ampere olive:unitSymbol-general \"A\"^^xsd:string) means that A is the symbol for ampere. This is a very general property intended to be a super-property of olive:unitSymbol, olive:unitSymbolHTML, and olive:unitSymbolUnicode; the latter should be used instead when representing knowledge."""^^xsd:string ;
	rdfs:domain olive:UnitOfMeasure ;
	rdfs:range xsd:string ;
	olive:assertibility olive:NotAssertible ;
	olive:exampleTriple "_ampere olive:unitSymbol-general \"A\"^^xsd:string"^^xsd:string ;
	.

olive:unitSymbolHTML
	a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:unitSymbol-general ;
	skos:prefLabel "has the following standard symbol (HTML): "@en ;
	rdfs:label "Unit Symbol HTML"^^xsd:string ;
	rdfs:comment 'The standard symbol for the unit in HTML format for  pretty printing, may use special characters.  E.g. to show square meter as  m? rather than m^2, the value of this property would be "m&sup2;" This is for when Unicode not supported and the display will be HTML format.'^^xsd:string ;
	rdfs:domain olive:UnitOfMeasure ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range xsd:string ;
	olive:formerName "gist:unitSymbolHTML"^^xsd:string ;
	.

olive:unitSymbolUnicode
	a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:unitSymbol-general ;
	skos:prefLabel "has the following standard symbol (unicode): "@en ;
	rdfs:label "Unit Symbol Unicode"^^xsd:string ;
	rdfs:comment "The standard symbol for the unit preferred for pretty printing, may use special characters.  E.g. square meter would be  m? rather than m^2."^^xsd:string ;
	rdfs:domain olive:UnitOfMeasure ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range xsd:string ;
	olive:formerName "gist:unitSymbolUnicode"^^xsd:string ;
	.

olive:uniqueText a owl:DatatypeProperty , owl:FunctionalProperty ;
	rdfs:subPropertyOf olive:identifyingText ;
	rdfs:label "unique text"^^xsd:string ;
	skos:prefLabel "is uniquely associated with"@en ;
	rdfs:comment "This is used for the actual value of a key or ID where you don't want the possibility of having more than one."^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:range xsd:string ;
	olive:formerName "gist:uniqueText"^^xsd:string;
.

olive:universalDate a owl:DatatypeProperty ;
	rdfs:label "universal date"^^xsd:string ;
	skos:prefLabel "occurred at/on"@en ;
	rdfs:subPropertyOf olive:date ;
	rdfs:comment "UD"^^xsd:string ;
	rdfs:domain olive:TimeInstant ;
	rdfs:range xsd:date ;
	olive:formerName "gist:universalDate"^^xsd:string;
.

olive:universalDateTime	a owl:DatatypeProperty ;
	rdfs:label "universal date time"^^xsd:string ;
	skos:prefLabel "is"@en ;
	rdfs:subPropertyOf olive:date ;
	rdfs:comment "UDT"^^xsd:string ;
	rdfs:domain olive:TimeInstant ;
	rdfs:range xsd:dateTime ;
	olive:formerName "gist:universalDateTime"^^xsd:string;
.

olive:universalTime
	a owl:DatatypeProperty ;
	rdfs:label "universal time"^^xsd:string ;
	skos:prefLabel "occurred at/on"@en ;
	rdfs:subPropertyOf olive:date ;
	rdfs:comment "UT"^^xsd:string ;
	rdfs:domain olive:TimeInstant ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:formerName "gist:universalTime"^^xsd:string;
	.

olive:unspsc a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:mapsTo-Class ;
	rdfs:label "UNSPSC"^^xsd:string ;
    skos:prefLabel "has the following UNSPSC:"@en ;
	skos:altLabel "has the following United Nations Standard Prodcuts and Services Code:"@en ;
    rdfs:domain olive:Class ;
    rdfs:range xsd:string ;
	rdfs:comment """(:Class1 olive:unspsc \"STRING\"^^xsd:string) means that STRING is the United Nations Standard Products and Services Code for Class1. This property is equivalent to the Wikidata property wdt:P2167."""^^xsd:string ;
    olive:exampleTriple "ex:Nicotine olive:unspsc \"51212202\"^^xsd:string"^^xsd:string ;
.

olive:upn a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:mapsTo-Class ;
	rdfs:label "UPN code"^^xsd:string ;
    skos:prefLabel "has the following UPN code:"@en ;
	skos:altLabel "has the following Universal Product Number:"@en ;
    rdfs:domain olive:Class ;
    rdfs:range xsd:string ;
	rdfs:comment """(:Class1 olive:upn \"STRING\"^^xsd:string) means that STRING is the Universal Product Number for Class1."""^^xsd:string ;
    olive:exampleTriple "ex:ProductType2211 olive:upn \"11111111\"^^xsd:string"^^xsd:string ;
.

olive:uriTemplate a owl:AnnotationProperty ;
	rdfs:label "URI template"^^xsd:string ;
        skos:prefLabel "instances should have URIs that follow this template:"@en ;
        rdfs:domain owl:Class ;
        rdfs:range olive:URITemplate ;
	rdfs:comment """(:Class1 olive:uriTemplate :URITemplate1) means that converting data instances of Class1 can be done by minting URIs that follow URITemplate1. The scheme for a (non-UUID) URI is {URI for relevant class}/{some-predicate-alias}={value1};{some-other-predicate-alias}={value2}... . For example, (olive:CPA olive:uriTemplate [olive:uniqueText \"http://data.oliveai.com/ontology/MedicalCareProvider/npi=\"]) means that medical care providers should get URIs that follow that pattern (e.g. http://data.oliveai.com/ontology/MedicalCareProvider/npi=1619420049). Of course, we can only follow this template if the NPI information is available.

Note that this is an annotation property, and therefore is of limited use in inference.

See also olive:classIdentifyingProperties and olive:URITemplate for more information."""^^xsd:string ;
    	rdfs:seeAlso "https://docs.google.com/document/d/10WxIvFEf6mYra8pxaOewLo8xuWLK3-QVc7wYkEVKlMo/edit#" ;
        olive:exampleTriple "olive:CPA olive:uriTemplate [olive:uniqueText \"http://data.oliveai.com/ontology/MedicalCareProvider/npi=\"]"^^xsd:string ;
.

olive:uriTemplateUsesProperty a owl:AnnotationProperty ;
	rdfs:label "uri template uses property"^^xsd:string ;
        skos:prefLabel "uses"@en ;
	rdfs:subPropertyOf olive:uses ;
        rdfs:domain olive:URITemplate ;
        rdfs:range rdf:Property ;
	rdfs:comment """(:URITemplate1 olive:uriTemplateUsesProperty :Property1) means that URITemplate1 uses Property1. See the usage of olive:uriTemplateUsesProperty on olive:MedicalCareProvider, relating that class's template to both olive:npi and olive:ssn.

Compare to olive:classIdentifyingProperty, which relates the class directly to a property that is useful for entity resolution."""^^xsd:string ;
.

olive:url a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:url-general , olive:sourceLocation ;
	rdfs:label "url"^^xsd:string ;
        skos:prefLabel "can be accessed at"@en ;
        rdfs:domain olive:VirtualThing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:NetworkAccessibleThing1 olive:url \"WEBADDRESS\"^^xsd:string) means that you can access NetworkAccessibleThing1 at WEBADDRESS. For example, (:SecureDB olive:url \"http://avd.secure.olive.com:8402\"^^xsd:string) tells you where the endpoint to SecureDB is located."""^^xsd:string ;
        olive:exampleTriple ":SecureDB olive:url \"http://avd.secure.olive.com:8402\"^^xsd:string"^^xsd:string ;
.

olive:url-base a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:url-general , olive:sourceLocation ;
	rdfs:label "base url"^^xsd:string ;
        skos:prefLabel "has a base url of"@en ;
	skos:altLabel "has fully qualified domain name"@en ;
        rdfs:domain olive:VirtualThing ;
        rdfs:range xsd:string ;
	rdfs:comment """(:NetworkAccessibleThing1 olive:url-base \"WEBADDRESS\"^^xsd:string) means that you can access NetworkAccessibleThing1 at a url that starts with WEBADDRESS. For example, (:SecureDB olive:url-base \"http://avd.secure.olive\"^^xsd:string) tells you the endpoint to SecureDB has a url that starts with this.

If you know the full url, use olive:url instead. The olive:url-base should always be a substring (more specifically, an initial substring) of a olive:url."""^^xsd:string ;
        olive:exampleTriple ":SecureDB olive:url \"http://avd.secure.olive\"^^xsd:string"^^xsd:string ;
.

olive:url-general a owl:DatatypeProperty ;
	rdfs:label "general url"^^xsd:string ;
	skos:prefLabel "has a url of"@en ;
	rdfs:domain owl:Thing ;
    rdfs:range xsd:string ;
	olive:assertibility olive:NotAssertible ;
	rdfs:comment """(:Thing1 olive:url-general \"WEBADDRESS\"^^xsd:string) means that you can access :Thing1 at WEBADDRESS. For example, (:SecureDB olive:url-general \"http://avd.secure.olive.com:8402\"^^xsd:string) means that Secure DB can be accessed at http://avd.secure.olive.com:8402. This is intended to be a super-property of, e.g., olive:url and olive:url-base and shouldn't itself be used to represent URL information directly - you should use one of its subproperties instead."""^^xsd:string ;
        olive:exampleTriple ":SecureDB olive:url-general \"http://avd.secure.olive.com:8402\"^^xsd:string"^^xsd:string ;
.

olive:uses a owl:ObjectProperty ;
	rdfs:label "uses"^^xsd:string ;
        skos:prefLabel "uses"^^xsd:string ;
        rdfs:domain owl:Thing ;
        rdfs:range owl:Thing ;
	rdfs:comment """(:Thing1 olive:uses :Thing2) means that Thing1 uses--in a very general sense--Thing2. For example, a tree uses sunlight, or a computer program uses Python. (:MyProgram olive:uses :PythonLanguage) would mean that my program uses Python.

This property is orthogonal to olive:affects. Sometimes using a thing affects the other thing, as in using a spoon to eat one's oatmeal. However, you can also use things in ways that leave them unaffected, such as content using a language (see olive:expressedIn) or a person using a data source (e.g. an excel spreadsheet) to discover information."""^^xsd:string ;
        olive:exampleSubproperty olive:agentUses, olive:expressedIn ;
        olive:exampleTriple ":MyProgram olive:uses :PythonLanguage"^^xsd:string ;
.

olive:usesPortal a owl:ObjectProperty ;
	rdfs:label "uses portal"^^xsd:string ;
        skos:prefLabel "uses the portal"@en ;
	rdfs:subPropertyOf olive:uses ;
        rdfs:domain owl:Thing ;
        rdfs:range olive:InsurancePortal ;
	rdfs:comment """(:Thing1 olive:usesPortal :InsurancePortal1) means that Thing1 uses the portal InsurancePortal1. For example, (:MyClaim olive:usesPortal :CignaPortal) would mean that my insurance claim utilized the Cigna portal."""^^xsd:string ;
        olive:exampleTriple ":MyClaim olive:usesPortal :CignaPortal"^^xsd:string ;
.

olive:utilizesClassification a owl:AnnotationProperty ;
	rdfs:subPropertyOf olive:relatedToClass ;
	rdfs:label "utilizes classification" ;
	skos:prefLabel "makes use of the following classification:"@en ;
	rdfs:domain owl:Thing ;
	rdfs:range owl:Class ;
	rdfs:comment """(:Thing1 olive:utilizesClassification :Class1) means that Thing1 makes use of - in some sense - Class1. One intended usecase for this property is circumstances in which a particular way of categorizing things is specific to a particular individual or schema - for example, if two different individuals categorize operating room supplies in different ways and one wants to declare which classes are employed by which individual.""" ;
.

olive:variableDatatype a owl:ObjectProperty ;
	rdfs:label "variable datatype"^^xsd:string ;
        skos:prefLabel "takes values that are"@en ;
        rdfs:domain olive:Variable ;
        rdfs:range rdfs:Datatype ;
	rdfs:comment """(:Variable1 olive:variableDatatype :Datatype1) means that Variable1 takes values that are of type Datatype1. For example, (:MyNameVariable olive:variableDatatype xsd:string) means that my name variable must be filled with a string."""^^xsd:string ;
        olive:exampleTriple ":MyNameVariable olive:variableDatatype xsd:string"^^xsd:string ;
.

olive:variableEquals a owl:ObjectProperty ;
	rdfs:subPropertyOf olive:uses ;
	rdfs:label "variable equals"^^xsd:string ;
        skos:prefLabel "invokes its function using this substitution:"@en ;
        rdfs:domain [owl:unionOf (olive:Invocation olive:Test)] ;
        rdfs:range rdf:List ;
	rdfs:comment """(:Invocation1 olive:variableEquals (:Variable1 :Value1)) means that the function invoked (see olive:invokes) during Invocation1 has :Value1 substituted in for :Variable1; here :Value1 can either be any resource, including literals (e.g. \"17\"^^xsd:integer. For example, (:QuadraticFormulaSolvingEvent olive:variableEquals (:LeadingCoefficient \"2\"^^xsd:decimal)) indicates that the 'a' value in the quadratic formula had the value 2 subbed in during some particular solution represented by the subject of that triple. Or, perhaps we run a Google Search using a REST API: (:GoogleSearch123 olive:variableEquals (:SearchTermVar \"Brisket Recipe\"^^xsd:string)) indicates that our Google Search 123 involved searching for \"Brisket Recipe\"."""^^xsd:string ;
        olive:exampleTriple ":QuadraticFormulaSolvingEvent olive:variableEquals (:LeadingCoefficient \"2\"^^xsd:decimal)"^^xsd:string ;
.

olive:version
        rdfs:subPropertyOf olive:identifiedBy ;
        rdfs:label "version"^^xsd:string ;
        rdfs:domain [
                        a owl:Restriction ;
                        owl:onProperty olive:abstractsTo ;
                        owl:someValuesFrom olive:VersionedContent ;
                ] ;
        rdfs:range olive:VersionID ;
        rdfs:comment "Asserts that Content abstracting to some versioned content is assigned some VersionID" ;
        olive:exampleTriple "olive:Content/MyContent/v1.0 olive:version olive:Version/MyContent/idenfifyingText=1.0;"
.

olive:volumeNumber a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:seriesNumber ;
	rdfs:label "volume number"^^xsd:string ;
        skos:prefLabel "is volume number"^^xsd:string ;
        rdfs:domain olive:Content ;
        rdfs:range xsd:nonNegativeInteger ;
	rdfs:comment """(:Content1 olive:volumeNumber \"N\"^xsd:nonNegativeInteger) means that Content1 is the Nth volume in some series. For example, (:Erkenntnis_vol_7 olive:volumeNumber \"7\"^xsd:nonNegativeInteger) means that the thing referred to by ':Erkenntnis_vol_7' is the seventh volume."""^^xsd:string ;
        olive:exampleTriple ":Erkenntnis_vol_7 olive:volumeNumber \"7\"^xsd:nonNegativeInteger"^^xsd:string ;
.

olive:zipCode a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:postalCode ;
	rdfs:label "ZIP code"^^xsd:string ;
        skos:prefLabel "has the ZIP code"@en ;
        rdfs:range xsd:string ;
	rdfs:comment """This is a datatype property that links a person/place/entity with the zip code in which they are located. When possible, we'd prefer to list the full address.
For example, (:Person1 olive:zipCode \"98372\"^^xsd:string) indicates that Person1 is somehow affiliated with the 98372 ZIP code; perhaps they live there, or are currently at that location, or have a business incorporated in that location."""^^xsd:string ;
        olive:exampleTriple ":Person1 olive:zipCode \"98372\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;	
.

olive:zipCodePlus4 a owl:DatatypeProperty ;
	rdfs:subPropertyOf olive:zipCode ;
	rdfs:label "ZIP code"^^xsd:string ;
        skos:prefLabel "has the ZIP code"@en ;
	skos:altLabel "has the plus-four code"@en , "has ZIP+4"@en , "has the ZIP and add-on of"@en ;
        rdfs:range xsd:string ;
	rdfs:comment """This is the more specific zip code that includes the add-on/plus four digits.
For example, (:Person1 olive:zipCodePlus4 \"98372-9000\"^^xsd:string) indicates that Person1 is somehow affiliated with the 98372-9000 ZIP code; perhaps they live there, or are currently at that location, or have a business incorporated in that location."""^^xsd:string ;
        olive:exampleTriple ":Person1 olive:zipCodePlus4 \"98372-9000\"^^xsd:string"^^xsd:string ;
	olive:propertyExpressesSensitiveInformation olive:SensitiveInfo-PHI ;
.

#################################################################
#  Datatypes
#################################################################

olive:json a rdfs:Datatype ;
.

#################################################################
#  Individuals
#################################################################

olive:Active a olive:Status ;
	rdfs:label "active"^^xsd:string ;
        skos:prefLabel "active"@en ;
	rdfs:comment """olive:Active is an instance of olive:Status. This is a general label that can apply to things like products or contracts. This is not to be used for tagging persons as active in terms of performing some activity (e.g. exercise)."""^^xsd:string ;
.

olive:AliasGraph a olive:VolatileGraph ;
	rdfs:label "alias graph"^^xsd:string ;
        skos:prefLabel "alias graph"@en ;
	rdfs:comment """olive:AliasGraph is an instance of olive:VolatileGraph. This is the knowledge graph that stores the graph names where various frequently referenced information lives. Think of this as a graph that stores the symlinks for graphs: as we have updated versions of, say, olive:OliveOntology, the alias graph will track which named graph holds the latest version."""^^xsd:string ;
.

olive:Amount-Minimal a owl:NamedIndividual, olive:QualitativeAmount-Generic ;
        rdfs:label "minimal amount"^^xsd:string;
        skos:prefLabel "minimal amount"@en ;
	skos:altLabel "no amount"@en ;
        rdfs:comment """A qualitative amount, this is the tag for things that have a minimal or no amount."""^^xsd:string ;
	olive:qagConversion "0.0"^^xsd:decimal ;
.

olive:Amount-Low a owl:NamedIndividual, olive:QualitativeAmount-Generic ;
        rdfs:label "low amount"^^xsd:string;
        skos:prefLabel "low amount"@en ;
        rdfs:comment """A qualitative amount, this is the tag for things that have a low amount."""^^xsd:string ;
	olive:qagConversion "0.25"^^xsd:decimal ;
.

olive:Amount-Medium a owl:NamedIndividual, olive:QualitativeAmount-Generic ;
        rdfs:label "medium amount"^^xsd:string;
        skos:prefLabel "medium amount"@en ;
	skos:altLabel "moderate amount"@en ;
        rdfs:comment """A qualitative amount, this is the tag for things that have medium amount."""^^xsd:string ;
	olive:qagConversion "0.50"^^xsd:decimal ;
.

olive:Amount-High a owl:NamedIndividual, olive:QualitativeAmount-Generic ;
        rdfs:label "high amount"^^xsd:string;
        skos:prefLabel "high amount"@en ;
        rdfs:comment """A qualitative amount, this is the tag for things that have high amount."""^^xsd:string ;
	olive:qagConversion "0.75"^^xsd:decimal ;
.

olive:Amount-Maximal a owl:NamedIndividual, olive:QualitativeAmount-Generic ;
        rdfs:label "maximal amount"^^xsd:string;
        skos:prefLabel "maximal amount"@en ;
        rdfs:comment """A qualitative amount, this is the tag for things that have a maximal amount."""^^xsd:string ;
	olive:qagConversion "1.0"^^xsd:decimal ;
.

olive:Avoided a olive:CommitmentCategory ;
	rdfs:label "avoided"^^xsd:string ;
        skos:prefLabel "avoided"@en ;
	rdfs:comment """olive:Avoided is an instance of olive:CommitmentCategory. See comment on olive:Satisfied for further discussion."""^^xsd:string ;
.

olive:ContactType-Email a olive:ContactAddressType ;
	rdfs:label "email contact type"^^xsd:string ;
        skos:prefLabel "email address"@en ;
	rdfs:comment """olive:ContactType-Email is an instance of olive:ContactAddressType."""^^xsd:string ;
	olive:mapsTo-fhir "email"^^xsd:string ;
.

olive:ContactType-Fax a olive:ContactAddressType ;
	rdfs:label "fax contact type"^^xsd:string ;
        skos:prefLabel "fax number"@en ;
	rdfs:comment """olive:ContactType-Fax is an instance of olive:ContactAddressType."""^^xsd:string ;
	olive:mapsTo-fhir "fax"^^xsd:string ;
.

olive:ContactType-Pager a olive:ContactAddressType ;
	rdfs:label "pager contact type"^^xsd:string ;
        skos:prefLabel "pager number"@en ;
	rdfs:comment """olive:ContactType-Pager is an instance of olive:ContactAddressType."""^^xsd:string ;
	olive:mapsTo-fhir "pager"^^xsd:string ;
.

olive:ContactType-Phone a olive:ContactAddressType ;
	rdfs:label "phone contact type"^^xsd:string ;
        skos:prefLabel "phone number"@en ;
	rdfs:comment """olive:ContactType-Phone is an instance of olive:ContactAddressType."""^^xsd:string ;
	olive:mapsTo-fhir "phone"^^xsd:string ;
.

olive:ContactType-Text a olive:ContactAddressType ;
	rdfs:label "text contact type"^^xsd:string ;
        skos:prefLabel "text message number"@en ;
	rdfs:comment """olive:ContactType-Text is an instance of olive:ContactAddressType."""^^xsd:string ;
	olive:mapsTo-fhir "sms"^^xsd:string ;
.

olive:ContactType-Web a olive:ContactAddressType ;
	rdfs:label "web contact type"^^xsd:string ;
        skos:prefLabel "web address"@en ;
	rdfs:comment """olive:ContactType-Web is an instance of olive:ContactAddressType."""^^xsd:string ;
	olive:mapsTo-fhir "url"^^xsd:string ;
.

olive:DataClassificationType-AnonymizedData a olive:DataClassificationType ;
	rdfs:label "anonymized data classification type"^^xsd:string ;
	skos:prefLabel "anonymized data"@en ;
	rdfs:comment """Personal infomration that is anonymized in accordance with applicable law such that the data is no longer considered personal data/information. This does not include any de-identified information."""^^xsd:string ;
.

olive:DataClassificationType-ContracturallyRestrictedData a olive:SensitiveInformationType ;
	rdfs:label "contracturally restricted data classification type"^^xsd:string ;
	skos:prefLabel "contracturally restricted data"@en ;
	rdfs:comment """Data whose use is restricted by contract."""^^xsd:string ;
.

olive:DataClassificationType-ControlledData a olive:SensitiveInformationType ;
	rdfs:label "controlled data - data classification type"^^xsd:string ;
	skos:prefLabel "controlled data"@en ;
	rdfs:comment """Data that is governed or restricted by law or regulation (i.e. export-controlled data) - excluding personal data and PHI."""^^xsd:string ;
.

olive:DataClassificationType-DeidentifiedInformation a olive:DataClassificationType ;
	rdfs:label "de-identified information data classification type"^^xsd:string ;
	skos:prefLabel "de-identified data"@en ;
	skos:altLabel "de-identified PHI"@en ;
	rdfs:comment """PHI de-identified in accordance with the HIPAA Privacy Rule at 45 CFR 164.514, using either the Expert Determination (45 CFR 164.514(b)(1)) or Safe Harbor (45 CFR 164.541(b)(2)) method."""^^xsd:string ;
.

olive:DataClassificationType-Metadata a olive:SensitiveInformationType ;
	rdfs:label "metadata data classification type"^^xsd:string ;
	skos:prefLabel "metadata"@en ;
	rdfs:comment """Metadata includes information about technical and business processes, data rules and constraints, and logical and physical data structures."""^^xsd:string ;
.

olive:DataClassificationType-PersonalData a olive:SensitiveInformationType ;
	rdfs:label "personal data - data classification type"^^xsd:string ;
	skos:prefLabel "personal data"@en ;
	skos:altLabel "personal information"@en , "personally identifying information"@en , "PII"@en ;
	rdfs:comment """Any information related to an identified or identifiable person, or as may be defined by applicable laws. This includes direct and indirect identifiers."""^^xsd:string ;
.

olive:DataClassificationType-SensitivePersonalData a olive:SensitiveInformationType ;
	rdfs:label "sensitive personal data - data classification type"^^xsd:string ;
	skos:prefLabel "sensitive personal data"@en ;
	skos:altLabel "sensitive personal information"@en ;
	rdfs:comment """Personal data/information relating to an individual’s social security, driver’s license, state identification card, or passport number; account log-in information; precise geolocation; race; ethnic origin; religious or philosophical beliefs or union membership; contents of an individual’s written communications unless the business is the intended recipient; genetic data; biometric data; health data (not covered by HIPAA); and sec life or sexual orientation. Applicable law may include other types of data/information as sensitive personal data/information."""^^xsd:string ;
.

olive:DataClassificationType-PublicData a olive:DataClassificationType ;
	rdfs:label "public data classification type"^^xsd:string ;
	skos:prefLabel "public data"@en ;
	skos:altLabel "freely accessible data"@en ;
	rdfs:comment """This type of data is freely accessible to the public. It can be freely used, reused, and redistributed without repercussions."""^^xsd:string ;
	olive:categorizedBy olive:DataSensitivityLevel-Public ;
.

olive:DataClassificationType-SensitiveBusinessInformation a olive:SensitiveInformationType ;
	rdfs:label "sensitive business information"^^xsd:string ;
	skos:prefLabel "sensitive business information"@en ;
	skos:altLabel "sensitive business data"@en ;
	rdfs:comment """Business information that would pose a risk if released. Examples include: sensitive financial and shareholder information, trade secrets, intellectual property, customer and supplier information."""@en ;
.

olive:DataSensitivityLevel-Public a olive:DataSensitivityLevel ;
	rdfs:label "public data sensitivity level"^^xsd:string ;
	skos:prefLabel "public information"@en ;
	skos:altLabel "public"@en ;
	rdfs:comment """Data with this sensitivity level requires no confidential treatment because it is in the public sphere or otherwise is not expected to be protected or secured."""^^xsd:string ;
.

olive:Deprecated a olive:UseType ;
	rdfs:label "deprecated"^^xsd:string ;
        skos:prefLabel "deprecated"@en ;
	rdfs:comment """olive:Deprecated is an instance of olive:UseType."""^^xsd:string ;
	olive:mapsTo-fhir "old"^^xsd:string ;
.

olive:Downvote a olive:Vote ;
        rdfs:label "downvote"^^xsd:string;
        skos:prefLabel "downvote"@en ;
        rdfs:comment """A negative assessment, downvotes indicate that the thing upvoted should be, if anything, less visible to fewer people."""^^xsd:string ;
.

olive:EnglishLanguage a olive:NaturalLanguage ;
	rdfs:label "english language"^^xsd:string ;
        skos:prefLabel "English"@en ;
	rdfs:comment """olive:EnglishLanguage is an instance of olive:Language."""^^xsd:string ;
	olive:mapsTo "en", "english" ;
.

olive:Female-Gender a olive:Gender-Category ;
	rdfs:label "female gender"^^xsd:string ;
        skos:prefLabel "female"@en ;
	skos:altLabel "woman"@en, "womxn"@en ;
	rdfs:comment """olive:Female-Gender is an instance of olive:Gender-Category."""^^xsd:string ;
.

olive:Female-Sex a olive:Sex-Category ;
	rdfs:label "female sex"^^xsd:string ;
        skos:prefLabel "female"@en ;
	rdfs:comment """olive:Female-Sex is an instance of olive:Sex-Category."""^^xsd:string ;
	olive:mapsTo-fhir "female"^^xsd:string ;
    olive:mapsTo-assignedSexText "F"^^xsd:string, "f", "Female"^^xsd:string, "Woman"^^xsd:string ;
.

olive:Feminine a olive:GenderExpression-Category ;
	rdfs:label "feminine"^^xsd:string ;
        skos:prefLabel "feminine"@en ;
	rdfs:comment """olive:Feminine is an instance of olive:GenderExpressionCategory."""^^xsd:string ;
.

olive:GenderNonConforming a olive:Gender-Category ;
	rdfs:label "gender non conforming"^^xsd:string ;
        skos:prefLabel "gendernonconforming"@en ;
	rdfs:comment """olive:GenderNonConforming is an instance of olive:Gender-Category."""^^xsd:string ;
.

olive:HomeUse a olive:UseType ;
	rdfs:label "home use"^^xsd:string ;
        skos:prefLabel "home"@en ;
	rdfs:comment """olive:HomeUse is an instance of olive:UseType. For example, a phone may be a home phone."""^^xsd:string ;
	olive:mapsTo-fhir "home"^^xsd:string ;
.

olive:Inactive a olive:Status ;
	rdfs:label "inactive"^^xsd:string ;
        skos:prefLabel "inactive"@en ;
	rdfs:comment """olive:Inactive is an instance of olive:Status. Compare with olive:Active."""^^xsd:string ;
.

olive:IndirectlyMapped a owl:NamedIndividual, olive:MappingStatus ;
        rdfs:label "indirectly mapped"^^xsd:string;
        skos:prefLabel "indirectly mapped into the Olive ontology"@en ;
        rdfs:comment """See the comment on olive:mappingStatus."""^^xsd:string ;
.

olive:InProgress a olive:CommitmentCategory ;
	rdfs:label "in progress"^^xsd:string ;
        skos:prefLabel "in progress"@en ;
	rdfs:comment """olive:InProgress is an instance of olive:CommitmentCategory. See the comment on olive:Satisfied for more discussion."""^^xsd:string ;
.

olive:Male-Gender a olive:Gender-Category ;
	rdfs:label "male gender"^^xsd:string ;
        skos:prefLabel "male"@en ;
	skos:altLabel "man"@en, "mxn"@en ;
	rdfs:comment """olive:Male-Gender is an instance of olive:Gender-Category."""^^xsd:string ;
.

olive:Male-Sex a olive:Sex-Category ;
	rdfs:label "male sex"^^xsd:string ;
        skos:prefLabel "male"@en ;
	rdfs:comment """olive:Male-Sex is an instance of olive:Sex-Category."""^^xsd:string ;
	olive:mapsTo-fhir "male"^^xsd:string ;
    olive:mapsTo-assignedSexText "M"^^xsd:string, "m", "Male"^^xsd:string, "Man"^^xsd:string ;
.

olive:Mapped a owl:NamedIndividual, olive:MappingStatus ;
        rdfs:label "mapped"^^xsd:string;
        skos:prefLabel "mapped into the Olive ontology"@en ;
        rdfs:comment """See the comment on olive:mappingStatus."""^^xsd:string ;
.

olive:Masculine a olive:GenderExpression-Category ;
	rdfs:label "masculine"^^xsd:string ;
        skos:prefLabel "masculine"@en ;
	rdfs:comment """olive:Masculine is an instance of olive:GenderExpressionCategory."""^^xsd:string ;
.

olive:MetalLevel-Bronze a olive:MetalLevel ;
	rdfs:label "bronze metal level"^^xsd:string ;
        skos:prefLabel "bronze metal level"@en ;
	rdfs:comment """olive:MetalLevel-Bronze is an instance of olive:MetalLevel."""^^xsd:string ;
	olive:mapsTo "Bronze" ;
.

olive:MetalLevel-Catastrophic a olive:MetalLevel ;
	rdfs:label "catastrophic metal level"^^xsd:string ;
        skos:prefLabel "catastrophic metal level"@en ;
	rdfs:comment """olive:MetalLevel-Catastrophic is an instance of olive:MetalLevel."""^^xsd:string ;
	olive:mapsTo "Catastrophic" ;
.

olive:MetalLevel-Gold a olive:MetalLevel ;
	rdfs:label "gold metal level"^^xsd:string ;
        skos:prefLabel "gold metal level"@en ;
	rdfs:comment """olive:MetalLevel-Gold is an instance of olive:MetalLevel."""^^xsd:string ;
	olive:mapsTo "Gold" ;
.

olive:MetalLevel-Platinum a olive:MetalLevel ;
	rdfs:label "platinum metal level"^^xsd:string ;
        skos:prefLabel "platinum metal level"@en ;
	rdfs:comment """olive:MetalLevel-Platinum is an instance of olive:MetalLevel."""^^xsd:string ;
	olive:mapsTo "Platinum" ;
.

olive:MetalLevel-Silver a olive:MetalLevel ;
	rdfs:label "silver metal level"^^xsd:string ;
        skos:prefLabel "silver metal level"@en ;
	rdfs:comment """olive:MetalLevel-Silver is an instance of olive:MetalLevel."""^^xsd:string ;
	olive:mapsTo "Silver" ;
.

olive:MobileUse a olive:UseType ;
	rdfs:label "mobile use"^^xsd:string ;
        skos:prefLabel "mobile"@en ;
	rdfs:comment """olive:MobileUse is an instance of olive:UseType. For example, a phone or blood pressure machine may be for mobile use, as opposed to one that is fixed in place."""^^xsd:string ;
	olive:mapsTo-fhir "mobile"^^xsd:string ;
.

olive:NormalUse a olive:UseType ;
	rdfs:label "normal use"^^xsd:string ;
        skos:prefLabel "normal"@en ;
	rdfs:comment """olive:NormalUse is an instance of olive:UseType."""^^xsd:string ;
	olive:mapsTo-fhir "usual"^^xsd:string ;
.

olive:NONE-StardogReasoningLevel a olive:ReasoningLevel ;
	rdfs:label "NONE-stardog reasoning level"^^xsd:string ;
        skos:prefLabel "NONE"@en ;
	rdfs:comment """olive:NONE-StardogReasoningLevel is an instance of olive:ReasoningLevel."""^^xsd:string ;
.

olive:NotAssertible a olive:AssertibilityStatus ;
	rdfs:label "not assertible"^^xsd:string ;
	skos:prefLabel "not assertible"@en ;
	rdfs:comment """olve:NotAssertible is an instance of olive:AssertibilityStatus used to indicate that a given term should not be used to make assertions. See also olive:assertibility.""" ;
.

olive:OfficialUse a olive:UseType ;
	rdfs:label "official use"^^xsd:string ;
        skos:prefLabel "official"@en ;
	rdfs:comment """olive:OfficialUse is an instance of olive:UseType."""^^xsd:string ;
	olive:mapsTo-fhir "official"^^xsd:string ;
.

olive:Olive a owl:NamedIndividual, olive:Organization ;
        rdfs:label "Olive"^^xsd:string;
        skos:prefLabel "Olive"@en ;
        rdfs:comment """This is the company, formerly known as CrossChx, founded by Sean Lane in 2012.

Olive builds artificial intelligence and RPA solutions that empower healthcare organizations to improve efficiency and patient care while reducing costly administrative errors.

Olive also hires exceptionally talented ontological engineers."""^^xsd:string ;
      olive:suborganization olive:OliveAssures, olive:OliveEnables, olive:OliveHelps, olive:OliveKnows, olive:OliveWorks ;
.

olive:OliveOntology a owl:Ontology ;
	rdfs:label "olive ontology"^^xsd:string ;
        skos:prefLabel "Olive ontology"@en ;
	rdfs:comment """olive:OliveOntology is an instance of owl:Ontology."""^^xsd:string ;
.

olive:Optional a owl:NamedIndividual, olive:DeonticStatus ;
        rdfs:label "optional"^^xsd:string;
        skos:prefLabel "optional"@en ;
        rdfs:comment """The deontic status of being optional. Everything that is optional is also permitted."""^^xsd:string ;
.

olive:Other-Sex a olive:Sex-Category ;
	rdfs:label "other sex"^^xsd:string ;
        skos:prefLabel "other"@en ;
	rdfs:comment """olive:Other-Sex is an instance of olive:Sex-Category."""^^xsd:string ;
	olive:mapsTo-fhir "other"^^xsd:string ;
    olive:mapsTo-assignedSexText "O"^^xsd:string, "o", "Other"^^xsd:string, "Intersex"^^xsd:string ;
.

olive:PartiallyMapped a owl:NamedIndividual, olive:MappingStatus ;
        rdfs:label "partially mapped"^^xsd:string;
        skos:prefLabel "partially mapped into the Olive ontology"@en ;
        rdfs:comment """See the comment on olive:mappingStatus."""^^xsd:string ;
.

olive:QL-StardogReasoningLevel a olive:ReasoningLevel ;
	rdfs:label "QL-stardog reasoning level"^^xsd:string ;
        skos:prefLabel "QL"@en ;
	rdfs:comment """olive:QL-StardogReasoningLevel is an instance of olive:ReasoningLevel."""^^xsd:string ;
.

olive:Required a owl:NamedIndividual, olive:DeonticStatus ;
        rdfs:label "required"^^xsd:string;
        skos:prefLabel "required"@en ;
        rdfs:comment """The deontic status of being required, obligatory. Required things are things that are not forbidden."""^^xsd:string ;
.

olive:RDFS-StardogReasoningLevel a olive:ReasoningLevel ;
	rdfs:label "RDFS-stardog reasoning level"^^xsd:string ;
        skos:prefLabel "RDFS"@en ;
	rdfs:comment """olive:RDFS-StardogReasoningLevel is an instance of olive:ReasoningLevel."""^^xsd:string ;
.

olive:ReadOnly a olive:FileAttribute ;
	rdfs:label "read only"^^xsd:string ;
        skos:prefLabel "read only"@en ;
	rdfs:comment """olive:ReadOnly is an instance of olive:FileAttribute. Files that are categorized by this attribute cannot be modified; users can only read the file's contents without contributing/modifying those contents."""^^xsd:string ;
.

olive:Satisfied a olive:CommitmentCategory ;
	rdfs:label "satisfied"^^xsd:string ;
        skos:prefLabel "satisfied"@en ;
	rdfs:comment """olive:Satisfied is an instance of olive:CommitmentCategory. A commitment is satisfied just in case all of its requirements have been met. It is violated, roughly, if the person(s) responsible for satisfying the commitment has made it such that the commitment is unsatisfiable. It is avoided if the commitment is no longer relevant to the relevant persons. A given commitment cannot be both satisfied and violated.

Take an example: I promise to meet you for lunch at noon if I'm in town. If I make it to town and meet you for lunch, then that obligation is satisfied (that is, :MyObligation olive:categorizedBy olive:Satisfied). If I come to town and fail to meet your for lunch, I have violated my commitment. If I don't even come to town, the obligation is avoided. The status might also be up in the air for quite a while. If I come to town and and on my way to lunch but have not yet gotten there, we might say that the commitment is in progress despite not being satisfied, violated, or avoided (yet)."""^^xsd:string ;
.

olive:SecondaryUse a olive:UseType ;
	rdfs:label "secondary use"^^xsd:string ;
        skos:prefLabel "secondary"@en ;
	rdfs:comment """olive:SecondaryUse is an instance of olive:UseType."""^^xsd:string ;
	olive:mapsTo-fhir "secondary"^^xsd:string ;
.

olive:SensitiveInfo-OliveIP a olive:SensitiveInformationType ;
	rdfs:label "SensitiveInfo Olive IP"^^xsd:string ;
        skos:prefLabel "Olive IP"@en ;
	rdfs:comment """olive:SensitiveInfo-OliveIP is an instance of olive:SensitiveInformationType."""^^xsd:string ;
	olive:categorizedBy olive:DataSensitivityLevel-OliveHighlyConfidential ;
	olive:subCategoryOf olive:DataClassificationType-SensitiveBusinessInformation ;
.

olive:SensitiveInfo-PHI a olive:SensitiveInformationType ;
	rdfs:label "SensitiveInfo PHI"^^xsd:string ;
        skos:prefLabel "PHI"@en ;
	rdfs:comment """Defined by HIPAA as individually identifiable information that relates to an individual’s past, present, future physical or mental health or condition, the provision of health care to an individual, or the past present or future payment for the provision of health care for the individual, and that identifies the individual or can be reasonably used to identify the individual. PHI is limited to health information received from or created by a Covered Entity, who is usually a healthcare system or provider.  PHI may also include information related to health insurance details and associated payment information. Health data that is not regulated by HIPAA, should not be called PHI, and should be referred to as personal data/information."""^^xsd:string ;
	olive:categorizedBy olive:DataSensitivityLevel-OliveHighlyConfidential ;
.

olive:Status-Build a olive:ProductStatus;
        skos:prefLabel "build"@en ;
	olive:priorityScore "120"^^xsd:integer ;
.

olive:SL-StardogReasoningLevel a olive:ReasoningLevel ;
	rdfs:label "SL-stardog reasoning level"^^xsd:string ;
        skos:prefLabel "SL"@en ;
	rdfs:comment """olive:SL-StardogReasoningLevel is an instance of olive:ReasoningLevel."""^^xsd:string ;
.

olive:SSVURITemplate a olive:URITemplate ;
	rdfs:label "SSV URI template"^^xsd:string ;
        skos:prefLabel "SSV URI template"@en ;
	rdfs:comment """olive:SSVURITemplate is an instance of olive:URITemplate."""^^xsd:string ;
	olive:uniqueText "olive:{TYPE}/{type_id}={VALUE};hospital_system_name={VALUE}" ;
	olive:note "For the templated text, the {TYPE} will typically be one of: Doctor, Patient, or Hospital. And the {type_id} will be things like empi_id and provider_id." ;
.

olive:StubTerm a olive:OntologyTermType ;
	rdfs:label "stub term"^^xsd:string ;
        skos:prefLabel "stubterm"@en ;
	rdfs:comment """olive:StubTerm is an instance of olive:OntologyTermType."""^^xsd:string ;
.

olive:TemporaryUse a olive:UseType ;
	rdfs:label "temporary use"^^xsd:string ;
        skos:prefLabel "temporary"@en ;
	rdfs:comment """olive:TemporaryUse is an instance of olive:UseType."""^^xsd:string ;
	olive:mapsTo-fhir "temp"^^xsd:string ;
.

olive:TermRequiringReview a olive:OntologyTermType ;
	rdfs:label "term requiring review"^^xsd:string ;
        skos:prefLabel "term requiring review"@en ;
	rdfs:comment """olive:TermRequiringReview is an instance of olive:OntologyTermType. Every term in this category should be reviewed and the categorization removed."""^^xsd:string ;
.

olive:UnifiedMedicalLanguageSystem a olive:System, olive:NonphysicalArtifact ;
	rdfs:label "unified medical language system"^^xsd:string ;
        skos:prefLabel "UMLS"@en ;
	rdfs:comment """olive:UnifiedMedicalLanguageSystem is an instance of olive:System and olive:NonphysicalArtifact."""^^xsd:string ;
.

olive:Unmapped a owl:NamedIndividual, olive:MappingStatus ;
        rdfs:label "unmapped"^^xsd:string;
        skos:prefLabel "not yet mapped into the Olive ontology"@en ;
        rdfs:comment """See the comment on olive:mappingStatus."""^^xsd:string ;
.

olive:Upvote a olive:Vote ;
        rdfs:label "upvote"^^xsd:string;
        skos:prefLabel "upvote"@en ;
        rdfs:comment """A positive assessment, upvotes indicate that the thing upvoted should be, if anything, more visible to more people."""^^xsd:string ;
.

olive:Violated a olive:CommitmentCategory ;
	rdfs:label "violated"^^xsd:string ;
        skos:prefLabel "violated"@en ;
	rdfs:comment """olive:Violated is an instance of olive:CommitmentCategory. See the comment on olive:Satisfied for more discussion."""^^xsd:string ;
.

olive:WorkUse a olive:UseType ;
	rdfs:label "work use"^^xsd:string ;
        skos:prefLabel "work"@en ;
	rdfs:comment """olive:WorkUse is an instance of olive:UseType. For example, a phone or computer may be for work use."""^^xsd:string ;
	olive:mapsTo-fhir "work"^^xsd:string ;
.


#################################################################
#   UNITS
#################################################################

olive:_USDollar a owl:NamedIndividual ,	owl:Thing , olive:BaseUnit ;
	rdfs:label "US Dollar"^^xsd:string ;
	skos:prefLabel "US Dolalr"@en ;
	skos:altLabel "USD"@en, "$"@en ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:baseConversionFactor "1e+00"^^xsd:double ;
	olive:hasBaseUnit olive:_USDollar ;
	olive:formerName "gist:_USDollar"^^xsd:string;
.

olive:_ampere a owl:NamedIndividual , owl:Thing , olive:BaseUnit	;
	rdfs:label "ampere"^^xsd:string ;
	skos:prefLabel "ampere"@en ;
	skos:altLabel "amp"@en ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:baseConversionFactor "1e+00"^^xsd:double ;
	olive:hasBaseUnit olive:_ampere ;
	olive:formerName "gist:_ampere"^^xsd:string;
.

olive:_bit a owl:NamedIndividual , owl:Thing , olive:BaseUnit ;
	rdfs:comment "A bit (short for binary digit) is the smallest unit of data in a computer. A bit has a single binary value, either 0 or 1."^^xsd:string ;
	rdfs:label "bit"^^xsd:string ;
	skos:prefLabel "bit"@en ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:baseConversionFactor "1e+00"^^xsd:double ;
	olive:hasBaseUnit olive:_bit ;
	olive:formerName "gist:_bit"^^xsd:string;
.

olive:_candela a owl:NamedIndividual , owl:Thing , olive:BaseUnit ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	rdfs:label "candela"^^xsd:string ;
	skos:prefLabel "candela"@en ;
	skos:altLabel "candle"@en ;
	olive:baseConversionFactor "1e+00"^^xsd:double ;
	olive:hasBaseUnit olive:_candela ;
	olive:formerName "gist:_candela"^^xsd:string;
.

olive:_day a owl:NamedIndividual , olive:DurationUnit ;
	olive:baseConversionFactor "8.64e+04"^^xsd:double ;
	rdfs:label "day"^^xsd:string ;
	skos:prefLabel "day"@en ;
	olive:hasBaseUnit olive:_second ;
	olive:formerName "gist:_day"^^xsd:string;
.

olive:_each a owl:NamedIndividual , owl:Thing ,	olive:BaseUnit ;
	rdfs:label "each"^^xsd:string ;
	skos:prefLabel "each"@en ;
        rdfs:comment """olive:_each is the instance of olive:UnitOfMeasure that denotes counting individual objects. So, if I have 12 apples, I could denote that there are 12 things as follows:
ex:MyAppleCollection a olive:Collection;
olive:hasMagnitude [a olive:Count; gist:hasDecimalValue \"12\"^^xsd:double; olive:hasUoM olive:_each]."""^^xsd:string ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:baseConversionFactor "1e+00"^^xsd:double ;
	olive:hasBaseUnit olive:_each ;
	olive:formerName "gist:_each"^^xsd:string;
.

olive:_kelvin a owl:NamedIndividual , owl:Thing , olive:BaseUnit ;
	rdfs:label "Kelvin"^^xsd:string ;
	skos:prefLabel "Kelvin"@en ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:conversionOffset "0e+00"^^xsd:double ;
	olive:baseConversionFactor "1e+00"^^xsd:double ;
	olive:hasBaseUnit olive:_kelvin ;
	olive:formerName "gist:_kelvin"^^xsd:string;
.

olive:_kilogram	a owl:NamedIndividual ,	owl:Thing , olive:BaseUnit ;
	rdfs:label "kilogram"^^xsd:string ;
	skos:prefLabel "kilogram"@en ;
	skos:altLabel "kg"@en ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:baseConversionFactor "1e+00"^^xsd:double ;
	olive:hasBaseUnit olive:_kilogram ;
	olive:formerName "gist:_kilogram"^^xsd:string;
.

olive:_kilogram_per_square_meter a olive:RatioUnit, olive:BaseUnit ;
	skos:prefLabel "kg/m^2"@en ;
	rdfs:label "kilogram per square meter" ;
        rdfs:comment "The standard unit for BMI (see olive:bodyMassIndex)." ;
	olive:hasBaseUnit olive:_kilogram_per_square_meter ;
	olive:baseConversionFactor "1e+00"^^xsd:double ;
	olive:numerator olive:_kilogram ;
	olive:denominator olive:_square_meter ;
.

olive:_meter a owl:NamedIndividual , owl:Thing , olive:BaseUnit	;
	rdfs:label "meter"^^xsd:string ;
	skos:prefLabel "meter"@en ;
	skos:altLabel "m"@en ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:baseConversionFactor "1e+00"^^xsd:double ;
	olive:hasBaseUnit olive:_meter ;
	olive:formerName "gist:_meter"^^xsd:string;
.

olive:_millisecond a owl:NamedIndividual , olive:DurationUnit ;
	rdfs:label "millisecond"^^xsd:string ;
	skos:prefLabel "millisecond"@en ;
	skos:altLabel "ms"@en ;
	olive:baseConversionFactor "1e-03"^^xsd:double ;
	olive:hasBaseUnit olive:_second ;
	olive:formerName "gist:_millisecond"^^xsd:string;
.

olive:_minute a	owl:NamedIndividual , olive:DurationUnit ;
	rdfs:label "minute"^^xsd:string ;
	skos:prefLabel "minute"@en ;
	olive:baseConversionFactor "6e+01"^^xsd:double ;
	olive:hasBaseUnit olive:_second ;
	olive:formerName "gist:_minute"^^xsd:string;
.

olive:_mole a owl:NamedIndividual , owl:Thing ,	olive:BaseUnit	;
	rdfs:label "mole"^^xsd:string ;
	skos:prefLabel "mole"@en ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:baseConversionFactor "1e+00"^^xsd:double ;
	olive:hasBaseUnit olive:_mole ;
	olive:formerName "gist:_mole"^^xsd:string;
.

olive:_month a owl:NamedIndividual , olive:DurationUnit ;
	rdfs:label "month"^^xsd:string ;
	skos:prefLabel "month"@en ;
	olive:baseConversionFactor "3.80517e-7"^^xsd:double ;
	olive:hasBaseUnit olive:_second ;
.

olive:_second a	owl:NamedIndividual , owl:Thing , olive:BaseUnit , olive:DurationUnit ;
	rdfs:label "second"^^xsd:string ;
	skos:prefLabel "second"@en ;
	rdfs:isDefinedBy <https://ontologies.semanticarts.com/o/gistCore> ;
	olive:baseConversionFactor "1e+00"^^xsd:double ;
	olive:hasBaseUnit olive:_second ;
	olive:formerName "gist:_second"^^xsd:string;
.

olive:_square_meter a owl:NamedIndividual , owl:Thing, olive:BaseUnit, olive:AreaUnit ;
        rdfs:label "square meter"^^xsd:string ;
	skos:prefLabel "m^2"@en ;
	skos:altLabel "square meter"@en ;
	olive:hasBaseConversionFactr "1e+00"^^xsd:double ;
	olive:hasBaseUnit olive:_square_meter ;
	olive:multiplicand olive:_meter, olive:_meter ;
.

olive:_week a owl:NamedIndividual , olive:DurationUnit ;
	rdfs:label "week"^^xsd:string ;
	skos:prefLabel "week"@en ;
	olive:baseConversionFactor "1.65344e-6"^^xsd:double ;
	olive:hasBaseUnit olive:_second ;
.

olive:_year a owl:NamedIndividual , olive:DurationUnit ;
	rdfs:label "year"^^xsd:string ;
	skos:prefLabel "year"@en ;
	olive:baseConversionFactor "3.171e-8"^^xsd:double ;
	olive:hasBaseUnit olive:_second ;
.


[]
	a owl:AllDifferent ;
	owl:distinctMembers (
		olive:_USDollar
		olive:_ampere
		olive:_bit
		olive:_candela
		olive:_each
		olive:_kelvin
		olive:_kilogram
		olive:_meter
		olive:_mole
		olive:_second
	) ;
	.

#################################################################
#   Olive Inverse Properties
#################################################################

## Everything in this section should be an inverse object property. The only assertions to appear here should be lexical assertions and that the property is an inverse of something that appears above this line. All other 'real OE' should occur on their inverses; this will keep things from diverging in time.


#################################################################
#   SKOS
#################################################################


#################################################################
#    Annotation properties
#################################################################

###  http://purl.org/dc/terms/contributor
dct:contributor rdf:type owl:AnnotationProperty .


###  http://purl.org/dc/terms/creator
dct:creator rdf:type owl:AnnotationProperty .


###  http://purl.org/dc/terms/description
dct:description rdf:type owl:AnnotationProperty .


###  http://purl.org/dc/terms/title
dct:title rdf:type owl:AnnotationProperty .


###  http://www.w3.org/2004/02/skos/core#altLabel
skos:altLabel rdf:type owl:AnnotationProperty ;
              rdfs:comment "The range of skos:altLabel is the class of RDF plain literals."@en ,
                           "skos:prefLabel, skos:altLabel and skos:hiddenLabel are pairwise disjoint properties."@en ;
              rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
              rdfs:label "alternative label"@en ;
              skos:definition "An alternative lexical label for a resource."@en ;
              skos:example "Acronyms, abbreviations, spelling variants, and irregular plural/singular forms may be included among the alternative labels for a concept. Mis-spelled terms are normally included as hidden labels (see skos:hiddenLabel)."@en ;
              rdfs:subPropertyOf rdfs:label .


###  http://www.w3.org/2004/02/skos/core#changeNote
skos:changeNote rdf:type owl:AnnotationProperty ;
                rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                rdfs:label "change note"@en ;
                skos:definition "A note about a modification to a concept."@en ;
                rdfs:subPropertyOf skos:note .


###  http://www.w3.org/2004/02/skos/core#definition
skos:definition rdf:type owl:AnnotationProperty ;
                rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                rdfs:label "definition"@en ;
                skos:definition "A statement or formal explanation of the meaning of a concept."@en ;
                rdfs:subPropertyOf skos:note .


###  http://www.w3.org/2004/02/skos/core#editorialNote
skos:editorialNote rdf:type owl:AnnotationProperty ;
                   rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                   rdfs:label "editorial note"@en ;
                   skos:definition "A note for an editor, translator or maintainer of the vocabulary."@en ;
                   rdfs:subPropertyOf skos:note .


###  http://www.w3.org/2004/02/skos/core#example
skos:example rdf:type owl:AnnotationProperty ;
             rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
             rdfs:label "example"@en ;
             skos:definition "An example of the use of a concept."@en ;
             rdfs:subPropertyOf skos:note .


###  http://www.w3.org/2004/02/skos/core#hiddenLabel
skos:hiddenLabel rdf:type owl:AnnotationProperty ;
                 rdfs:comment "The range of skos:hiddenLabel is the class of RDF plain literals."@en ,
                              "skos:prefLabel, skos:altLabel and skos:hiddenLabel are pairwise disjoint properties."@en ;
                 rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                 rdfs:label "hidden label"@en ;
                 skos:definition "A lexical label for a resource that should be hidden when generating visual displays of the resource, but should still be accessible to free text search operations."@en ;
                 rdfs:subPropertyOf rdfs:label .


###  http://www.w3.org/2004/02/skos/core#historyNote
skos:historyNote rdf:type owl:AnnotationProperty ;
                 rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                 rdfs:label "history note"@en ;
                 skos:definition "A note about the past state/use/meaning of a concept."@en ;
                 rdfs:subPropertyOf skos:note .


###  http://www.w3.org/2004/02/skos/core#note
skos:note rdf:type owl:AnnotationProperty ;
          rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
          rdfs:label "note"@en ;
          skos:definition "A general note, for any purpose."@en ;
          skos:scopeNote "This property may be used directly, or as a super-property for more specific note types."@en .


###  http://www.w3.org/2004/02/skos/core#prefLabel
skos:prefLabel rdf:type owl:AnnotationProperty ;
               rdfs:comment "A resource has no more than one value of skos:prefLabel per language tag, and no more than one value of skos:prefLabel without language tag."@en ,
                            "The range of skos:prefLabel is the class of RDF plain literals."@en ,
                            """skos:prefLabel, skos:altLabel and skos:hiddenLabel are pairwise
      disjoint properties."""@en ;
               rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
               rdfs:label "preferred label"@en ;
               skos:definition "The preferred lexical label for a resource, in a given language."@en ;
               rdfs:subPropertyOf rdfs:label .


###  http://www.w3.org/2004/02/skos/core#scopeNote
skos:scopeNote rdf:type owl:AnnotationProperty ;
               rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
               rdfs:label "scope note"@en ;
               skos:definition "A note that helps to clarify the meaning and/or the use of a concept."@en ;
               rdfs:subPropertyOf skos:note .


#################################################################
#    Object Properties
#################################################################

###  http://www.w3.org/2004/02/skos/core#broadMatch
skos:broadMatch rdf:type owl:ObjectProperty ;
                rdfs:subPropertyOf skos:broader ,
                                   skos:mappingRelation ;
                owl:inverseOf skos:narrowMatch ;
                rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                rdfs:label "has broader match"@en ;
                skos:definition "skos:broadMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes."@en .


###  http://www.w3.org/2004/02/skos/core#broader
skos:broader rdf:type owl:ObjectProperty ;
             rdfs:subPropertyOf skos:broaderTransitive ;
             owl:inverseOf skos:narrower ;
             rdfs:comment "Broader concepts are typically rendered as parents in a concept hierarchy (tree)."@en ;
             rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
             rdfs:label "has broader"@en ;
             skos:definition "Relates a concept to a concept that is more general in meaning."@en ;
             skos:scopeNote "By convention, skos:broader is only used to assert an immediate (i.e. direct) hierarchical link between two conceptual resources."@en .


###  http://www.w3.org/2004/02/skos/core#broaderTransitive
skos:broaderTransitive rdf:type owl:ObjectProperty ;
                       rdfs:subPropertyOf skos:semanticRelation ;
                       owl:inverseOf skos:narrowerTransitive ;
                       rdf:type owl:TransitiveProperty ;
                       rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                       rdfs:label "has broader transitive"@en ;
                       skos:definition "skos:broaderTransitive is a transitive superproperty of skos:broader." ;
                       skos:scopeNote "By convention, skos:broaderTransitive is not used to make assertions. Rather, the properties can be used to draw inferences about the transitive closure of the hierarchical relation, which is useful e.g. when implementing a simple query expansion algorithm in a search application."@en .


###  http://www.w3.org/2004/02/skos/core#closeMatch
skos:closeMatch rdf:type owl:ObjectProperty ;
                rdfs:subPropertyOf skos:mappingRelation ;
                rdf:type owl:SymmetricProperty ;
                rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                rdfs:label "has close match"@en ;
                skos:definition "skos:closeMatch is used to link two concepts that are sufficiently similar that they can be used interchangeably in some information retrieval applications. In order to avoid the possibility of \"compound errors\" when combining mappings across more than two concept schemes, skos:closeMatch is not declared to be a transitive property."@en .


###  http://www.w3.org/2004/02/skos/core#exactMatch
skos:exactMatch rdf:type owl:ObjectProperty ;
                rdfs:subPropertyOf skos:closeMatch ;
                rdf:type owl:SymmetricProperty ,
                         owl:TransitiveProperty ;
                rdfs:comment "skos:exactMatch is disjoint with each of the properties skos:broadMatch and skos:relatedMatch."@en ;
                rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                rdfs:label "has exact match"@en ;
                skos:definition "skos:exactMatch is used to link two concepts, indicating a high degree of confidence that the concepts can be used interchangeably across a wide range of information retrieval applications. skos:exactMatch is a transitive property, and is a sub-property of skos:closeMatch."@en .


###  http://www.w3.org/2004/02/skos/core#hasTopConcept
skos:hasTopConcept rdf:type owl:ObjectProperty ;
                   owl:inverseOf skos:topConceptOf ;
                   rdfs:domain skos:ConceptScheme ;
                   rdfs:range skos:Concept ;
                   rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                   rdfs:label "has top concept"@en ;
                   skos:definition "Relates, by convention, a concept scheme to a concept which is topmost in the broader/narrower concept hierarchies for that scheme, providing an entry point to these hierarchies."@en .


###  http://www.w3.org/2004/02/skos/core#inScheme
skos:inScheme rdf:type owl:ObjectProperty ;
              rdfs:range skos:ConceptScheme ;
              rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
              rdfs:label "is in scheme"@en ;
              skos:definition "Relates a resource (for example a concept) to a concept scheme in which it is included."@en ;
              skos:scopeNote "A concept may be a member of more than one concept scheme."@en .


###  http://www.w3.org/2004/02/skos/core#mappingRelation
skos:mappingRelation rdf:type owl:ObjectProperty ;
                     rdfs:subPropertyOf skos:semanticRelation ;
                     rdfs:comment "These concept mapping relations mirror semantic relations, and the data model defined below is similar (with the exception of skos:exactMatch) to the data model defined for semantic relations. A distinct vocabulary is provided for concept mapping relations, to provide a convenient way to differentiate links within a concept scheme from links between concept schemes. However, this pattern of usage is not a formal requirement of the SKOS data model, and relies on informal definitions of best practice."@en ;
                     rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                     rdfs:label "is in mapping relation with"@en ;
                     skos:definition "Relates two concepts coming, by convention, from different schemes, and that have comparable meanings"@en .


###  http://www.w3.org/2004/02/skos/core#member
skos:member rdf:type owl:ObjectProperty ;
            rdfs:domain skos:Collection ;
            rdfs:range [ rdf:type owl:Class ;
                         owl:unionOf ( skos:Collection
                                       skos:Concept
                                     )
                       ] ;
            rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
            rdfs:label "has member"@en ;
            skos:definition "Relates a collection to one of its members."@en .


###  http://www.w3.org/2004/02/skos/core#memberList
skos:memberList rdf:type owl:ObjectProperty ,
                         owl:FunctionalProperty ;
                rdfs:domain skos:OrderedCollection ;
                rdfs:comment """For any resource, every item in the list given as the value of the
      skos:memberList property is also a value of the skos:member property."""@en ;
                rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                rdfs:label "has member list"@en ;
                skos:definition "Relates an ordered collection to the RDF list containing its members."@en .


###  http://www.w3.org/2004/02/skos/core#narrowMatch
skos:narrowMatch rdf:type owl:ObjectProperty ;
                 rdfs:subPropertyOf skos:mappingRelation ,
                                    skos:narrower ;
                 rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                 rdfs:label "has narrower match"@en ;
                 skos:definition "skos:narrowMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes."@en .


###  http://www.w3.org/2004/02/skos/core#narrower
skos:narrower rdf:type owl:ObjectProperty ;
              rdfs:subPropertyOf skos:narrowerTransitive ;
              rdfs:comment "Narrower concepts are typically rendered as children in a concept hierarchy (tree)."@en ;
              rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
              rdfs:label "has narrower"@en ;
              skos:definition "Relates a concept to a concept that is more specific in meaning."@en ;
              skos:scopeNote "By convention, skos:broader is only used to assert an immediate (i.e. direct) hierarchical link between two conceptual resources."@en .


###  http://www.w3.org/2004/02/skos/core#narrowerTransitive
skos:narrowerTransitive rdf:type owl:ObjectProperty ;
                        rdfs:subPropertyOf skos:semanticRelation ;
                        rdf:type owl:TransitiveProperty ;
                        rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                        rdfs:label "has narrower transitive"@en ;
                        skos:definition "skos:narrowerTransitive is a transitive superproperty of skos:narrower." ;
                        skos:scopeNote "By convention, skos:narrowerTransitive is not used to make assertions. Rather, the properties can be used to draw inferences about the transitive closure of the hierarchical relation, which is useful e.g. when implementing a simple query expansion algorithm in a search application."@en .


###  http://www.w3.org/2004/02/skos/core#related
skos:related rdf:type owl:ObjectProperty ;
             rdfs:subPropertyOf skos:semanticRelation ;
             rdf:type owl:SymmetricProperty ;
             rdfs:comment "skos:related is disjoint with skos:broaderTransitive"@en ;
             rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
             rdfs:label "has related"@en ;
             skos:definition "Relates a concept to a concept with which there is an associative semantic relationship."@en .


###  http://www.w3.org/2004/02/skos/core#relatedMatch
skos:relatedMatch rdf:type owl:ObjectProperty ;
                  rdfs:subPropertyOf skos:mappingRelation ,
                                     skos:related ;
                  rdf:type owl:SymmetricProperty ;
                  rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                  rdfs:label "has related match"@en ;
                  skos:definition "skos:relatedMatch is used to state an associative mapping link between two conceptual resources in different concept schemes."@en .


###  http://www.w3.org/2004/02/skos/core#semanticRelation
skos:semanticRelation rdf:type owl:ObjectProperty ;
                      rdfs:domain skos:Concept ;
                      rdfs:range skos:Concept ;
                      rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                      rdfs:label "is in semantic relation with"@en ;
                      skos:definition "Links a concept to a concept related by meaning."@en ;
                      skos:scopeNote "This property should not be used directly, but as a super-property for all properties denoting a relationship of meaning between concepts."@en .


###  http://www.w3.org/2004/02/skos/core#topConceptOf
skos:topConceptOf rdf:type owl:ObjectProperty ;
                  rdfs:subPropertyOf skos:inScheme ;
                  rdfs:domain skos:Concept ;
                  rdfs:range skos:ConceptScheme ;
                  rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                  rdfs:label "is top concept in scheme"@en ;
                  skos:definition "Relates a concept to the concept scheme that it is a top level concept of."@en .


#################################################################
#    Data properties
#################################################################

###  http://www.w3.org/2004/02/skos/core#notation
skos:notation rdf:type owl:DatatypeProperty ;
              rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
              rdfs:label "notation"@en ;
              skos:definition "A notation, also known as classification code, is a string of characters such as \"T58.5\" or \"303.4833\" used to uniquely identify a concept within the scope of a given concept scheme."@en ;
              skos:scopeNote "By convention, skos:notation is used with a typed literal in the object position of the triple."@en .


#################################################################
#    Classes
#################################################################

###  http://www.w3.org/2004/02/skos/core#Collection
skos:Collection rdf:type owl:Class ;
                owl:disjointWith skos:Concept ,
                                 skos:ConceptScheme ;
                rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                rdfs:label "Collection"@en ;
                skos:definition "A meaningful collection of concepts."@en ;
                skos:scopeNote "Labelled collections can be used where you would like a set of concepts to be displayed under a 'node label' in the hierarchy."@en .


###  http://www.w3.org/2004/02/skos/core#Concept
skos:Concept rdf:type owl:Class ;
             owl:disjointWith skos:ConceptScheme ;
             rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
             rdfs:label "Concept"@en ;
             skos:definition "An idea or notion; a unit of thought."@en .


###  http://www.w3.org/2004/02/skos/core#ConceptScheme
skos:ConceptScheme rdf:type owl:Class ;
                   rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                   rdfs:label "Concept Scheme"@en ;
                   skos:definition "A set of concepts, optionally including statements about semantic relationships between those concepts."@en ;
                   skos:example "Thesauri, classification schemes, subject heading lists, taxonomies, 'folksonomies', and other types of controlled vocabulary are all examples of concept schemes. Concept schemes are also embedded in glossaries and terminologies."@en ;
                   skos:scopeNote "A concept scheme may be defined to include concepts from different sources."@en .


###  http://www.w3.org/2004/02/skos/core#OrderedCollection
skos:OrderedCollection rdf:type owl:Class ;
                       rdfs:subClassOf skos:Collection ;
                       rdfs:isDefinedBy <http://www.w3.org/2004/02/skos/core> ;
                       rdfs:label "Ordered Collection"@en ;
                       skos:definition "An ordered collection of concepts, where both the grouping and the ordering are meaningful."@en ;
                       skos:scopeNote "Ordered collections can be used where you would like a set of concepts to be displayed in a specific order, and optionally under a 'node label'."@en .
